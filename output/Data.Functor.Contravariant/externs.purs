-- Generated by psc-make version 0.6.8
module Data.Functor.Contravariant where
import Data.Functor.Contravariant ()
import Prim ()
import Prelude ()
--  | A `Contravariant` functor can be seen as a way of changing the input type
--  | of a consumer of input, in contrast to the standard covariant `Functor`
--  | that can be seen as a way of changing the output type of a producer of
--  | output.
--  |
--  | `Contravariant` instances should satisfy the following laws:
--  |
--  | - Identity `(>$<) id = id`
--  | - Composition `(f >$<) <<< (g >$<) = (>$<) (g <<< f)`
--  | A `Contravariant` functor can be seen as a way of changing the input type
--  | of a consumer of input, in contrast to the standard covariant `Functor`
--  | that can be seen as a way of changing the output type of a producer of
--  | output.
--  |
--  | `Contravariant` instances should satisfy the following laws:
--  |
--  | - Identity `(>$<) id = id`
--  | - Composition `(f >$<) <<< (g >$<) = (>$<) (g <<< f)`
--  | A `Contravariant` functor can be seen as a way of changing the input type
--  | of a consumer of input, in contrast to the standard covariant `Functor`
--  | that can be seen as a way of changing the output type of a producer of
--  | output.
--  |
--  | `Contravariant` instances should satisfy the following laws:
--  |
--  | - Identity `(>$<) id = id`
--  | - Composition `(f >$<) <<< (g >$<) = (>$<) (g <<< f)`
--  | `(>#<)` is `(>$<)` with its arguments reversed.
class Contravariant f where
  (>$<) :: forall a b. (b -> a) -> f a -> f b
foreign import (>#<) :: forall a b f. (Data.Functor.Contravariant.Contravariant f) => f a -> (b -> a) -> f b
