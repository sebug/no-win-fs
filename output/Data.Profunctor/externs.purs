-- Generated by psc-make version 0.6.8
module Data.Profunctor where
import Data.Profunctor ()
import Prelude ()
import Prim ()
import Prelude ()
--  | A `Profunctor` is a `Functor` from the pair category `(Type^op, Type)`
--  | to `Type`.
--  |
--  | In other words, a `Profunctor` is a type constructor of two type
--  | arguments, which is contravariant in its first argument and covariant
--  | in its second argument.
--  | 
--  | The `dimap` function can be used to map functions over both arguments
--  | simultaneously.
--  |
--  | A straightforward example of a profunctor is the function arrow `(->)`.
--  |
--  | Laws:
--  | 
--  | - Identity: `dimap id id = id`
--  | - Composition: `dimap f1 g1 <<< dimap f2 g2 = dimap (f1 >>> f2) (g1 <<< g2)`
--  | A `Profunctor` is a `Functor` from the pair category `(Type^op, Type)`
--  | to `Type`.
--  |
--  | In other words, a `Profunctor` is a type constructor of two type
--  | arguments, which is contravariant in its first argument and covariant
--  | in its second argument.
--  | 
--  | The `dimap` function can be used to map functions over both arguments
--  | simultaneously.
--  |
--  | A straightforward example of a profunctor is the function arrow `(->)`.
--  |
--  | Laws:
--  | 
--  | - Identity: `dimap id id = id`
--  | - Composition: `dimap f1 g1 <<< dimap f2 g2 = dimap (f1 >>> f2) (g1 <<< g2)`
--  | A `Profunctor` is a `Functor` from the pair category `(Type^op, Type)`
--  | to `Type`.
--  |
--  | In other words, a `Profunctor` is a type constructor of two type
--  | arguments, which is contravariant in its first argument and covariant
--  | in its second argument.
--  | 
--  | The `dimap` function can be used to map functions over both arguments
--  | simultaneously.
--  |
--  | A straightforward example of a profunctor is the function arrow `(->)`.
--  |
--  | Laws:
--  | 
--  | - Identity: `dimap id id = id`
--  | - Composition: `dimap f1 g1 <<< dimap f2 g2 = dimap (f1 >>> f2) (g1 <<< g2)`
--  | Map a function over the (contravariant) first type argument only.
--  | Map a function over the (covariant) second type argument only.
--  | Lift a pure function into any `Profunctor` which is also a `Category`.
class Profunctor p where
  dimap :: forall a b c d. (a -> b) -> (c -> d) -> p b c -> p a d
foreign import arr :: forall a b p. (Prelude.Category p, Data.Profunctor.Profunctor p) => (a -> b) -> p a b
foreign import rmap :: forall a b c p. (Data.Profunctor.Profunctor p) => (b -> c) -> p a b -> p a c
foreign import lmap :: forall a b c p. (Data.Profunctor.Profunctor p) => (a -> b) -> p b c -> p a c
foreign import instance profunctorArr :: Data.Profunctor.Profunctor Prim.Function
