// Generated by psc-make version 0.6.8

/**
 *  | This module defines well-typed wrappers for common DOM events, so that
 *  | they may be safely embedded in HTML documents.
 */
"use strict";
var Prelude = require("Prelude");
var Halogen_HTML_Attributes = require("Halogen.HTML.Attributes");
var Data_Maybe = require("Data.Maybe");
var Halogen_HTML_Events_Handler = require("Halogen.HTML.Events.Handler");
var Halogen_HTML_Events_Types = require("Halogen.HTML.Events.Types");
var onUnload = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("unload"));
var onSubmit = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("submit"));
var onSelect = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("select"));
var onSearch = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("search"));
var onScroll = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("scroll"));
var onResize = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("resize"));
var onReset = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("reset"));
var onPageShow = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("pageshow"));
var onPageHide = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("pagehide"));
var onMouseUp = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("mouseup"));
var onMouseOver = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("mouseover"));
var onMouseOut = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("mouseout"));
var onMouseMove = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("mousemove"));
var onMouseLeave = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("mouseleave"));
var onMouseEnter = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("mouseenter"));
var onMouseDown = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("mousedown"));
var onLoad = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("load"));
var onKeyUp = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("keyup"));
var onKeyPress = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("keypress"));
var onKeyDown = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("keydown"));
var onInvalid = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("invalid"));
var onHashChange = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("hashchange"));
var onFocusOut = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("focusout"));
var onFocusIn = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("focusin"));
var onFocus = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("focus"));
var onError = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("error"));
var onDoubleClick = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("dblclick"));
var onContextMenu = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("contextmenu"));
var onClick = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("click"));
var onChange = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("change"));
var onBlur = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("blur"));
var onBeforeUnload = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("beforeunload"));
var onAbort = Halogen_HTML_Attributes.handler(Halogen_HTML_Attributes.eventName("abort"));

/**
 *  | A helper function for simple event handlers that provide an input to the signal function,
 *  | where there is no need to make use of the event value to generate the input.
 *  |
 *  | ```purescript
 *  | onclick (input_ Input)
 *  | ```
 */
var input_ = function (__dict_Applicative_0) {
    return function (_949) {
        return function (_950) {
            return Prelude.pure(Halogen_HTML_Events_Handler.applicativeEventHandler)(Prelude.pure(__dict_Applicative_0)(_949));
        };
    };
};

/**
 *  | A helper function which can be used to create simple event handlers.
 *  |
 *  | Often we don't need to use `EventHandler` or the monad underlying our component, and just need
 *  | to generate an input to the signal function.
 *  |
 *  | This function provides an alternative to making two nested calls to `pure`:
 *  |
 *  | ```purescript
 *  | onClick (input \_ -> Input)
 *  | ```
 */
var input = function (__dict_Applicative_1) {
    return function (f) {
        return function (e) {
            return Prelude.pure(Halogen_HTML_Events_Handler.applicativeEventHandler)(Prelude.pure(__dict_Applicative_1)(f(e)));
        };
    };
};
module.exports = {
    onFocusOut: onFocusOut, 
    onFocusIn: onFocusIn, 
    onFocus: onFocus, 
    onBlur: onBlur, 
    onKeyUp: onKeyUp, 
    onKeyPress: onKeyPress, 
    onKeyDown: onKeyDown, 
    onMouseUp: onMouseUp, 
    onMouseOut: onMouseOut, 
    onMouseOver: onMouseOver, 
    onMouseMove: onMouseMove, 
    onMouseLeave: onMouseLeave, 
    onMouseEnter: onMouseEnter, 
    onMouseDown: onMouseDown, 
    onDoubleClick: onDoubleClick, 
    onContextMenu: onContextMenu, 
    onClick: onClick, 
    onSubmit: onSubmit, 
    onSelect: onSelect, 
    onSearch: onSearch, 
    onReset: onReset, 
    onInvalid: onInvalid, 
    onChange: onChange, 
    onUnload: onUnload, 
    onScroll: onScroll, 
    onResize: onResize, 
    onPageHide: onPageHide, 
    onPageShow: onPageShow, 
    onLoad: onLoad, 
    onHashChange: onHashChange, 
    onError: onError, 
    onBeforeUnload: onBeforeUnload, 
    onAbort: onAbort, 
    input_: input_, 
    input: input
};
