// Generated by psc-make version 0.6.8

/**
 *  | Wraps Javascript's `RegExp` object that enables matching strings with
 *  | patternes defined by regular expressions.
 *  | For details of the underlying implementation, see [RegExp Reference at MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).
 */
"use strict";
var Prelude = require("Prelude");
var Data_String = require("Data.String");
var Data_Function = require("Data.Function");
var Data_Maybe = require("Data.Maybe");

  function showRegex$prime(r) {
    return '' + r;
  }
  ;

  function regex$prime(s1) {
    return function(s2) {
      return new RegExp(s1, s2);
    };
  }
  ;

  function source(r) {
    return r.source;
  }
  ;

  function flags(r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  }
  ;

  function test(r) {
    return function(s) {
      return r.test(s);
    };
  }
  ;

  function _match(r, s, Just, Nothing) {
    var m = s.match(r);
    return m == null ? Nothing : Just(m);
  }
  ;

  function replace(r) {
    return function(s1) {
      return function(s2) {
        return s2.replace(r, s1);
      };
    };
  }
  ;

  function replace$prime(r) {
    return function(f) {
      return function(s2) {
        return s2.replace(r, function(match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  }
  ;

  function search(r) {
    return function(s) {
      return s.search(r);
    };
  }
  ;

  function split(r) {
    return function(s) {
      return s.split(r);
    };
  }
  ;
var showRegex = new Prelude.Show(showRegex$prime);

/**
 *  | Returns the string representation of the given `RegexFlags`.
 */
var renderFlags = function (flags) {
    return (function () {
        if (flags.global) {
            return "g";
        };
        if (!flags.global) {
            return "";
        };
        throw new Error("Failed pattern match");
    })() + ((function () {
        if (flags.ignoreCase) {
            return "i";
        };
        if (!flags.ignoreCase) {
            return "";
        };
        throw new Error("Failed pattern match");
    })() + ((function () {
        if (flags.multiline) {
            return "m";
        };
        if (!flags.multiline) {
            return "";
        };
        throw new Error("Failed pattern match");
    })() + ((function () {
        if (flags.sticky) {
            return "y";
        };
        if (!flags.sticky) {
            return "";
        };
        throw new Error("Failed pattern match");
    })() + (function () {
        if (flags.unicode) {
            return "u";
        };
        if (!flags.unicode) {
            return "";
        };
        throw new Error("Failed pattern match");
    })())));
};

/**
 *  | Constructs a `Regex` from a pattern string and flags.
 */
var regex = function (source) {
    return function (flags) {
        return regex$prime(source)(renderFlags(flags));
    };
};

/**
 *  | Parses the string representation of `RegexFlags`.
 */
var parseFlags = function (s) {
    return {
        global: Data_String.indexOf("g")(s) >= 0, 
        ignoreCase: Data_String.indexOf("i")(s) >= 0, 
        multiline: Data_String.indexOf("m")(s) >= 0, 
        sticky: Data_String.indexOf("y")(s) >= 0, 
        unicode: Data_String.indexOf("u")(s) >= 0
    };
};

/**
 *  | All flags set to false.
 */
var noFlags = {
    global: false, 
    ignoreCase: false, 
    multiline: false, 
    sticky: false, 
    unicode: false
};

/**
 *  | Matches the string against the `Regex` and returns an array of matches
 *  | if there were any.
 *  | See [reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match).
 */
var match = function (r) {
    return function (s) {
        return _match(r, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
};
module.exports = {
    noFlags: noFlags, 
    split: split, 
    search: search, 
    "replace'": replace$prime, 
    replace: replace, 
    match: match, 
    test: test, 
    parseFlags: parseFlags, 
    renderFlags: renderFlags, 
    flags: flags, 
    source: source, 
    regex: regex, 
    showRegex: showRegex
};
