-- Generated by psc-make version 0.6.8
module Data.Equivalence where
import Prelude ()
import Prim ()
import Prelude ()
import Data.Comparison ()
import Data.Function ()
import Data.Functor.Contravariant ()
import Data.Monoid ()
--  | An adaptor allowing `>$<` to map over the inputs of an equivalence
--  | relation.
--  | The default equivalence relation for any values with an `Eq` instance.
--  | An equivalence relation for any `Comparison`.
newtype Equivalence (a :: *) = Equivalence (a -> a -> Prim.Boolean)
foreign import comparisonEquivalence :: forall a. Data.Comparison.Comparison a -> Data.Equivalence.Equivalence a
foreign import defaultEquivalence :: forall a. (Prelude.Eq a) => Data.Equivalence.Equivalence a
foreign import runEquivalence :: forall a. Data.Equivalence.Equivalence a -> a -> a -> Prim.Boolean
foreign import instance contravariantEquivalence :: Data.Functor.Contravariant.Contravariant Data.Equivalence.Equivalence
foreign import instance semigroupEquivalence :: Prelude.Semigroup (Data.Equivalence.Equivalence a)
foreign import instance monoidEquivalence :: Data.Monoid.Monoid (Data.Equivalence.Equivalence a)
