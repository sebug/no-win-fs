// Generated by psc-make version 0.6.8
"use strict";
var Prelude = require("Prelude");
var Data_Comparison = require("Data.Comparison");
var Data_Function = require("Data.Function");
var Data_Functor_Contravariant = require("Data.Functor.Contravariant");
var Data_Monoid = require("Data.Monoid");

/**
 *  | An adaptor allowing `>$<` to map over the inputs of an equivalence
 *  | relation.
 */
var Equivalence = function (x) {
    return x;
};
var semigroupEquivalence = new Prelude.Semigroup(function (_208) {
    return function (_209) {
        return function (a) {
            return function (b) {
                return _208(a)(b) && _209(a)(b);
            };
        };
    };
});
var runEquivalence = function (_204) {
    return _204;
};
var monoidEquivalence = new Data_Monoid.Monoid(function () {
    return semigroupEquivalence;
}, function (_203) {
    return function (_202) {
        return true;
    };
});

/**
 *  | The default equivalence relation for any values with an `Eq` instance.
 */
var defaultEquivalence = function (__dict_Eq_0) {
    return Prelude["=="](__dict_Eq_0);
};
var contravariantEquivalence = new Data_Functor_Contravariant.Contravariant(function (_206) {
    return function (_207) {
        return Data_Function.on(_207)(_206);
    };
});

/**
 *  | An equivalence relation for any `Comparison`.
 */
var comparisonEquivalence = function (_205) {
    return function (a) {
        return function (b) {
            return Prelude["=="](Prelude.eqOrdering)(_205(a)(b))(Prelude.EQ.value);
        };
    };
};
module.exports = {
    Equivalence: Equivalence, 
    comparisonEquivalence: comparisonEquivalence, 
    defaultEquivalence: defaultEquivalence, 
    runEquivalence: runEquivalence, 
    contravariantEquivalence: contravariantEquivalence, 
    semigroupEquivalence: semigroupEquivalence, 
    monoidEquivalence: monoidEquivalence
};
