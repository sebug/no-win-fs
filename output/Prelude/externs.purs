-- Generated by psc-make version 0.6.8
module Prelude where
import Prelude ()
import Prim ()
--  | Addition and multiplication, satisfying the following laws:
--  |
--  | - `a` is a commutative monoid under addition
--  | - `a` is a monoid under multiplication
--  | - multiplication distributes over addition
--  | - multiplication by `zero` annihilates `a`
--  |
--  | A `Semigroupoid` is similar to a [`Category`](#category) but does not require an identity
--  | element `id`, just composable morphisms.
--  |
--  | `Semigroupoid`s should obey the following rule:
--  |
--  | - Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`
--  |
--  | Addition, multiplication, and subtraction.
--  |
--  | Has the same laws as `Semiring` but additionally satisfying:
--  |
--  | - `a` is an abelian group under addition
--  |
--  | Addition, multiplication, modulo operation and division, satisfying:
--  |
--  | - ```a / b * b + (a `mod` b) = a```
--  |
--  | A `Functor` is intuitively a type which can be mapped over, and more formally a mapping
--  | between [`Category`](#category)s that preserves structure.
--  |
--  | `Functor`s should obey the following rules.
--  |
--  | - Identity: `(<$>) id = id`
--  | - Composition: `(<$>) (f <<< g) = (<$> f) <<< (<$> g)`
--  |
--  | Class for types that have an equality comparison.
--  | Class for types that have ordered comparisons.
--  |
--  | Represents a partially ordered set satisfying the following laws:
--  |
--  | - Reflexivity: `a <= a`
--  | - Antisymmetry: if `a <= b` and `b <= a` then `a = b`
--  | - Transitivity: if `a <= b` and `b <= c` then `a <= c`
--  |
--  | Ring where every nonzero element has a multiplicative inverse so that:
--  |
--  | - ```a `mod` b = zero```
--  |
--  | A commutative field
--  | `Category`s consist of objects and composable morphisms between them, and as such are
--  | [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids` must have an identity element.
--  |
--  | `Category`s should obey the following rules.
--  |
--  | - Left Identity: `id <<< p = p`
--  | - Right Identity: `p <<< id = p`
--  |
--  | `Apply`s are intuitively [`Applicative`](#applicative)s less `pure`, and more formally a
--  | strong lax semi-monoidal endofunctor.
--  |
--  | `Apply`s should obey the following rule.
--  |
--  | - Associative Composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`
--  |
--  | A `Bind` is an [`Apply`](#apply) with a bind operation which sequentially composes actions.
--  |
--  | `Bind`s should obey the following rule.
--  |
--  | - Associativity: `forall f g x. (x >>= f) >>= g = x >>= (\k => f k >>= g)`
--  |
--  | `Applicative`s are [`Functor`](#functor)s which can be "applied" by sequencing composition
--  | (`<*>`) or embedding pure expressions (`pure`).
--  |
--  | `Applicative`s should obey the following rules.
--  |
--  | - Identity: `(pure id) <*> v = v`
--  | - Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`
--  | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`
--  | - Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`
--  |
--  | `Monad` is a class which can be intuitively thought of as an abstract datatype of actions or
--  | more formally though of as a monoid in the category of endofunctors.
--  |
--  | `Monad`s should obey the following rules.
--  |
--  | - Left Identity: `pure x >>= f = f x`
--  | - Right Identity: `x >>= pure = x`
--  |
--  | A `Semigroupoid` is similar to a [`Category`](#category) but does not require an identity
--  | element `id`, just composable morphisms.
--  |
--  | `Semigroupoid`s should obey the following rule:
--  |
--  | - Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`
--  |
--  | `Category`s consist of objects and composable morphisms between them, and as such are
--  | [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids` must have an identity element.
--  |
--  | `Category`s should obey the following rules.
--  |
--  | - Left Identity: `id <<< p = p`
--  | - Right Identity: `p <<< id = p`
--  |
--  | A `Functor` is intuitively a type which can be mapped over, and more formally a mapping
--  | between [`Category`](#category)s that preserves structure.
--  |
--  | `Functor`s should obey the following rules.
--  |
--  | - Identity: `(<$>) id = id`
--  | - Composition: `(<$>) (f <<< g) = (<$> f) <<< (<$> g)`
--  |
--  | `Apply`s are intuitively [`Applicative`](#applicative)s less `pure`, and more formally a
--  | strong lax semi-monoidal endofunctor.
--  |
--  | `Apply`s should obey the following rule.
--  |
--  | - Associative Composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`
--  |
--  | `Applicative`s are [`Functor`](#functor)s which can be "applied" by sequencing composition
--  | (`<*>`) or embedding pure expressions (`pure`).
--  |
--  | `Applicative`s should obey the following rules.
--  |
--  | - Identity: `(pure id) <*> v = v`
--  | - Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`
--  | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`
--  | - Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`
--  |
--  | A `Bind` is an [`Apply`](#apply) with a bind operation which sequentially composes actions.
--  |
--  | `Bind`s should obey the following rule.
--  |
--  | - Associativity: `forall f g x. (x >>= f) >>= g = x >>= (\k => f k >>= g)`
--  |
--  | `Monad` is a class which can be intuitively thought of as an abstract datatype of actions or
--  | more formally though of as a monoid in the category of endofunctors.
--  |
--  | `Monad`s should obey the following rules.
--  |
--  | - Left Identity: `pure x >>= f = f x`
--  | - Right Identity: `x >>= pure = x`
--  |
--  | Addition and multiplication, satisfying the following laws:
--  |
--  | - `a` is a commutative monoid under addition
--  | - `a` is a monoid under multiplication
--  | - multiplication distributes over addition
--  | - multiplication by `zero` annihilates `a`
--  |
--  | Addition, multiplication, modulo operation and division, satisfying:
--  |
--  | - ```a / b * b + (a `mod` b) = a```
--  |
--  | Addition, multiplication, and subtraction.
--  |
--  | Has the same laws as `Semiring` but additionally satisfying:
--  |
--  | - `a` is an abelian group under addition
--  |
--  | Ring where every nonzero element has a multiplicative inverse so that:
--  |
--  | - ```a `mod` b = zero```
--  |
--  | A commutative field
--  | Class for types that have an equality comparison.
--  | Class for types that have ordered comparisons.
--  |
--  | Represents a partially ordered set satisfying the following laws:
--  |
--  | - Reflexivity: `a <= a`
--  | - Antisymmetry: if `a <= b` and `b <= a` then `a = b`
--  | - Transitivity: if `a <= b` and `b <= c` then `a <= c`
--  |
infixr 9 >>>
infixr 9 <<<
infixr 0 $
infixl 0 #
infixr 6 :
infixl 4 <$>
infixl 1 <#>
infixl 4 <*>
infixl 1 >>=
infixl 7 *
infixl 7 /
infixl 7 %
infixl 6 -
infixl 6 +
infix 4 ==
infix 4 /=
infixl 4 <
infixl 4 >
infixl 4 <=
infixl 4 >=
infixl 10 .&.
infixl 10 .|.
infixl 10 .^.
infixr 2 ||
infixr 3 &&
infixr 5 <>
infixr 5 ++
--  | A `Bind` is an [`Apply`](#apply) with a bind operation which sequentially composes actions.
--  |
--  | `Bind`s should obey the following rule.
--  |
--  | - Associativity: `forall f g x. (x >>= f) >>= g = x >>= (\k => f k >>= g)`
--  |
--  | Class for types that have an equality comparison.
--  | A `Semigroupoid` is similar to a [`Category`](#category) but does not require an identity
--  | element `id`, just composable morphisms.
--  |
--  | `Semigroupoid`s should obey the following rule:
--  |
--  | - Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`
--  |
--  | `Apply`s are intuitively [`Applicative`](#applicative)s less `pure`, and more formally a
--  | strong lax semi-monoidal endofunctor.
--  |
--  | `Apply`s should obey the following rule.
--  |
--  | - Associative Composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`
--  |
--  | A `Functor` is intuitively a type which can be mapped over, and more formally a mapping
--  | between [`Category`](#category)s that preserves structure.
--  |
--  | `Functor`s should obey the following rules.
--  |
--  | - Identity: `(<$>) id = id`
--  | - Composition: `(<$>) (f <<< g) = (<$> f) <<< (<$> g)`
--  |
--  | Attaches an element to the front of a list.
--  |
--  | ```purescript
--  | 1 : [2, 3, 4] = [1, 2, 3, 4]
--  | ```
--  |
--  | Class for types that have an equality comparison.
--  | Addition, multiplication, modulo operation and division, satisfying:
--  |
--  | - ```a / b * b + (a `mod` b) = a```
--  |
--  | Addition, multiplication, and subtraction.
--  |
--  | Has the same laws as `Semiring` but additionally satisfying:
--  |
--  | - `a` is an abelian group under addition
--  |
--  | Addition and multiplication, satisfying the following laws:
--  |
--  | - `a` is a commutative monoid under addition
--  | - `a` is a monoid under multiplication
--  | - multiplication distributes over addition
--  | - multiplication by `zero` annihilates `a`
--  |
--  | Addition and multiplication, satisfying the following laws:
--  |
--  | - `a` is a commutative monoid under addition
--  | - `a` is a monoid under multiplication
--  | - multiplication distributes over addition
--  | - multiplication by `zero` annihilates `a`
--  |
--  | Applies a function to its argument
--  |
--  | ```purescript
--  | length $ groupBy productCategory $ filter isInStock products
--  | ```
--  |
--  | is equivalent to
--  |
--  | ```purescript
--  | length (groupBy productCategory (filter isInStock (products)))
--  | ```
--  |
--  | `($)` is different from [`(#)`](#-2) because it is right-infix instead of left, so
--  | `a $ b $ c $ d x` = `a (b (c (d x)))`
--  |
--  | Applies a function to its argument
--  |
--  | ```purescript
--  | products # groupBy productCategory # filter isInStock # length
--  | ```
--  |
--  | is equivalent to
--  |
--  | ```purescript
--  | length (groupBy productCategory (filter isInStock (products)))
--  | ```
--  |
--  | `(#)` is different from [`($)`](#-1) because it is left-infix instead of right, so
--  | `x # a # b # c # d` = `(((x a) b) c) d`
--  |
--  | Addition and multiplication, satisfying the following laws:
--  |
--  | - `a` is a commutative monoid under addition
--  | - `a` is a monoid under multiplication
--  | - multiplication distributes over addition
--  | - multiplication by `zero` annihilates `a`
--  |
--  | `Applicative`s are [`Functor`](#functor)s which can be "applied" by sequencing composition
--  | (`<*>`) or embedding pure expressions (`pure`).
--  |
--  | `Applicative`s should obey the following rules.
--  |
--  | - Identity: `(pure id) <*> v = v`
--  | - Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`
--  | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`
--  | - Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`
--  |
--  | An alias for `true`, which can be useful in guard clauses:
--  |
--  | ```purescript
--  | max x y | x >= y = x
--  |         | otherwise = y
--  | ```
--  |
--  | Addition and multiplication, satisfying the following laws:
--  |
--  | - `a` is a commutative monoid under addition
--  | - `a` is a monoid under multiplication
--  | - multiplication distributes over addition
--  | - multiplication by `zero` annihilates `a`
--  |
--  | Addition, multiplication, modulo operation and division, satisfying:
--  |
--  | - ```a / b * b + (a `mod` b) = a```
--  |
--  | `Category`s consist of objects and composable morphisms between them, and as such are
--  | [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids` must have an identity element.
--  |
--  | `Category`s should obey the following rules.
--  |
--  | - Left Identity: `id <<< p = p`
--  | - Right Identity: `p <<< id = p`
--  |
--  | Flips the order of the arguments to a function of two arguments.
--  |
--  | ```purescript
--  | flip const 1 2 = const 2 1 = 2
--  | ```
--  |
--  | Returns its first argument and ignores its second.
--  |
--  | ```purescript
--  | const 1 "hello" = 1
--  | ```
--  |
--  | Class for types that have ordered comparisons.
--  |
--  | Represents a partially ordered set satisfying the following laws:
--  |
--  | - Reflexivity: `a <= a`
--  | - Antisymmetry: if `a <= b` and `b <= a` then `a = b`
--  | - Transitivity: if `a <= b` and `b <= c` then `a <= c`
--  |
--  | This function returns its first argument, and can be used to assert type equalities.
--  | This can be useful when types are otherwise ambiguous.
--  |
--  | ```purescript
--  | main = print $ [] `asTypeOf` [0]
--  | ```
--  |
--  | If instead, we had written `main = print []`, the type of the argument `[]` would have
--  | been ambiguous, resulting in a compile-time error.
newtype Unit = Unit {  }
data Ordering = LT  | GT  | EQ 
class Semigroup a where
  (<>) :: a -> a -> a
class BoolLike b where
  (&&) :: b -> b -> b
  (||) :: b -> b -> b
  not :: b -> b
class Bits b where
  (.&.) :: b -> b -> b
  (.|.) :: b -> b -> b
  (.^.) :: b -> b -> b
  shl :: b -> Prim.Number -> b
  shr :: b -> Prim.Number -> b
  zshr :: b -> Prim.Number -> b
  complement :: b -> b
class (Prelude.Eq a) <= Ord a where
  compare :: a -> a -> Prelude.Ordering
class Eq a where
  (==) :: a -> a -> Prim.Boolean
  (/=) :: a -> a -> Prim.Boolean
class (Prelude.DivisionRing a) <= Num a where
class (Prelude.Ring a, Prelude.ModuloSemiring a) <= DivisionRing a where
class (Prelude.Semiring a) <= Ring a where
  (-) :: a -> a -> a
class (Prelude.Semiring a) <= ModuloSemiring a where
  (/) :: a -> a -> a
  mod :: a -> a -> a
class Semiring a where
  (+) :: a -> a -> a
  zero :: a
  (*) :: a -> a -> a
  one :: a
class (Prelude.Applicative m, Prelude.Bind m) <= Monad m where
class (Prelude.Apply m) <= Bind m where
  (>>=) :: forall a b. m a -> (a -> m b) -> m b
class (Prelude.Apply f) <= Applicative f where
  pure :: forall a. a -> f a
class (Prelude.Functor f) <= Apply f where
  (<*>) :: forall a b. f (a -> b) -> f a -> f b
class Functor f where
  (<$>) :: forall a b. (a -> b) -> f a -> f b
class Show a where
  show :: a -> Prim.String
class (Prelude.Semigroupoid a) <= Category a where
  id :: forall t. a t t
class Semigroupoid a where
  (<<<) :: forall b c d. a c d -> a b c -> a b d
foreign import unit :: Prelude.Unit
foreign import (++) :: forall s. (Prelude.Semigroup s) => s -> s -> s
foreign import (>=) :: forall a. (Prelude.Ord a) => a -> a -> Prim.Boolean
foreign import (<=) :: forall a. (Prelude.Ord a) => a -> a -> Prim.Boolean
foreign import (>) :: forall a. (Prelude.Ord a) => a -> a -> Prim.Boolean
foreign import (<) :: forall a. (Prelude.Ord a) => a -> a -> Prim.Boolean
foreign import refIneq :: forall a. a -> a -> Prim.Boolean
foreign import refEq :: forall a. a -> a -> Prim.Boolean
foreign import negate :: forall a. (Prelude.Ring a) => a -> a
foreign import (%) :: Prim.Number -> Prim.Number -> Prim.Number
foreign import ap :: forall m a b. (Prelude.Monad m) => m (a -> b) -> m a -> m b
foreign import liftM1 :: forall m a b. (Prelude.Monad m) => (a -> b) -> m a -> m b
foreign import return :: forall m a. (Prelude.Monad m) => a -> m a
foreign import liftA1 :: forall f a b. (Prelude.Applicative f) => (a -> b) -> f a -> f b
foreign import void :: forall f a. (Prelude.Functor f) => f a -> f Prelude.Unit
foreign import (<#>) :: forall f a b. (Prelude.Functor f) => f a -> (a -> b) -> f b
foreign import cons :: forall a. a -> [a] -> [a]
foreign import (:) :: forall a. a -> [a] -> [a]
foreign import (#) :: forall a b. a -> (a -> b) -> b
foreign import ($) :: forall a b. (a -> b) -> a -> b
foreign import (>>>) :: forall a b c d. (Prelude.Semigroupoid a) => a b c -> a c d -> a b d
foreign import asTypeOf :: forall a. a -> a -> a
foreign import const :: forall a b. a -> b -> a
foreign import flip :: forall a b c. (a -> b -> c) -> b -> a -> c
foreign import otherwise :: Prim.Boolean
foreign import instance semigroupoidArr :: Prelude.Semigroupoid Prim.Function
foreign import instance categoryArr :: Prelude.Category Prim.Function
foreign import instance showUnit :: Prelude.Show Prelude.Unit
foreign import instance showString :: Prelude.Show Prim.String
foreign import instance showBoolean :: Prelude.Show Prim.Boolean
foreign import instance showNumber :: Prelude.Show Prim.Number
foreign import instance showArray :: (Prelude.Show a) => Prelude.Show [a]
foreign import instance functorArr :: Prelude.Functor (Prim.Function r)
foreign import instance applyArr :: Prelude.Apply (Prim.Function r)
foreign import instance applicativeArr :: Prelude.Applicative (Prim.Function r)
foreign import instance bindArr :: Prelude.Bind (Prim.Function r)
foreign import instance monadArr :: Prelude.Monad (Prim.Function r)
foreign import instance semiringNumber :: Prelude.Semiring Prim.Number
foreign import instance ringNumber :: Prelude.Ring Prim.Number
foreign import instance moduloSemiringNumber :: Prelude.ModuloSemiring Prim.Number
foreign import instance divisionRingNumber :: Prelude.DivisionRing Prim.Number
foreign import instance numNumber :: Prelude.Num Prim.Number
foreign import instance eqUnit :: Prelude.Eq Prelude.Unit
foreign import instance eqString :: Prelude.Eq Prim.String
foreign import instance eqNumber :: Prelude.Eq Prim.Number
foreign import instance eqBoolean :: Prelude.Eq Prim.Boolean
foreign import instance eqArray :: (Prelude.Eq a) => Prelude.Eq [a]
foreign import instance eqOrdering :: Prelude.Eq Prelude.Ordering
foreign import instance showOrdering :: Prelude.Show Prelude.Ordering
foreign import instance semigroupOrdering :: Prelude.Semigroup Prelude.Ordering
foreign import instance ordUnit :: Prelude.Ord Prelude.Unit
foreign import instance ordBoolean :: Prelude.Ord Prim.Boolean
foreign import instance ordNumber :: Prelude.Ord Prim.Number
foreign import instance ordString :: Prelude.Ord Prim.String
foreign import instance ordArray :: (Prelude.Ord a) => Prelude.Ord [a]
foreign import instance bitsNumber :: Prelude.Bits Prim.Number
foreign import instance boolLikeBoolean :: Prelude.BoolLike Prim.Boolean
foreign import instance semigroupUnit :: Prelude.Semigroup Prelude.Unit
foreign import instance semigroupString :: Prelude.Semigroup Prim.String
foreign import instance semigroupArr :: (Prelude.Semigroup s') => Prelude.Semigroup (s -> s')
