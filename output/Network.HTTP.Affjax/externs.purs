-- Generated by psc-make version 0.6.8
module Network.HTTP.Affjax where
import Prelude ()
import Control.Monad.Aff ()
import Network.HTTP.Affjax ()
import Network.HTTP.Method ()
import Network.HTTP.RequestHeader ()
import Data.Nullable ()
import Network.HTTP.Affjax.Request ()
import Network.HTTP.Affjax.Response ()
import Control.Monad.Eff.Exception ()
import Data.Function ()
import Network.HTTP.ResponseHeader ()
import Prim ()
import Prelude ()
import Control.Monad.Aff ()
import Control.Monad.Eff ()
import Control.Monad.Eff.Exception ()
import Data.Either ()
import Data.Foreign ()
import Data.Function ()
import Data.Maybe ()
import Data.Nullable ()
import DOM.XHR ()
import Network.HTTP.Affjax.Request ()
import Network.HTTP.Affjax.Response ()
import Network.HTTP.Method ()
import Network.HTTP.RequestHeader ()
import Network.HTTP.ResponseHeader ()
import Network.HTTP.StatusCode ()
--  | The effect type for AJAX requests made with Affjax.
--  | Type alias for URL strings to aid readability of types.
--  | The type of records that will be received as an Affjax response.
--  | The type for Affjax requests.
--  | Run a request directly without using `Aff`.
--  | Makes an `Affjax` request.
--  | Makes a `DELETE` request to the specified URL.
--  | Makes a `DELETE` request to the specified URL and ignores the response.
--  | Makes a `GET` request to the specified URL.
--  | Makes a `POST` request to the specified URL, sending data.
--  | Makes a `POST` request to the specified URL, sending data and ignoring the
--  | response.
--  | Makes a `POST` request to the specified URL with the option to send data.
--  | Makes a `POST` request to the specified URL with the option to send data,
--  | and ignores the response.
--  | Makes a `PUT` request to the specified URL, sending data.
--  | Makes a `PUT` request to the specified URL, sending data and ignoring the
--  | response.
--  | Makes a `PUT` request to the specified URL with the option to send data.
--  | Makes a `PUT` request to the specified URL with the option to send data,
--  | and ignores the response.
type URL = Prim.String
type AffjaxResponse (a :: *) = { response :: a, headers :: [Network.HTTP.ResponseHeader.ResponseHeader], status :: Network.HTTP.StatusCode.StatusCode }
type AffjaxRequest (a :: *) = { password :: Data.Maybe.Maybe Prim.String, username :: Data.Maybe.Maybe Prim.String, content :: Data.Maybe.Maybe a, headers :: [Network.HTTP.RequestHeader.RequestHeader], url :: Network.HTTP.Affjax.URL, method :: Network.HTTP.Method.Method }
type Affjax (e :: # !) (a :: *) = Control.Monad.Aff.Aff (ajax :: Network.HTTP.Affjax.AJAX | e) (Network.HTTP.Affjax.AffjaxResponse a)
foreign import data AJAX :: !
foreign import delete_ :: forall e. Network.HTTP.Affjax.URL -> Network.HTTP.Affjax.Affjax e Prelude.Unit
foreign import delete :: forall e a. (Network.HTTP.Affjax.Response.Respondable a) => Network.HTTP.Affjax.URL -> Network.HTTP.Affjax.Affjax e a
foreign import put_' :: forall e a. (Network.HTTP.Affjax.Request.Requestable a) => Network.HTTP.Affjax.URL -> Data.Maybe.Maybe a -> Network.HTTP.Affjax.Affjax e Prelude.Unit
foreign import put' :: forall e a b. (Network.HTTP.Affjax.Request.Requestable a, Network.HTTP.Affjax.Response.Respondable b) => Network.HTTP.Affjax.URL -> Data.Maybe.Maybe a -> Network.HTTP.Affjax.Affjax e b
foreign import put_ :: forall e a. (Network.HTTP.Affjax.Request.Requestable a) => Network.HTTP.Affjax.URL -> a -> Network.HTTP.Affjax.Affjax e Prelude.Unit
foreign import put :: forall e a b. (Network.HTTP.Affjax.Request.Requestable a, Network.HTTP.Affjax.Response.Respondable b) => Network.HTTP.Affjax.URL -> a -> Network.HTTP.Affjax.Affjax e b
foreign import post_' :: forall e a. (Network.HTTP.Affjax.Request.Requestable a) => Network.HTTP.Affjax.URL -> Data.Maybe.Maybe a -> Network.HTTP.Affjax.Affjax e Prelude.Unit
foreign import post' :: forall e a b. (Network.HTTP.Affjax.Request.Requestable a, Network.HTTP.Affjax.Response.Respondable b) => Network.HTTP.Affjax.URL -> Data.Maybe.Maybe a -> Network.HTTP.Affjax.Affjax e b
foreign import post_ :: forall e a. (Network.HTTP.Affjax.Request.Requestable a) => Network.HTTP.Affjax.URL -> a -> Network.HTTP.Affjax.Affjax e Prelude.Unit
foreign import post :: forall e a b. (Network.HTTP.Affjax.Request.Requestable a, Network.HTTP.Affjax.Response.Respondable b) => Network.HTTP.Affjax.URL -> a -> Network.HTTP.Affjax.Affjax e b
foreign import get :: forall e a. (Network.HTTP.Affjax.Response.Respondable a) => Network.HTTP.Affjax.URL -> Network.HTTP.Affjax.Affjax e a
foreign import affjax' :: forall e a b. (Network.HTTP.Affjax.Request.Requestable a, Network.HTTP.Affjax.Response.Respondable b) => Network.HTTP.Affjax.AffjaxRequest a -> (Control.Monad.Eff.Exception.Error -> Control.Monad.Eff.Eff (ajax :: Network.HTTP.Affjax.AJAX | e) Prelude.Unit) -> (Network.HTTP.Affjax.AffjaxResponse b -> Control.Monad.Eff.Eff (ajax :: Network.HTTP.Affjax.AJAX | e) Prelude.Unit) -> Control.Monad.Eff.Eff (ajax :: Network.HTTP.Affjax.AJAX | e) (Control.Monad.Aff.Canceler (ajax :: Network.HTTP.Affjax.AJAX | e))
foreign import affjax :: forall e a b. (Network.HTTP.Affjax.Request.Requestable a, Network.HTTP.Affjax.Response.Respondable b) => Network.HTTP.Affjax.AffjaxRequest a -> Network.HTTP.Affjax.Affjax e b
foreign import defaultRequest :: Network.HTTP.Affjax.AffjaxRequest Prelude.Unit
