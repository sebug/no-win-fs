-- Generated by psc-make version 0.6.8
module Data.DOM.Simple.Unsafe.Events where
import Prim ()
import Prelude ()
import DOM ()
import Control.Monad.Eff ()
import Data.DOM.Simple.Types ()
--  XXX Wallpaper over the fact that some browsers don't support
--  KeyboardEvent.key yet.  It's a hack, since it doesn't correctly
--  handle modifier keys, etc.
--  XXX really should be returning an HTMLAbstractView here...
foreign import unsafeEventView :: forall eff. Data.DOM.Simple.Types.DOMEvent -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Data.DOM.Simple.Types.HTMLWindow
foreign import unsafeEventBooleanProp :: forall eff. Prim.String -> Data.DOM.Simple.Types.DOMEvent -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prim.Boolean
foreign import unsafeEventStringProp :: forall eff. Prim.String -> Data.DOM.Simple.Types.DOMEvent -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prim.String
foreign import unsafeEventNumberProp :: forall eff. Prim.String -> Data.DOM.Simple.Types.DOMEvent -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prim.Number
foreign import unsafeEventKeyCode :: forall eff. Data.DOM.Simple.Types.DOMEvent -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prim.Number
foreign import unsafeEventKey :: forall eff. Data.DOM.Simple.Types.DOMEvent -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prim.String
foreign import unsafePreventDefault :: forall eff. Data.DOM.Simple.Types.DOMEvent -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prelude.Unit
foreign import unsafeStopPropagation :: forall eff. Data.DOM.Simple.Types.DOMEvent -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prelude.Unit
foreign import unsafeEventTarget :: forall eff a. Data.DOM.Simple.Types.DOMEvent -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) a
foreign import unsafeRemoveEventListener :: forall eff t e b. Prim.String -> (e -> Control.Monad.Eff.Eff (dom :: DOM.DOM | t) Prelude.Unit) -> b -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prelude.Unit
foreign import unsafeAddEventListener :: forall eff t e b. Prim.String -> (e -> Control.Monad.Eff.Eff (dom :: DOM.DOM | t) Prelude.Unit) -> b -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prelude.Unit
