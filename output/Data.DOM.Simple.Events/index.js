// Generated by psc-make version 0.6.8
"use strict";
var Data_DOM_Simple_Unsafe_Events = require("Data.DOM.Simple.Unsafe.Events");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad = require("Control.Monad");
var Data_DOM_Simple_Types = require("Data.DOM.Simple.Types");
var Data_DOM_Simple_Window = require("Data.DOM.Simple.Window");
var Data_DOM_Simple_Ajax = require("Data.DOM.Simple.Ajax");
var DOM = require("DOM");

/**
 *  UI Events 
 *  XXX this is slightly ham-handed, since
 *  <http://www.w3.org/TR/DOM-Level-3-Events/#interface-UIEvent>
 *  specifies that only some kinds of elements are valid targets for
 *  each of these events.  Might make to refactor more carefully based
 *  on what targets can accept what handlers.
 */
var LoadEvent = (function () {
    function LoadEvent() {

    };
    LoadEvent.value = new LoadEvent();
    return LoadEvent;
})();

/**
 *  UI Events 
 *  XXX this is slightly ham-handed, since
 *  <http://www.w3.org/TR/DOM-Level-3-Events/#interface-UIEvent>
 *  specifies that only some kinds of elements are valid targets for
 *  each of these events.  Might make to refactor more carefully based
 *  on what targets can accept what handlers.
 */
var UnloadEvent = (function () {
    function UnloadEvent() {

    };
    UnloadEvent.value = new UnloadEvent();
    return UnloadEvent;
})();

/**
 *  UI Events 
 *  XXX this is slightly ham-handed, since
 *  <http://www.w3.org/TR/DOM-Level-3-Events/#interface-UIEvent>
 *  specifies that only some kinds of elements are valid targets for
 *  each of these events.  Might make to refactor more carefully based
 *  on what targets can accept what handlers.
 */
var AbortEvent = (function () {
    function AbortEvent() {

    };
    AbortEvent.value = new AbortEvent();
    return AbortEvent;
})();

/**
 *  UI Events 
 *  XXX this is slightly ham-handed, since
 *  <http://www.w3.org/TR/DOM-Level-3-Events/#interface-UIEvent>
 *  specifies that only some kinds of elements are valid targets for
 *  each of these events.  Might make to refactor more carefully based
 *  on what targets can accept what handlers.
 */
var ErrorEvent = (function () {
    function ErrorEvent() {

    };
    ErrorEvent.value = new ErrorEvent();
    return ErrorEvent;
})();

/**
 *  UI Events 
 *  XXX this is slightly ham-handed, since
 *  <http://www.w3.org/TR/DOM-Level-3-Events/#interface-UIEvent>
 *  specifies that only some kinds of elements are valid targets for
 *  each of these events.  Might make to refactor more carefully based
 *  on what targets can accept what handlers.
 */
var SelectEvent = (function () {
    function SelectEvent() {

    };
    SelectEvent.value = new SelectEvent();
    return SelectEvent;
})();

/**
 *  UI Events 
 *  XXX this is slightly ham-handed, since
 *  <http://www.w3.org/TR/DOM-Level-3-Events/#interface-UIEvent>
 *  specifies that only some kinds of elements are valid targets for
 *  each of these events.  Might make to refactor more carefully based
 *  on what targets can accept what handlers.
 */
var ResizeEvent = (function () {
    function ResizeEvent() {

    };
    ResizeEvent.value = new ResizeEvent();
    return ResizeEvent;
})();

/**
 *  UI Events 
 *  XXX this is slightly ham-handed, since
 *  <http://www.w3.org/TR/DOM-Level-3-Events/#interface-UIEvent>
 *  specifies that only some kinds of elements are valid targets for
 *  each of these events.  Might make to refactor more carefully based
 *  on what targets can accept what handlers.
 */
var ScrollEvent = (function () {
    function ScrollEvent() {

    };
    ScrollEvent.value = new ScrollEvent();
    return ScrollEvent;
})();

/**
 *  Mouse Events 
 */
var MouseMoveEvent = (function () {
    function MouseMoveEvent() {

    };
    MouseMoveEvent.value = new MouseMoveEvent();
    return MouseMoveEvent;
})();

/**
 *  Mouse Events 
 */
var MouseOverEvent = (function () {
    function MouseOverEvent() {

    };
    MouseOverEvent.value = new MouseOverEvent();
    return MouseOverEvent;
})();

/**
 *  Mouse Events 
 */
var MouseEnterEvent = (function () {
    function MouseEnterEvent() {

    };
    MouseEnterEvent.value = new MouseEnterEvent();
    return MouseEnterEvent;
})();

/**
 *  Mouse Events 
 */
var MouseOutEvent = (function () {
    function MouseOutEvent() {

    };
    MouseOutEvent.value = new MouseOutEvent();
    return MouseOutEvent;
})();

/**
 *  Mouse Events 
 */
var MouseLeaveEvent = (function () {
    function MouseLeaveEvent() {

    };
    MouseLeaveEvent.value = new MouseLeaveEvent();
    return MouseLeaveEvent;
})();

/**
 *  Keyboard Events 
 */
var KeydownEvent = (function () {
    function KeydownEvent() {

    };
    KeydownEvent.value = new KeydownEvent();
    return KeydownEvent;
})();

/**
 *  Keyboard Events 
 */
var KeypressEvent = (function () {
    function KeypressEvent() {

    };
    KeypressEvent.value = new KeypressEvent();
    return KeypressEvent;
})();

/**
 *  Keyboard Events 
 */
var KeyupEvent = (function () {
    function KeyupEvent() {

    };
    KeyupEvent.value = new KeyupEvent();
    return KeyupEvent;
})();
var KeyLocationStandard = (function () {
    function KeyLocationStandard() {

    };
    KeyLocationStandard.value = new KeyLocationStandard();
    return KeyLocationStandard;
})();
var KeyLocationLeft = (function () {
    function KeyLocationLeft() {

    };
    KeyLocationLeft.value = new KeyLocationLeft();
    return KeyLocationLeft;
})();
var KeyLocationRight = (function () {
    function KeyLocationRight() {

    };
    KeyLocationRight.value = new KeyLocationRight();
    return KeyLocationRight;
})();
var KeyLocationNumpad = (function () {
    function KeyLocationNumpad() {

    };
    KeyLocationNumpad.value = new KeyLocationNumpad();
    return KeyLocationNumpad;
})();

/**
 *  XXX Should this be in the Prelude?
 */
var Read = function (read) {
    this.read = read;
};

/**
 *  Generic properties and methods available on all events. 
 */
var Event = function (eventTarget, preventDefault, stopPropagation) {
    this.eventTarget = eventTarget;
    this.preventDefault = preventDefault;
    this.stopPropagation = stopPropagation;
};
var MouseEvent = function (__superclass_Data$dotDOM$dotSimple$dotEvents$dotEvent_0, mouseEventType, screenX, screenY) {
    this["__superclass_Data.DOM.Simple.Events.Event_0"] = __superclass_Data$dotDOM$dotSimple$dotEvents$dotEvent_0;
    this.mouseEventType = mouseEventType;
    this.screenX = screenX;
    this.screenY = screenY;
};
var MouseEventTarget = function (addMouseEventListener, removeMouseEventListener) {
    this.addMouseEventListener = addMouseEventListener;
    this.removeMouseEventListener = removeMouseEventListener;
};
var KeyboardEvent = function (__superclass_Data$dotDOM$dotSimple$dotEvents$dotEvent_0, altKey, ctrlKey, key, keyCode, keyLocation, keyboardEventType, metaKey, shiftKey) {
    this["__superclass_Data.DOM.Simple.Events.Event_0"] = __superclass_Data$dotDOM$dotSimple$dotEvents$dotEvent_0;
    this.altKey = altKey;
    this.ctrlKey = ctrlKey;
    this.key = key;
    this.keyCode = keyCode;
    this.keyLocation = keyLocation;
    this.keyboardEventType = keyboardEventType;
    this.metaKey = metaKey;
    this.shiftKey = shiftKey;
};
var KeyboardEventTarget = function (addKeyboardEventListener, removeKeyboardEventListener) {
    this.addKeyboardEventListener = addKeyboardEventListener;
    this.removeKeyboardEventListener = removeKeyboardEventListener;
};
var UIEvent = function (__superclass_Data$dotDOM$dotSimple$dotEvents$dotEvent_0, detail, view) {
    this["__superclass_Data.DOM.Simple.Events.Event_0"] = __superclass_Data$dotDOM$dotSimple$dotEvents$dotEvent_0;
    this.detail = detail;
    this.view = view;
};
var UIEventTarget = function (addUIEventListener, removeUIEventListener) {
    this.addUIEventListener = addUIEventListener;
    this.removeUIEventListener = removeUIEventListener;
};

/**
 *  XXX this should really be returning an HTMLAbstractView...
 */
var view = function (dict) {
    return dict.view;
};
var uiEventTypeShow = new Prelude.Show(function (_516) {
    if (_516 instanceof LoadEvent) {
        return "load";
    };
    if (_516 instanceof UnloadEvent) {
        return "unload";
    };
    if (_516 instanceof AbortEvent) {
        return "abort";
    };
    if (_516 instanceof ErrorEvent) {
        return "error";
    };
    if (_516 instanceof SelectEvent) {
        return "select";
    };
    if (_516 instanceof ResizeEvent) {
        return "resize";
    };
    if (_516 instanceof ScrollEvent) {
        return "scroll";
    };
    throw new Error("Failed pattern match");
});
var uiEventTypeRead = new Read(function (_517) {
    if (_517 === "load") {
        return LoadEvent.value;
    };
    if (_517 === "unload") {
        return UnloadEvent.value;
    };
    if (_517 === "abort") {
        return AbortEvent.value;
    };
    if (_517 === "error") {
        return ErrorEvent.value;
    };
    if (_517 === "select") {
        return SelectEvent.value;
    };
    if (_517 === "resize") {
        return ResizeEvent.value;
    };
    if (_517 === "scroll") {
        return ScrollEvent.value;
    };
    throw new Error("Failed pattern match");
});
var uiEventTargetHTMLWindow = new UIEventTarget(function (__dict_UIEvent_0) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeAddEventListener(Prelude.show(uiEventTypeShow)(typ));
    };
}, function (__dict_UIEvent_1) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeRemoveEventListener(Prelude.show(uiEventTypeShow)(typ));
    };
});
var toKeyLocation = function (_511) {
    if (_511 === 0) {
        return KeyLocationStandard.value;
    };
    if (_511 === 1) {
        return KeyLocationLeft.value;
    };
    if (_511 === 2) {
        return KeyLocationRight.value;
    };
    if (_511 === 3) {
        return KeyLocationNumpad.value;
    };
    throw new Error("Failed pattern match");
};

/**
 *  Generic properties and methods available on all events. 
 */
var stopPropagation = function (dict) {
    return dict.stopPropagation;
};
var shiftKey = function (dict) {
    return dict.shiftKey;
};
var screenY = function (dict) {
    return dict.screenY;
};
var screenX = function (dict) {
    return dict.screenX;
};
var removeUIEventListener = function (dict) {
    return dict.removeUIEventListener;
};
var removeMouseEventListener = function (dict) {
    return dict.removeMouseEventListener;
};
var removeKeyboardEventListener = function (dict) {
    return dict.removeKeyboardEventListener;
};

/**
 *  XXX Should this be in the Prelude?
 */
var read = function (dict) {
    return dict.read;
};

/**
 *  Generic properties and methods available on all events. 
 */
var preventDefault = function (dict) {
    return dict.preventDefault;
};
var mouseEventTypeShow = new Prelude.Show(function (_512) {
    if (_512 instanceof MouseMoveEvent) {
        return "mousemove";
    };
    if (_512 instanceof MouseOverEvent) {
        return "mouseover";
    };
    if (_512 instanceof MouseEnterEvent) {
        return "mouseenter";
    };
    if (_512 instanceof MouseOutEvent) {
        return "mouseout";
    };
    if (_512 instanceof MouseLeaveEvent) {
        return "mouseleave";
    };
    throw new Error("Failed pattern match");
});
var mouseEventTypeRead = new Read(function (_513) {
    if (_513 === "mousemove") {
        return MouseMoveEvent.value;
    };
    if (_513 === "mouseover") {
        return MouseOverEvent.value;
    };
    if (_513 === "mouseenter") {
        return MouseEnterEvent.value;
    };
    if (_513 === "mouseout") {
        return MouseOutEvent.value;
    };
    if (_513 === "mouseleave") {
        return MouseLeaveEvent.value;
    };
    throw new Error("Failed pattern match");
});
var mouseEventType = function (dict) {
    return dict.mouseEventType;
};
var mouseEventTargetHTMLWindow = new MouseEventTarget(function (__dict_MouseEvent_2) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeAddEventListener(Prelude.show(mouseEventTypeShow)(typ));
    };
}, function (__dict_MouseEvent_3) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeRemoveEventListener(Prelude.show(mouseEventTypeShow)(typ));
    };
});
var mouseEventTargetHTMLElement = new MouseEventTarget(function (__dict_MouseEvent_4) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeAddEventListener(Prelude.show(mouseEventTypeShow)(typ));
    };
}, function (__dict_MouseEvent_5) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeRemoveEventListener(Prelude.show(mouseEventTypeShow)(typ));
    };
});
var mouseEventTargetHTMLDocument = new MouseEventTarget(function (__dict_MouseEvent_6) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeAddEventListener(Prelude.show(mouseEventTypeShow)(typ));
    };
}, function (__dict_MouseEvent_7) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeRemoveEventListener(Prelude.show(mouseEventTypeShow)(typ));
    };
});
var metaKey = function (dict) {
    return dict.metaKey;
};
var keyboardEventTypeShow = new Prelude.Show(function (_514) {
    if (_514 instanceof KeydownEvent) {
        return "keydown";
    };
    if (_514 instanceof KeypressEvent) {
        return "keypress";
    };
    if (_514 instanceof KeyupEvent) {
        return "keyup";
    };
    throw new Error("Failed pattern match");
});
var keyboardEventTypeRead = new Read(function (_515) {
    if (_515 === "keydown") {
        return KeydownEvent.value;
    };
    if (_515 === "keypress") {
        return KeypressEvent.value;
    };
    if (_515 === "keyup") {
        return KeyupEvent.value;
    };
    throw new Error("Failed pattern match");
});
var keyboardEventType = function (dict) {
    return dict.keyboardEventType;
};
var keyboardEventTargetHTMLWindow = new KeyboardEventTarget(function (__dict_KeyboardEvent_8) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeAddEventListener(Prelude.show(keyboardEventTypeShow)(typ));
    };
}, function (__dict_KeyboardEvent_9) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeRemoveEventListener(Prelude.show(keyboardEventTypeShow)(typ));
    };
});
var keyboardEventTargetHTMLElement = new KeyboardEventTarget(function (__dict_KeyboardEvent_10) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeAddEventListener(Prelude.show(keyboardEventTypeShow)(typ));
    };
}, function (__dict_KeyboardEvent_11) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeRemoveEventListener(Prelude.show(keyboardEventTypeShow)(typ));
    };
});
var keyboardEventTargetHTMLDocument = new KeyboardEventTarget(function (__dict_KeyboardEvent_12) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeAddEventListener(Prelude.show(keyboardEventTypeShow)(typ));
    };
}, function (__dict_KeyboardEvent_13) {
    return function (typ) {
        return Data_DOM_Simple_Unsafe_Events.unsafeRemoveEventListener(Prelude.show(keyboardEventTypeShow)(typ));
    };
});
var keyLocation = function (dict) {
    return dict.keyLocation;
};
var keyCode = function (dict) {
    return dict.keyCode;
};
var key = function (dict) {
    return dict.key;
};

/**
 *  Generic properties and methods available on all events. 
 */
var eventTarget = function (dict) {
    return dict.eventTarget;
};
var eventDOMEvent = new Event(Data_DOM_Simple_Unsafe_Events.unsafeEventTarget, Data_DOM_Simple_Unsafe_Events.unsafePreventDefault, Data_DOM_Simple_Unsafe_Events.unsafeStopPropagation);
var keyboardEventDOMEvent = new KeyboardEvent(function () {
    return eventDOMEvent;
}, Data_DOM_Simple_Unsafe_Events.unsafeEventBooleanProp("altKey"), Data_DOM_Simple_Unsafe_Events.unsafeEventBooleanProp("ctrlKey"), Data_DOM_Simple_Unsafe_Events.unsafeEventKey, Data_DOM_Simple_Unsafe_Events.unsafeEventKeyCode, function (ev) {
    return Prelude["<$>"](Control_Monad_Eff.functorEff)(toKeyLocation)(Data_DOM_Simple_Unsafe_Events.unsafeEventNumberProp("keyLocation")(ev));
}, function (ev) {
    return Prelude["<$>"](Control_Monad_Eff.functorEff)(read(keyboardEventTypeRead))(Data_DOM_Simple_Unsafe_Events.unsafeEventStringProp("type")(ev));
}, Data_DOM_Simple_Unsafe_Events.unsafeEventBooleanProp("metaKey"), Data_DOM_Simple_Unsafe_Events.unsafeEventBooleanProp("shiftKey"));
var mouseEventDOMEvent = new MouseEvent(function () {
    return eventDOMEvent;
}, function (ev) {
    return Prelude["<$>"](Control_Monad_Eff.functorEff)(read(mouseEventTypeRead))(Data_DOM_Simple_Unsafe_Events.unsafeEventStringProp("type")(ev));
}, Data_DOM_Simple_Unsafe_Events.unsafeEventNumberProp("screenX"), Data_DOM_Simple_Unsafe_Events.unsafeEventNumberProp("screenY"));
var uiEventDOMEvent = new UIEvent(function () {
    return eventDOMEvent;
}, Data_DOM_Simple_Unsafe_Events.unsafeEventNumberProp("detail"), Data_DOM_Simple_Unsafe_Events.unsafeEventView);
var detail = function (dict) {
    return dict.detail;
};
var ctrlKey = function (dict) {
    return dict.ctrlKey;
};
var altKey = function (dict) {
    return dict.altKey;
};
var addUIEventListener = function (dict) {
    return dict.addUIEventListener;
};
var addMouseEventListener = function (dict) {
    return dict.addMouseEventListener;
};
var addKeyboardEventListener = function (dict) {
    return dict.addKeyboardEventListener;
};
module.exports = {
    LoadEvent: LoadEvent, 
    UnloadEvent: UnloadEvent, 
    AbortEvent: AbortEvent, 
    ErrorEvent: ErrorEvent, 
    SelectEvent: SelectEvent, 
    ResizeEvent: ResizeEvent, 
    ScrollEvent: ScrollEvent, 
    KeyLocationStandard: KeyLocationStandard, 
    KeyLocationLeft: KeyLocationLeft, 
    KeyLocationRight: KeyLocationRight, 
    KeyLocationNumpad: KeyLocationNumpad, 
    KeydownEvent: KeydownEvent, 
    KeypressEvent: KeypressEvent, 
    KeyupEvent: KeyupEvent, 
    MouseMoveEvent: MouseMoveEvent, 
    MouseOverEvent: MouseOverEvent, 
    MouseEnterEvent: MouseEnterEvent, 
    MouseOutEvent: MouseOutEvent, 
    MouseLeaveEvent: MouseLeaveEvent, 
    UIEventTarget: UIEventTarget, 
    UIEvent: UIEvent, 
    KeyboardEventTarget: KeyboardEventTarget, 
    KeyboardEvent: KeyboardEvent, 
    MouseEventTarget: MouseEventTarget, 
    MouseEvent: MouseEvent, 
    Event: Event, 
    Read: Read, 
    removeUIEventListener: removeUIEventListener, 
    addUIEventListener: addUIEventListener, 
    detail: detail, 
    view: view, 
    removeKeyboardEventListener: removeKeyboardEventListener, 
    addKeyboardEventListener: addKeyboardEventListener, 
    shiftKey: shiftKey, 
    metaKey: metaKey, 
    ctrlKey: ctrlKey, 
    altKey: altKey, 
    keyLocation: keyLocation, 
    keyCode: keyCode, 
    key: key, 
    keyboardEventType: keyboardEventType, 
    toKeyLocation: toKeyLocation, 
    removeMouseEventListener: removeMouseEventListener, 
    addMouseEventListener: addMouseEventListener, 
    screenY: screenY, 
    screenX: screenX, 
    mouseEventType: mouseEventType, 
    preventDefault: preventDefault, 
    stopPropagation: stopPropagation, 
    eventTarget: eventTarget, 
    read: read, 
    eventDOMEvent: eventDOMEvent, 
    mouseEventTypeShow: mouseEventTypeShow, 
    mouseEventTypeRead: mouseEventTypeRead, 
    mouseEventDOMEvent: mouseEventDOMEvent, 
    mouseEventTargetHTMLWindow: mouseEventTargetHTMLWindow, 
    mouseEventTargetHTMLDocument: mouseEventTargetHTMLDocument, 
    mouseEventTargetHTMLElement: mouseEventTargetHTMLElement, 
    keyboardEventTypeShow: keyboardEventTypeShow, 
    keyboardEventTypeRead: keyboardEventTypeRead, 
    keyboardEventDOMEvent: keyboardEventDOMEvent, 
    keyboardEventTargetHTMLWindow: keyboardEventTargetHTMLWindow, 
    keyboardEventTargetHTMLDocument: keyboardEventTargetHTMLDocument, 
    keyboardEventTargetHTMLElement: keyboardEventTargetHTMLElement, 
    uiEventTypeShow: uiEventTypeShow, 
    uiEventTypeRead: uiEventTypeRead, 
    uiEventDOMEvent: uiEventDOMEvent, 
    uiEventTargetHTMLWindow: uiEventTargetHTMLWindow
};
