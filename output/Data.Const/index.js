// Generated by psc-make version 0.6.8

/**
 *  | This module defines the `Const` type constructor.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Data_Functor_Contravariant = require("Data.Functor.Contravariant");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");

/**
 *  | The `Const` type constructor, which wraps its first type argument
 *  | and ignores its second. That is, `Const a b` is isomorphic to `a`
 *  | for any `b`.
 *  |
 *  | `Const` has some useful instances. For example, the `Applicative`
 *  | instance allows us to collect results using a `Monoid` while
 *  | ignoring return values.
 */
var Const = function (x) {
    return x;
};
var showConst = function (__dict_Show_2) {
    return new Prelude.Show(function (_552) {
        return "Const (" + (Prelude.show(__dict_Show_2)(_552) + ")");
    });
};
var semigroupoidConst = new Prelude.Semigroupoid(function (_553) {
    return function (_554) {
        return _554;
    };
});
var semigroupConst = function (__dict_Semigroup_3) {
    return new Prelude.Semigroup(function (_555) {
        return function (_556) {
            return Prelude["<>"](__dict_Semigroup_3)(_555)(_556);
        };
    });
};
var monoidConst = function (__dict_Monoid_5) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConst(__dict_Monoid_5["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(__dict_Monoid_5));
};

/**
 *  | Unwrap a value of type `Const a b`.
 */
var getConst = function (_547) {
    return _547;
};
var functorConst = new Prelude.Functor(function (_557) {
    return function (_558) {
        return _558;
    };
});
var foldableConst = new Data_Foldable.Foldable(function (__dict_Monoid_6) {
    return function (_572) {
        return function (_573) {
            return Data_Monoid.mempty(__dict_Monoid_6);
        };
    };
}, function (_569) {
    return function (_570) {
        return function (_571) {
            return _570;
        };
    };
}, function (_566) {
    return function (_567) {
        return function (_568) {
            return _567;
        };
    };
});
var traversableConst = new Data_Traversable.Traversable(function () {
    return foldableConst;
}, function () {
    return functorConst;
}, function (__dict_Applicative_1) {
    return function (_576) {
        return Prelude.pure(__dict_Applicative_1)(_576);
    };
}, function (__dict_Applicative_0) {
    return function (_574) {
        return function (_575) {
            return Prelude.pure(__dict_Applicative_0)(_575);
        };
    };
});
var eqConst = function (__dict_Eq_7) {
    return new Prelude.Eq(function (c) {
        return function (c$prime) {
            return !Prelude["=="](eqConst(__dict_Eq_7))(c)(c$prime);
        };
    }, function (_548) {
        return function (_549) {
            return Prelude["=="](__dict_Eq_7)(_548)(_549);
        };
    });
};
var ordConst = function (__dict_Ord_4) {
    return new Prelude.Ord(function () {
        return eqConst(__dict_Ord_4["__superclass_Prelude.Eq_0"]());
    }, function (_550) {
        return function (_551) {
            return Prelude.compare(__dict_Ord_4)(_550)(_551);
        };
    });
};
var contravariantConst = new Data_Functor_Contravariant.Contravariant(function (_564) {
    return function (_565) {
        return _565;
    };
});
var applyConst = function (__dict_Semigroup_9) {
    return new Prelude.Apply(function (_559) {
        return function (_560) {
            return Prelude["<>"](__dict_Semigroup_9)(_559)(_560);
        };
    }, function () {
        return functorConst;
    });
};
var bindConst = function (__dict_Semigroup_8) {
    return new Prelude.Bind(function (_561) {
        return function (_562) {
            return _561;
        };
    }, function () {
        return applyConst(__dict_Semigroup_8);
    });
};
var applicativeConst = function (__dict_Monoid_10) {
    return new Prelude.Applicative(function () {
        return applyConst(__dict_Monoid_10["__superclass_Prelude.Semigroup_0"]());
    }, function (_563) {
        return Data_Monoid.mempty(__dict_Monoid_10);
    });
};
module.exports = {
    Const: Const, 
    getConst: getConst, 
    eqConst: eqConst, 
    ordConst: ordConst, 
    showConst: showConst, 
    semigroupoidConst: semigroupoidConst, 
    semigroupConst: semigroupConst, 
    monoidConst: monoidConst, 
    functorConst: functorConst, 
    applyConst: applyConst, 
    bindConst: bindConst, 
    applicativeConst: applicativeConst, 
    contravariantConst: contravariantConst, 
    foldableConst: foldableConst, 
    traversableConst: traversableConst
};
