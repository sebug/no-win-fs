-- Generated by psc-make version 0.6.8
module Data.Const where
import Prelude ()
import Data.Monoid ()
import Prim ()
import Prelude ()
import Data.Functor.Contravariant ()
import Data.Foldable ()
import Data.Monoid ()
import Data.Traversable ()
--  | The `Const` type constructor, which wraps its first type argument
--  | and ignores its second. That is, `Const a b` is isomorphic to `a`
--  | for any `b`.
--  |
--  | `Const` has some useful instances. For example, the `Applicative`
--  | instance allows us to collect results using a `Monoid` while
--  | ignoring return values.
--  | Unwrap a value of type `Const a b`.
newtype Const (a :: *) (b :: *) = Const a
foreign import getConst :: forall a b. Data.Const.Const a b -> a
foreign import instance eqConst :: (Prelude.Eq a) => Prelude.Eq (Data.Const.Const a b)
foreign import instance ordConst :: (Prelude.Ord a) => Prelude.Ord (Data.Const.Const a b)
foreign import instance showConst :: (Prelude.Show a) => Prelude.Show (Data.Const.Const a b)
foreign import instance semigroupoidConst :: Prelude.Semigroupoid Data.Const.Const
foreign import instance semigroupConst :: (Prelude.Semigroup a) => Prelude.Semigroup (Data.Const.Const a b)
foreign import instance monoidConst :: (Data.Monoid.Monoid a) => Data.Monoid.Monoid (Data.Const.Const a b)
foreign import instance functorConst :: Prelude.Functor (Data.Const.Const a)
foreign import instance applyConst :: (Prelude.Semigroup a) => Prelude.Apply (Data.Const.Const a)
foreign import instance bindConst :: (Prelude.Semigroup a) => Prelude.Bind (Data.Const.Const a)
foreign import instance applicativeConst :: (Data.Monoid.Monoid a) => Prelude.Applicative (Data.Const.Const a)
foreign import instance contravariantConst :: Data.Functor.Contravariant.Contravariant (Data.Const.Const a)
foreign import instance foldableConst :: Data.Foldable.Foldable (Data.Const.Const a)
foreign import instance traversableConst :: Data.Traversable.Traversable (Data.Const.Const a)
