-- Generated by psc-make version 0.6.8
module Halogen.HTML.Attributes where
import Halogen.HTML.Attributes ()
import Prelude ()
import Data.Exists ()
import Data.String ()
import Data.StrMap ()
import Data.Array ()
import Prim ()
import Prelude ()
import DOM ()
import Data.Maybe ()
import Data.Tuple ()
import Data.Either ()
import Data.Foreign ()
import Data.StrMap ()
import Data.Monoid ()
import Data.Array ()
import Data.String ()
import Data.Traversable ()
import Data.Exists ()
import Control.Monad.Eff ()
import Control.Monad.ST ()
import Halogen.Internal.VirtualDOM ()
import Halogen.HTML.Events.Types ()
import Halogen.HTML.Events.Handler ()
--  | A newtype for CSS styles
--  | We need a variant of `Exists` which works for type constructors which accept a _row_ of types.
--  | A type-safe wrapper for event names.
--  |
--  | The phantom type `fields` describes the event type which we can expect to exist on events
--  | corresponding to this name.
--  | The data which represents a typed event handler, hidden inside an existential package in
--  | the `Attr` type.
--  | A wrapper for strings which are used as CSS classes
--  | A type-safe wrapper for attribute names
--  |
--  | The phantom type `value` describes the type of value which this attribute requires.
--  | This type class captures those types which can be used as attribute values.
--  |
--  | `toAttrString` is an alternative to `show`, and is needed by `attr` in the string renderer.
--  | The data which represents a typed attribute, hidden inside an existential package in
--  | the `Attr` type.
--  | A single attribute is either
--  |
--  | - An attribute
--  | - An event handler
--  | This type class captures those types which can be used as attribute values.
--  |
--  | `toAttrString` is an alternative to `show`, and is needed by `attr` in the string renderer.
--  | This type class captures those types which can be used as attribute values.
--  |
--  | `toAttrString` is an alternative to `show`, and is needed by `attr` in the string renderer.
--  Create CSS styles
--  | Unpack CSS styles
--  | Unpack an event name
--  | Unpack a class name
--  | Unpack an attribute name
--  | Attach an initializer.
--  | Create an event handler
--  | Attach a finalizer.
--  Create an event name
--  Create a class name
--  | Create an attribute name
--  | Create an attribute
--  Smart constructors
data Attr (i :: *) = Attr (Data.Exists.Exists Halogen.HTML.Attributes.AttrF) | Handler (Halogen.HTML.Attributes.ExistsR (Halogen.HTML.Attributes.HandlerF i)) | Initializer i | Finalizer i
data HandlerF (i :: *) (fields :: # *) = HandlerF (Halogen.HTML.Attributes.EventName fields) (Halogen.HTML.Events.Types.Event fields -> Halogen.HTML.Events.Handler.EventHandler i)
data AttrF (value :: *) = AttrF (Halogen.HTML.Attributes.AttributeName value -> value -> Prim.String) (Halogen.HTML.Attributes.AttributeName value) value
data ExistsR (f :: # * -> *)
data Styles
data EventName (fields :: # *)
data AttributeName (value :: *)
data ClassName
class IsAttribute a where
  toAttrString :: Halogen.HTML.Attributes.AttributeName a -> a -> Prim.String
foreign import style :: forall i. Halogen.HTML.Attributes.Styles -> Halogen.HTML.Attributes.Attr i
foreign import placeholder :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import selected :: forall i. Prim.Boolean -> Halogen.HTML.Attributes.Attr i
foreign import checked :: forall i. Prim.Boolean -> Halogen.HTML.Attributes.Attr i
foreign import enabled :: forall i. Prim.Boolean -> Halogen.HTML.Attributes.Attr i
foreign import spellcheck :: forall i. Prim.Boolean -> Halogen.HTML.Attributes.Attr i
foreign import readonly :: forall i. Prim.Boolean -> Halogen.HTML.Attributes.Attr i
foreign import required :: forall i. Prim.Boolean -> Halogen.HTML.Attributes.Attr i
foreign import disabled :: forall i. Prim.Boolean -> Halogen.HTML.Attributes.Attr i
foreign import width :: forall i. Prim.Number -> Halogen.HTML.Attributes.Attr i
foreign import value :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import type_ :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import title :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import target :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import src :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import rel :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import name :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import id_ :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import httpEquiv :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import href :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import height :: forall i. Prim.Number -> Halogen.HTML.Attributes.Attr i
foreign import for :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import content :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import rowSpan :: forall i. Prim.Number -> Halogen.HTML.Attributes.Attr i
foreign import colSpan :: forall i. Prim.Number -> Halogen.HTML.Attributes.Attr i
foreign import classes :: forall i. [Halogen.HTML.Attributes.ClassName] -> Halogen.HTML.Attributes.Attr i
foreign import class_ :: forall i. Halogen.HTML.Attributes.ClassName -> Halogen.HTML.Attributes.Attr i
foreign import charset :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import alt :: forall i. Prim.String -> Halogen.HTML.Attributes.Attr i
foreign import finalizer :: forall i. i -> Halogen.HTML.Attributes.Attr i
foreign import initializer :: forall i. i -> Halogen.HTML.Attributes.Attr i
foreign import handler :: forall fields i. Halogen.HTML.Attributes.EventName fields -> (Halogen.HTML.Events.Types.Event fields -> Halogen.HTML.Events.Handler.EventHandler i) -> Halogen.HTML.Attributes.Attr i
foreign import attr :: forall value i. (Halogen.HTML.Attributes.IsAttribute value) => Halogen.HTML.Attributes.AttributeName value -> value -> Halogen.HTML.Attributes.Attr i
foreign import runExistsR :: forall f r. (forall a. f a -> r) -> Halogen.HTML.Attributes.ExistsR f -> r
foreign import mkExistsR :: forall f a. f a -> Halogen.HTML.Attributes.ExistsR f
foreign import runStyles :: Halogen.HTML.Attributes.Styles -> Data.StrMap.StrMap Prim.String
foreign import styles :: Data.StrMap.StrMap Prim.String -> Halogen.HTML.Attributes.Styles
foreign import runEventName :: forall fields. Halogen.HTML.Attributes.EventName fields -> Prim.String
foreign import eventName :: forall fields. Prim.String -> Halogen.HTML.Attributes.EventName fields
foreign import runAttributeName :: forall value. Halogen.HTML.Attributes.AttributeName value -> Prim.String
foreign import attributeName :: forall value. Prim.String -> Halogen.HTML.Attributes.AttributeName value
foreign import runClassName :: Halogen.HTML.Attributes.ClassName -> Prim.String
foreign import className :: Prim.String -> Halogen.HTML.Attributes.ClassName
foreign import instance functorAttr :: Prelude.Functor Halogen.HTML.Attributes.Attr
foreign import instance stringIsAttribute :: Halogen.HTML.Attributes.IsAttribute Prim.String
foreign import instance numberIsAttribute :: Halogen.HTML.Attributes.IsAttribute Prim.Number
foreign import instance booleanIsAttribute :: Halogen.HTML.Attributes.IsAttribute Prim.Boolean
foreign import instance stylesIsAttribute :: Halogen.HTML.Attributes.IsAttribute Halogen.HTML.Attributes.Styles
