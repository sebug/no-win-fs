// Generated by psc-make version 0.6.8
"use strict";
var Prelude = require("Prelude");
var Network_HTTP_MimeType = require("Network.HTTP.MimeType");
var Accept = (function () {
    function Accept(value0) {
        this.value0 = value0;
    };
    Accept.create = function (value0) {
        return new Accept(value0);
    };
    return Accept;
})();
var ContentType = (function () {
    function ContentType(value0) {
        this.value0 = value0;
    };
    ContentType.create = function (value0) {
        return new ContentType(value0);
    };
    return ContentType;
})();
var RequestHeader = (function () {
    function RequestHeader(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RequestHeader.create = function (value0) {
        return function (value1) {
            return new RequestHeader(value0, value1);
        };
    };
    return RequestHeader;
})();
var showRequestHeader = new Prelude.Show(function (_16) {
    if (_16 instanceof Accept) {
        return "(Accept " + (Prelude.show(Network_HTTP_MimeType.showMimeType)(_16.value0) + ")");
    };
    if (_16 instanceof ContentType) {
        return "(ContentType " + (Prelude.show(Network_HTTP_MimeType.showMimeType)(_16.value0) + ")");
    };
    if (_16 instanceof RequestHeader) {
        return "(RequestHeader " + (Prelude.show(Prelude.showString)(_16.value0) + (" " + (Prelude.show(Prelude.showString)(_16.value1) + ")")));
    };
    throw new Error("Failed pattern match");
});
var requestHeaderValue = function (_13) {
    if (_13 instanceof Accept) {
        return Network_HTTP_MimeType.mimeTypeToString(_13.value0);
    };
    if (_13 instanceof ContentType) {
        return Network_HTTP_MimeType.mimeTypeToString(_13.value0);
    };
    if (_13 instanceof RequestHeader) {
        return _13.value1;
    };
    throw new Error("Failed pattern match");
};
var requestHeaderName = function (_12) {
    if (_12 instanceof Accept) {
        return "Accept";
    };
    if (_12 instanceof ContentType) {
        return "Content-Type";
    };
    if (_12 instanceof RequestHeader) {
        return _12.value0;
    };
    throw new Error("Failed pattern match");
};
var eqRequestHeader = new Prelude.Eq(function (x) {
    return function (y) {
        return !Prelude["=="](eqRequestHeader)(x)(y);
    };
}, function (_14) {
    return function (_15) {
        if (_14 instanceof Accept && _15 instanceof Accept) {
            return Prelude["=="](Network_HTTP_MimeType.eqMimeType)(_14.value0)(_15.value0);
        };
        if (_14 instanceof ContentType && _15 instanceof ContentType) {
            return Prelude["=="](Network_HTTP_MimeType.eqMimeType)(_14.value0)(_15.value0);
        };
        if (_14 instanceof RequestHeader && _15 instanceof RequestHeader) {
            return _14.value0 === _15.value0 && _14.value1 === _15.value1;
        };
        return false;
    };
});
module.exports = {
    Accept: Accept, 
    ContentType: ContentType, 
    RequestHeader: RequestHeader, 
    requestHeaderValue: requestHeaderValue, 
    requestHeaderName: requestHeaderName, 
    eqRequestHeader: eqRequestHeader, 
    showRequestHeader: showRequestHeader
};
