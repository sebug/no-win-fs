// Generated by psc-make version 0.6.8

/**
 *  | This module defines a type of maps as balanced 2-3 trees, based on
 *  | <http://www.cs.princeton.edu/~dpw/courses/cos326-12/ass/2-3-trees.pdf>
 */
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Tuple = require("Data.Tuple");
var Data_Traversable = require("Data.Traversable");
var Data_Array = require("Data.Array");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");

/**
 *  | `Map k v` represents maps from keys of type `k` to values of type `v`.
 */
var Leaf = (function () {
    function Leaf() {

    };
    Leaf.value = new Leaf();
    return Leaf;
})();

/**
 *  | `Map k v` represents maps from keys of type `k` to values of type `v`.
 */
var Two = (function () {
    function Two(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Two.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Two(value0, value1, value2, value3);
                };
            };
        };
    };
    return Two;
})();

/**
 *  | `Map k v` represents maps from keys of type `k` to values of type `v`.
 */
var Three = (function () {
    function Three(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
    };
    Three.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return new Three(value0, value1, value2, value3, value4, value5, value6);
                            };
                        };
                    };
                };
            };
        };
    };
    return Three;
})();
var TwoLeft = (function () {
    function TwoLeft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoLeft(value0, value1, value2);
            };
        };
    };
    return TwoLeft;
})();
var TwoRight = (function () {
    function TwoRight(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoRight(value0, value1, value2);
            };
        };
    };
    return TwoRight;
})();
var ThreeLeft = (function () {
    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeLeft;
})();
var ThreeMiddle = (function () {
    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeMiddle.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeMiddle;
})();
var ThreeRight = (function () {
    function ThreeRight(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeRight(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeRight;
})();
var KickUp = (function () {
    function KickUp(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    KickUp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new KickUp(value0, value1, value2, value3);
                };
            };
        };
    };
    return KickUp;
})();

/**
 *  | Get an array of the values contained in a map
 */
var values = function (_761) {
    if (_761 instanceof Leaf) {
        return [  ];
    };
    if (_761 instanceof Two) {
        return Prelude["++"](Data_Array.semigroupArray)(values(_761.value0))(Prelude["++"](Data_Array.semigroupArray)([ _761.value2 ])(values(_761.value3)));
    };
    if (_761 instanceof Three) {
        return Prelude["++"](Data_Array.semigroupArray)(values(_761.value0))(Prelude["++"](Data_Array.semigroupArray)([ _761.value2 ])(Prelude["++"](Data_Array.semigroupArray)(values(_761.value3))(Prelude["++"](Data_Array.semigroupArray)([ _761.value5 ])(values(_761.value6)))));
    };
    throw new Error("Failed pattern match");
};

/**
 *  | Convert a map to an array of key/value pairs
 */
var toList = function (_759) {
    if (_759 instanceof Leaf) {
        return [  ];
    };
    if (_759 instanceof Two) {
        return Prelude["++"](Data_Array.semigroupArray)(toList(_759.value0))(Prelude["++"](Data_Array.semigroupArray)([ new Data_Tuple.Tuple(_759.value1, _759.value2) ])(toList(_759.value3)));
    };
    if (_759 instanceof Three) {
        return Prelude["++"](Data_Array.semigroupArray)(toList(_759.value0))(Prelude["++"](Data_Array.semigroupArray)([ new Data_Tuple.Tuple(_759.value1, _759.value2) ])(Prelude["++"](Data_Array.semigroupArray)(toList(_759.value3))(Prelude["++"](Data_Array.semigroupArray)([ new Data_Tuple.Tuple(_759.value4, _759.value5) ])(toList(_759.value6)))));
    };
    throw new Error("Failed pattern match");
};

/**
 *  | Calculate the number of key/value pairs in a map
 */
var size = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.length)(values);

/**
 *  | Create a map with one key/value pair
 */
var singleton = function (k) {
    return function (v) {
        return new Two(Leaf.value, k, v, Leaf.value);
    };
};

/**
 *  | Render a `Map` as a `String`
 */
var showTree = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return function (_753) {
            if (_753 instanceof Leaf) {
                return "Leaf";
            };
            if (_753 instanceof Two) {
                return "Two (" + (showTree(__dict_Show_0)(__dict_Show_1)(_753.value0) + (") (" + (Prelude.show(__dict_Show_0)(_753.value1) + (") (" + (Prelude.show(__dict_Show_1)(_753.value2) + (") (" + (showTree(__dict_Show_0)(__dict_Show_1)(_753.value3) + ")")))))));
            };
            if (_753 instanceof Three) {
                return "Three (" + (showTree(__dict_Show_0)(__dict_Show_1)(_753.value0) + (") (" + (Prelude.show(__dict_Show_0)(_753.value1) + (") (" + (Prelude.show(__dict_Show_1)(_753.value2) + (") (" + (showTree(__dict_Show_0)(__dict_Show_1)(_753.value3) + (") (" + (Prelude.show(__dict_Show_0)(_753.value4) + (") (" + (Prelude.show(__dict_Show_1)(_753.value5) + (") (" + (showTree(__dict_Show_0)(__dict_Show_1)(_753.value6) + ")")))))))))))));
            };
            throw new Error("Failed pattern match");
        };
    };
};
var showMap = function (__dict_Show_2) {
    return function (__dict_Show_3) {
        return new Prelude.Show(function (m) {
            return "fromList " + Prelude.show(Prelude.showArray(Data_Tuple.showTuple(__dict_Show_2)(__dict_Show_3)))(toList(m));
        });
    };
};

/**
 *  | Lookup a value for the specified key
 */
var lookup = function (__copy___dict_Ord_6) {
    return function (__copy__755) {
        return function (__copy__756) {
            var __dict_Ord_6 = __copy___dict_Ord_6;
            var _755 = __copy__755;
            var _756 = __copy__756;
            tco: while (true) {
                if (_756 instanceof Leaf) {
                    return Data_Maybe.Nothing.value;
                };
                if (_756 instanceof Two && Prelude["=="](__dict_Ord_6["__superclass_Prelude.Eq_0"]())(_755)(_756.value1)) {
                    return new Data_Maybe.Just(_756.value2);
                };
                if (_756 instanceof Two && Prelude["<"](__dict_Ord_6)(_755)(_756.value1)) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco__755 = _755;
                    var __tco__756 = _756.value0;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    _755 = __tco__755;
                    _756 = __tco__756;
                    continue tco;
                };
                if (_756 instanceof Two) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco__755 = _755;
                    var __tco__756 = _756.value3;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    _755 = __tco__755;
                    _756 = __tco__756;
                    continue tco;
                };
                if (_756 instanceof Three && Prelude["=="](__dict_Ord_6["__superclass_Prelude.Eq_0"]())(_755)(_756.value1)) {
                    return new Data_Maybe.Just(_756.value2);
                };
                if (_756 instanceof Three && Prelude["=="](__dict_Ord_6["__superclass_Prelude.Eq_0"]())(_755)(_756.value4)) {
                    return new Data_Maybe.Just(_756.value5);
                };
                if (_756 instanceof Three && Prelude["<"](__dict_Ord_6)(_755)(_756.value1)) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco__755 = _755;
                    var __tco__756 = _756.value0;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    _755 = __tco__755;
                    _756 = __tco__756;
                    continue tco;
                };
                if (_756 instanceof Three && (Prelude["<"](__dict_Ord_6)(_756.value1)(_755) && Prelude["<="](__dict_Ord_6)(_755)(_756.value4))) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco__755 = _755;
                    var __tco__756 = _756.value3;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    _755 = __tco__755;
                    _756 = __tco__756;
                    continue tco;
                };
                if (_756 instanceof Three) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco__755 = _755;
                    var __tco__756 = _756.value6;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    _755 = __tco__755;
                    _756 = __tco__756;
                    continue tco;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};

/**
 *  | Test if a key is a member of a map
 */
var member = function (__dict_Ord_7) {
    return function (k) {
        return function (m) {
            return Data_Maybe.isJust(lookup(__dict_Ord_7)(k)(m));
        };
    };
};

/**
 *  | Get an array of the keys contained in a map
 */
var keys = function (_760) {
    if (_760 instanceof Leaf) {
        return [  ];
    };
    if (_760 instanceof Two) {
        return Prelude["++"](Data_Array.semigroupArray)(keys(_760.value0))(Prelude["++"](Data_Array.semigroupArray)([ _760.value1 ])(keys(_760.value3)));
    };
    if (_760 instanceof Three) {
        return Prelude["++"](Data_Array.semigroupArray)(keys(_760.value0))(Prelude["++"](Data_Array.semigroupArray)([ _760.value1 ])(Prelude["++"](Data_Array.semigroupArray)(keys(_760.value3))(Prelude["++"](Data_Array.semigroupArray)([ _760.value4 ])(keys(_760.value6)))));
    };
    throw new Error("Failed pattern match");
};

/**
 *  | Test if a map is empty
 */
var isEmpty = function (_754) {
    if (_754 instanceof Leaf) {
        return true;
    };
    return false;
};
var functorMap = new Prelude.Functor(function (_762) {
    return function (_763) {
        if (_763 instanceof Leaf) {
            return Leaf.value;
        };
        if (_763 instanceof Two) {
            return new Two(Prelude["<$>"](functorMap)(_762)(_763.value0), _763.value1, _762(_763.value2), Prelude["<$>"](functorMap)(_762)(_763.value3));
        };
        if (_763 instanceof Three) {
            return new Three(Prelude["<$>"](functorMap)(_762)(_763.value0), _763.value1, _762(_763.value2), Prelude["<$>"](functorMap)(_762)(_763.value3), _763.value4, _762(_763.value5), Prelude["<$>"](functorMap)(_762)(_763.value6));
        };
        throw new Error("Failed pattern match");
    };
});

/**
 *  | Apply a function to the values in a map
 */
var map = Prelude["<$>"](functorMap);
var fromZipper = function (__copy___dict_Ord_8) {
    return function (__copy__757) {
        return function (__copy__758) {
            var __dict_Ord_8 = __copy___dict_Ord_8;
            var _757 = __copy__757;
            var _758 = __copy__758;
            tco: while (true) {
                if (_757.length === 0) {
                    return _758;
                };
                if (_757.length >= 1) {
                    var _2372 = _757.slice(1);
                    if (_757[0] instanceof TwoLeft) {
                        var __tco___dict_Ord_8 = __dict_Ord_8;
                        var __tco__758 = new Two(_758, (_757[0]).value0, (_757[0]).value1, (_757[0]).value2);
                        __dict_Ord_8 = __tco___dict_Ord_8;
                        _757 = _2372;
                        _758 = __tco__758;
                        continue tco;
                    };
                };
                if (_757.length >= 1) {
                    var _2377 = _757.slice(1);
                    if (_757[0] instanceof TwoRight) {
                        var __tco___dict_Ord_8 = __dict_Ord_8;
                        var __tco__758 = new Two((_757[0]).value0, (_757[0]).value1, (_757[0]).value2, _758);
                        __dict_Ord_8 = __tco___dict_Ord_8;
                        _757 = _2377;
                        _758 = __tco__758;
                        continue tco;
                    };
                };
                if (_757.length >= 1) {
                    var _2385 = _757.slice(1);
                    if (_757[0] instanceof ThreeLeft) {
                        var __tco___dict_Ord_8 = __dict_Ord_8;
                        var __tco__758 = new Three(_758, (_757[0]).value0, (_757[0]).value1, (_757[0]).value2, (_757[0]).value3, (_757[0]).value4, (_757[0]).value5);
                        __dict_Ord_8 = __tco___dict_Ord_8;
                        _757 = _2385;
                        _758 = __tco__758;
                        continue tco;
                    };
                };
                if (_757.length >= 1) {
                    var _2393 = _757.slice(1);
                    if (_757[0] instanceof ThreeMiddle) {
                        var __tco___dict_Ord_8 = __dict_Ord_8;
                        var __tco__758 = new Three((_757[0]).value0, (_757[0]).value1, (_757[0]).value2, _758, (_757[0]).value3, (_757[0]).value4, (_757[0]).value5);
                        __dict_Ord_8 = __tco___dict_Ord_8;
                        _757 = _2393;
                        _758 = __tco__758;
                        continue tco;
                    };
                };
                if (_757.length >= 1) {
                    var _2401 = _757.slice(1);
                    if (_757[0] instanceof ThreeRight) {
                        var __tco___dict_Ord_8 = __dict_Ord_8;
                        var __tco__758 = new Three((_757[0]).value0, (_757[0]).value1, (_757[0]).value2, (_757[0]).value3, (_757[0]).value4, (_757[0]).value5, _758);
                        __dict_Ord_8 = __tco___dict_Ord_8;
                        _757 = _2401;
                        _758 = __tco__758;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};

/**
 *  | Insert a key/value pair into a map
 */
var insert = function (__dict_Ord_9) {
    var up = function (__copy___dict_Ord_10) {
        return function (__copy__769) {
            return function (__copy__770) {
                var __dict_Ord_10 = __copy___dict_Ord_10;
                var _769 = __copy__769;
                var _770 = __copy__770;
                tco: while (true) {
                    if (_769.length === 0) {
                        return new Two(_770.value0, _770.value1, _770.value2, _770.value3);
                    };
                    if (_769.length >= 1) {
                        var _2416 = _769.slice(1);
                        if (_769[0] instanceof TwoLeft) {
                            return fromZipper(__dict_Ord_10)(_2416)(new Three(_770.value0, _770.value1, _770.value2, _770.value3, (_769[0]).value0, (_769[0]).value1, (_769[0]).value2));
                        };
                    };
                    if (_769.length >= 1) {
                        var _2425 = _769.slice(1);
                        if (_769[0] instanceof TwoRight) {
                            return fromZipper(__dict_Ord_10)(_2425)(new Three((_769[0]).value0, (_769[0]).value1, (_769[0]).value2, _770.value0, _770.value1, _770.value2, _770.value3));
                        };
                    };
                    if (_769.length >= 1) {
                        var _2437 = _769.slice(1);
                        if (_769[0] instanceof ThreeLeft) {
                            var __tco___dict_Ord_10 = __dict_Ord_10;
                            var __tco__770 = new KickUp(new Two(_770.value0, _770.value1, _770.value2, _770.value3), (_769[0]).value0, (_769[0]).value1, new Two((_769[0]).value2, (_769[0]).value3, (_769[0]).value4, (_769[0]).value5));
                            __dict_Ord_10 = __tco___dict_Ord_10;
                            _769 = _2437;
                            _770 = __tco__770;
                            continue tco;
                        };
                    };
                    if (_769.length >= 1) {
                        var _2449 = _769.slice(1);
                        if (_769[0] instanceof ThreeMiddle) {
                            var __tco___dict_Ord_10 = __dict_Ord_10;
                            var __tco__770 = new KickUp(new Two((_769[0]).value0, (_769[0]).value1, (_769[0]).value2, _770.value0), _770.value1, _770.value2, new Two(_770.value3, (_769[0]).value3, (_769[0]).value4, (_769[0]).value5));
                            __dict_Ord_10 = __tco___dict_Ord_10;
                            _769 = _2449;
                            _770 = __tco__770;
                            continue tco;
                        };
                    };
                    if (_769.length >= 1) {
                        var _2461 = _769.slice(1);
                        if (_769[0] instanceof ThreeRight) {
                            var __tco___dict_Ord_10 = __dict_Ord_10;
                            var __tco__770 = new KickUp(new Two((_769[0]).value0, (_769[0]).value1, (_769[0]).value2, (_769[0]).value3), (_769[0]).value4, (_769[0]).value5, new Two(_770.value0, _770.value1, _770.value2, _770.value3));
                            __dict_Ord_10 = __tco___dict_Ord_10;
                            _769 = _2461;
                            _770 = __tco__770;
                            continue tco;
                        };
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var down = function (__copy___dict_Ord_11) {
        return function (__copy__765) {
            return function (__copy__766) {
                return function (__copy__767) {
                    return function (__copy__768) {
                        var __dict_Ord_11 = __copy___dict_Ord_11;
                        var _765 = __copy__765;
                        var _766 = __copy__766;
                        var _767 = __copy__767;
                        var _768 = __copy__768;
                        tco: while (true) {
                            if (_768 instanceof Leaf) {
                                return up(__dict_Ord_11)(_765)(new KickUp(Leaf.value, _766, _767, Leaf.value));
                            };
                            if (_768 instanceof Two && Prelude["=="](__dict_Ord_11["__superclass_Prelude.Eq_0"]())(_766)(_768.value1)) {
                                return fromZipper(__dict_Ord_11)(_765)(new Two(_768.value0, _766, _767, _768.value3));
                            };
                            if (_768 instanceof Two && Prelude["<"](__dict_Ord_11)(_766)(_768.value1)) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco__765 = Prelude[":"](new TwoLeft(_768.value1, _768.value2, _768.value3))(_765);
                                var __tco__766 = _766;
                                var __tco__767 = _767;
                                var __tco__768 = _768.value0;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                _765 = __tco__765;
                                _766 = __tco__766;
                                _767 = __tco__767;
                                _768 = __tco__768;
                                continue tco;
                            };
                            if (_768 instanceof Two) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco__765 = Prelude[":"](new TwoRight(_768.value0, _768.value1, _768.value2))(_765);
                                var __tco__766 = _766;
                                var __tco__767 = _767;
                                var __tco__768 = _768.value3;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                _765 = __tco__765;
                                _766 = __tco__766;
                                _767 = __tco__767;
                                _768 = __tco__768;
                                continue tco;
                            };
                            if (_768 instanceof Three && Prelude["=="](__dict_Ord_11["__superclass_Prelude.Eq_0"]())(_766)(_768.value1)) {
                                return fromZipper(__dict_Ord_11)(_765)(new Three(_768.value0, _766, _767, _768.value3, _768.value4, _768.value5, _768.value6));
                            };
                            if (_768 instanceof Three && Prelude["=="](__dict_Ord_11["__superclass_Prelude.Eq_0"]())(_766)(_768.value4)) {
                                return fromZipper(__dict_Ord_11)(_765)(new Three(_768.value0, _768.value1, _768.value2, _768.value3, _766, _767, _768.value6));
                            };
                            if (_768 instanceof Three && Prelude["<"](__dict_Ord_11)(_766)(_768.value1)) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco__765 = Prelude[":"](new ThreeLeft(_768.value1, _768.value2, _768.value3, _768.value4, _768.value5, _768.value6))(_765);
                                var __tco__766 = _766;
                                var __tco__767 = _767;
                                var __tco__768 = _768.value0;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                _765 = __tco__765;
                                _766 = __tco__766;
                                _767 = __tco__767;
                                _768 = __tco__768;
                                continue tco;
                            };
                            if (_768 instanceof Three && (Prelude["<"](__dict_Ord_11)(_768.value1)(_766) && Prelude["<="](__dict_Ord_11)(_766)(_768.value4))) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco__765 = Prelude[":"](new ThreeMiddle(_768.value0, _768.value1, _768.value2, _768.value4, _768.value5, _768.value6))(_765);
                                var __tco__766 = _766;
                                var __tco__767 = _767;
                                var __tco__768 = _768.value3;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                _765 = __tco__765;
                                _766 = __tco__766;
                                _767 = __tco__767;
                                _768 = __tco__768;
                                continue tco;
                            };
                            if (_768 instanceof Three) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco__765 = Prelude[":"](new ThreeRight(_768.value0, _768.value1, _768.value2, _768.value3, _768.value4, _768.value5))(_765);
                                var __tco__766 = _766;
                                var __tco__767 = _767;
                                var __tco__768 = _768.value6;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                _765 = __tco__765;
                                _766 = __tco__766;
                                _767 = __tco__767;
                                _768 = __tco__768;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
            };
        };
    };
    return down(__dict_Ord_9)([  ]);
};
var foldableMap = new Data_Foldable.Foldable(function (__dict_Monoid_12) {
    return function (f) {
        return function (m) {
            return Data_Foldable.foldMap(Data_Foldable.foldableArray)(__dict_Monoid_12)(f)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(z)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
        };
    };
});
var eqMap = function (__dict_Eq_13) {
    return function (__dict_Eq_14) {
        return new Prelude.Eq(function (m1) {
            return function (m2) {
                return !Prelude["=="](eqMap(__dict_Eq_13)(__dict_Eq_14))(m1)(m2);
            };
        }, function (m1) {
            return function (m2) {
                return Prelude["=="](Prelude.eqArray(Data_Tuple.eqTuple(__dict_Eq_13)(__dict_Eq_14)))(toList(m1))(toList(m2));
            };
        });
    };
};
var ordMap = function (__dict_Ord_4) {
    return function (__dict_Ord_5) {
        return new Prelude.Ord(function () {
            return eqMap(__dict_Ord_4["__superclass_Prelude.Eq_0"]())(__dict_Ord_5["__superclass_Prelude.Eq_0"]());
        }, function (m1) {
            return function (m2) {
                return Prelude.compare(Prelude.ordArray(Data_Tuple.ordTuple(__dict_Ord_4)(__dict_Ord_5)))(toList(m1))(toList(m2));
            };
        });
    };
};

/**
 *  | An empty map
 */
var empty = Leaf.value;

/**
 *  | Create a map from an array of key/value pairs
 */
var fromList = function (__dict_Ord_15) {
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m) {
        return function (_751) {
            return insert(__dict_Ord_15)(_751.value0)(_751.value1)(m);
        };
    })(empty);
};

/**
 *  | Delete a key and its corresponding value from a map
 */
var $$delete = function (__dict_Ord_17) {
    var up = function (__copy___dict_Ord_18) {
        return function (__copy__774) {
            return function (__copy__775) {
                var __dict_Ord_18 = __copy___dict_Ord_18;
                var _774 = __copy__774;
                var _775 = __copy__775;
                tco: while (true) {
                    if (_774.length === 0) {
                        return _775;
                    };
                    if (_774.length >= 1) {
                        var _2522 = _774.slice(1);
                        if (_774[0] instanceof TwoLeft && ((_774[0]).value2 instanceof Leaf && _775 instanceof Leaf)) {
                            return fromZipper(__dict_Ord_18)(_2522)(new Two(Leaf.value, (_774[0]).value0, (_774[0]).value1, Leaf.value));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2527 = _774.slice(1);
                        if (_774[0] instanceof TwoRight && ((_774[0]).value0 instanceof Leaf && _775 instanceof Leaf)) {
                            return fromZipper(__dict_Ord_18)(_2527)(new Two(Leaf.value, (_774[0]).value1, (_774[0]).value2, Leaf.value));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2536 = _774.slice(1);
                        if (_774[0] instanceof TwoLeft && (_774[0]).value2 instanceof Two) {
                            var __tco___dict_Ord_18 = __dict_Ord_18;
                            var __tco__775 = new Three(_775, (_774[0]).value0, (_774[0]).value1, (_774[0]).value2.value0, (_774[0]).value2.value1, (_774[0]).value2.value2, (_774[0]).value2.value3);
                            __dict_Ord_18 = __tco___dict_Ord_18;
                            _774 = _2536;
                            _775 = __tco__775;
                            continue tco;
                        };
                    };
                    if (_774.length >= 1) {
                        var _2545 = _774.slice(1);
                        if (_774[0] instanceof TwoRight && (_774[0]).value0 instanceof Two) {
                            var __tco___dict_Ord_18 = __dict_Ord_18;
                            var __tco__775 = new Three((_774[0]).value0.value0, (_774[0]).value0.value1, (_774[0]).value0.value2, (_774[0]).value0.value3, (_774[0]).value1, (_774[0]).value2, _775);
                            __dict_Ord_18 = __tco___dict_Ord_18;
                            _774 = _2545;
                            _775 = __tco__775;
                            continue tco;
                        };
                    };
                    if (_774.length >= 1) {
                        var _2557 = _774.slice(1);
                        if (_774[0] instanceof TwoLeft && (_774[0]).value2 instanceof Three) {
                            return fromZipper(__dict_Ord_18)(_2557)(new Two(new Two(_775, (_774[0]).value0, (_774[0]).value1, (_774[0]).value2.value0), (_774[0]).value2.value1, (_774[0]).value2.value2, new Two((_774[0]).value2.value3, (_774[0]).value2.value4, (_774[0]).value2.value5, (_774[0]).value2.value6)));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2569 = _774.slice(1);
                        if (_774[0] instanceof TwoRight && (_774[0]).value0 instanceof Three) {
                            return fromZipper(__dict_Ord_18)(_2569)(new Two(new Two((_774[0]).value0.value0, (_774[0]).value0.value1, (_774[0]).value0.value2, (_774[0]).value0.value3), (_774[0]).value0.value4, (_774[0]).value0.value5, new Two((_774[0]).value0.value6, (_774[0]).value1, (_774[0]).value2, _775)));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2577 = _774.slice(1);
                        if (_774[0] instanceof ThreeLeft && ((_774[0]).value2 instanceof Leaf && ((_774[0]).value5 instanceof Leaf && _775 instanceof Leaf))) {
                            return fromZipper(__dict_Ord_18)(_2577)(new Three(Leaf.value, (_774[0]).value0, (_774[0]).value1, Leaf.value, (_774[0]).value3, (_774[0]).value4, Leaf.value));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2585 = _774.slice(1);
                        if (_774[0] instanceof ThreeMiddle && ((_774[0]).value0 instanceof Leaf && ((_774[0]).value5 instanceof Leaf && _775 instanceof Leaf))) {
                            return fromZipper(__dict_Ord_18)(_2585)(new Three(Leaf.value, (_774[0]).value1, (_774[0]).value2, Leaf.value, (_774[0]).value3, (_774[0]).value4, Leaf.value));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2593 = _774.slice(1);
                        if (_774[0] instanceof ThreeRight && ((_774[0]).value0 instanceof Leaf && ((_774[0]).value3 instanceof Leaf && _775 instanceof Leaf))) {
                            return fromZipper(__dict_Ord_18)(_2593)(new Three(Leaf.value, (_774[0]).value1, (_774[0]).value2, Leaf.value, (_774[0]).value4, (_774[0]).value5, Leaf.value));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2605 = _774.slice(1);
                        if (_774[0] instanceof ThreeLeft && (_774[0]).value2 instanceof Two) {
                            return fromZipper(__dict_Ord_18)(_2605)(new Two(new Three(_775, (_774[0]).value0, (_774[0]).value1, (_774[0]).value2.value0, (_774[0]).value2.value1, (_774[0]).value2.value2, (_774[0]).value2.value3), (_774[0]).value3, (_774[0]).value4, (_774[0]).value5));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2617 = _774.slice(1);
                        if (_774[0] instanceof ThreeMiddle && (_774[0]).value0 instanceof Two) {
                            return fromZipper(__dict_Ord_18)(_2617)(new Two(new Three((_774[0]).value0.value0, (_774[0]).value0.value1, (_774[0]).value0.value2, (_774[0]).value0.value3, (_774[0]).value1, (_774[0]).value2, _775), (_774[0]).value3, (_774[0]).value4, (_774[0]).value5));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2629 = _774.slice(1);
                        if (_774[0] instanceof ThreeMiddle && (_774[0]).value5 instanceof Two) {
                            return fromZipper(__dict_Ord_18)(_2629)(new Two((_774[0]).value0, (_774[0]).value1, (_774[0]).value2, new Three(_775, (_774[0]).value3, (_774[0]).value4, (_774[0]).value5.value0, (_774[0]).value5.value1, (_774[0]).value5.value2, (_774[0]).value5.value3)));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2641 = _774.slice(1);
                        if (_774[0] instanceof ThreeRight && (_774[0]).value3 instanceof Two) {
                            return fromZipper(__dict_Ord_18)(_2641)(new Two((_774[0]).value0, (_774[0]).value1, (_774[0]).value2, new Three((_774[0]).value3.value0, (_774[0]).value3.value1, (_774[0]).value3.value2, (_774[0]).value3.value3, (_774[0]).value4, (_774[0]).value5, _775)));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2656 = _774.slice(1);
                        if (_774[0] instanceof ThreeLeft && (_774[0]).value2 instanceof Three) {
                            return fromZipper(__dict_Ord_18)(_2656)(new Three(new Two(_775, (_774[0]).value0, (_774[0]).value1, (_774[0]).value2.value0), (_774[0]).value2.value1, (_774[0]).value2.value2, new Two((_774[0]).value2.value3, (_774[0]).value2.value4, (_774[0]).value2.value5, (_774[0]).value2.value6), (_774[0]).value3, (_774[0]).value4, (_774[0]).value5));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2671 = _774.slice(1);
                        if (_774[0] instanceof ThreeMiddle && (_774[0]).value0 instanceof Three) {
                            return fromZipper(__dict_Ord_18)(_2671)(new Three(new Two((_774[0]).value0.value0, (_774[0]).value0.value1, (_774[0]).value0.value2, (_774[0]).value0.value3), (_774[0]).value0.value4, (_774[0]).value0.value5, new Two((_774[0]).value0.value6, (_774[0]).value1, (_774[0]).value2, _775), (_774[0]).value3, (_774[0]).value4, (_774[0]).value5));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2686 = _774.slice(1);
                        if (_774[0] instanceof ThreeMiddle && (_774[0]).value5 instanceof Three) {
                            return fromZipper(__dict_Ord_18)(_2686)(new Three((_774[0]).value0, (_774[0]).value1, (_774[0]).value2, new Two(_775, (_774[0]).value3, (_774[0]).value4, (_774[0]).value5.value0), (_774[0]).value5.value1, (_774[0]).value5.value2, new Two((_774[0]).value5.value3, (_774[0]).value5.value4, (_774[0]).value5.value5, (_774[0]).value5.value6)));
                        };
                    };
                    if (_774.length >= 1) {
                        var _2701 = _774.slice(1);
                        if (_774[0] instanceof ThreeRight && (_774[0]).value3 instanceof Three) {
                            return fromZipper(__dict_Ord_18)(_2701)(new Three((_774[0]).value0, (_774[0]).value1, (_774[0]).value2, new Two((_774[0]).value3.value0, (_774[0]).value3.value1, (_774[0]).value3.value2, (_774[0]).value3.value3), (_774[0]).value3.value4, (_774[0]).value3.value5, new Two((_774[0]).value3.value6, (_774[0]).value4, (_774[0]).value5, _775)));
                        };
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var removeMaxNode = function (__copy___dict_Ord_19) {
        return function (__copy__777) {
            return function (__copy__778) {
                var __dict_Ord_19 = __copy___dict_Ord_19;
                var _777 = __copy__777;
                var _778 = __copy__778;
                tco: while (true) {
                    if (_778 instanceof Two && (_778.value0 instanceof Leaf && _778.value3 instanceof Leaf)) {
                        return up(__dict_Ord_19)(_777)(Leaf.value);
                    };
                    if (_778 instanceof Two) {
                        var __tco___dict_Ord_19 = __dict_Ord_19;
                        var __tco__777 = Prelude[":"](new TwoRight(_778.value0, _778.value1, _778.value2))(_777);
                        var __tco__778 = _778.value3;
                        __dict_Ord_19 = __tco___dict_Ord_19;
                        _777 = __tco__777;
                        _778 = __tco__778;
                        continue tco;
                    };
                    if (_778 instanceof Three && (_778.value0 instanceof Leaf && (_778.value3 instanceof Leaf && _778.value6 instanceof Leaf))) {
                        return up(__dict_Ord_19)(Prelude[":"](new TwoRight(Leaf.value, _778.value1, _778.value2))(_777))(Leaf.value);
                    };
                    if (_778 instanceof Three) {
                        var __tco___dict_Ord_19 = __dict_Ord_19;
                        var __tco__777 = Prelude[":"](new ThreeRight(_778.value0, _778.value1, _778.value2, _778.value3, _778.value4, _778.value5))(_777);
                        var __tco__778 = _778.value6;
                        __dict_Ord_19 = __tco___dict_Ord_19;
                        _777 = __tco__777;
                        _778 = __tco__778;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var maxNode = function (__copy___dict_Ord_20) {
        return function (__copy__776) {
            var __dict_Ord_20 = __copy___dict_Ord_20;
            var _776 = __copy__776;
            tco: while (true) {
                if (_776 instanceof Two && _776.value3 instanceof Leaf) {
                    return {
                        key: _776.value1, 
                        value: _776.value2
                    };
                };
                if (_776 instanceof Two) {
                    var __tco___dict_Ord_20 = __dict_Ord_20;
                    var __tco__776 = _776.value3;
                    __dict_Ord_20 = __tco___dict_Ord_20;
                    _776 = __tco__776;
                    continue tco;
                };
                if (_776 instanceof Three && _776.value6 instanceof Leaf) {
                    return {
                        key: _776.value4, 
                        value: _776.value5
                    };
                };
                if (_776 instanceof Three) {
                    var __tco___dict_Ord_20 = __dict_Ord_20;
                    var __tco__776 = _776.value6;
                    __dict_Ord_20 = __tco___dict_Ord_20;
                    _776 = __tco__776;
                    continue tco;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var down = function (__copy___dict_Ord_21) {
        return function (__copy__771) {
            return function (__copy__772) {
                return function (__copy__773) {
                    var __dict_Ord_21 = __copy___dict_Ord_21;
                    var _771 = __copy__771;
                    var _772 = __copy__772;
                    var _773 = __copy__773;
                    tco: while (true) {
                        if (_773 instanceof Leaf) {
                            return fromZipper(__dict_Ord_21)(_771)(Leaf.value);
                        };
                        if (_773 instanceof Two && (_773.value0 instanceof Leaf && (_773.value3 instanceof Leaf && Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(_772)(_773.value1)))) {
                            return up(__dict_Ord_21)(_771)(Leaf.value);
                        };
                        if (_773 instanceof Two) {
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(_772)(_773.value1)) {
                                var max = maxNode(__dict_Ord_21)(_773.value0);
                                return removeMaxNode(__dict_Ord_21)(Prelude[":"](new TwoLeft(max.key, max.value, _773.value3))(_771))(_773.value0);
                            };
                            if (Prelude["<"](__dict_Ord_21)(_772)(_773.value1)) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco__771 = Prelude[":"](new TwoLeft(_773.value1, _773.value2, _773.value3))(_771);
                                var __tco__772 = _772;
                                var __tco__773 = _773.value0;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                _771 = __tco__771;
                                _772 = __tco__772;
                                _773 = __tco__773;
                                continue tco;
                            };
                            if (Prelude.otherwise) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco__771 = Prelude[":"](new TwoRight(_773.value0, _773.value1, _773.value2))(_771);
                                var __tco__772 = _772;
                                var __tco__773 = _773.value3;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                _771 = __tco__771;
                                _772 = __tco__772;
                                _773 = __tco__773;
                                continue tco;
                            };
                        };
                        if (_773 instanceof Three && (_773.value0 instanceof Leaf && (_773.value3 instanceof Leaf && _773.value6 instanceof Leaf))) {
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(_772)(_773.value1)) {
                                return fromZipper(__dict_Ord_21)(_771)(new Two(Leaf.value, _773.value4, _773.value5, Leaf.value));
                            };
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(_772)(_773.value4)) {
                                return fromZipper(__dict_Ord_21)(_771)(new Two(Leaf.value, _773.value1, _773.value2, Leaf.value));
                            };
                        };
                        if (_773 instanceof Three) {
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(_772)(_773.value1)) {
                                var max = maxNode(__dict_Ord_21)(_773.value0);
                                return removeMaxNode(__dict_Ord_21)(Prelude[":"](new ThreeLeft(max.key, max.value, _773.value3, _773.value4, _773.value5, _773.value6))(_771))(_773.value0);
                            };
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(_772)(_773.value4)) {
                                var max = maxNode(__dict_Ord_21)(_773.value3);
                                return removeMaxNode(__dict_Ord_21)(Prelude[":"](new ThreeMiddle(_773.value0, _773.value1, _773.value2, max.key, max.value, _773.value6))(_771))(_773.value3);
                            };
                            if (Prelude["<"](__dict_Ord_21)(_772)(_773.value1)) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco__771 = Prelude[":"](new ThreeLeft(_773.value1, _773.value2, _773.value3, _773.value4, _773.value5, _773.value6))(_771);
                                var __tco__772 = _772;
                                var __tco__773 = _773.value0;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                _771 = __tco__771;
                                _772 = __tco__772;
                                _773 = __tco__773;
                                continue tco;
                            };
                            if (Prelude["<"](__dict_Ord_21)(_773.value1)(_772) && Prelude["<"](__dict_Ord_21)(_772)(_773.value4)) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco__771 = Prelude[":"](new ThreeMiddle(_773.value0, _773.value1, _773.value2, _773.value4, _773.value5, _773.value6))(_771);
                                var __tco__772 = _772;
                                var __tco__773 = _773.value3;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                _771 = __tco__771;
                                _772 = __tco__772;
                                _773 = __tco__773;
                                continue tco;
                            };
                            if (Prelude.otherwise) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco__771 = Prelude[":"](new ThreeRight(_773.value0, _773.value1, _773.value2, _773.value3, _773.value4, _773.value5))(_771);
                                var __tco__772 = _772;
                                var __tco__773 = _773.value6;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                _771 = __tco__771;
                                _772 = __tco__772;
                                _773 = __tco__773;
                                continue tco;
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
    };
    return down(__dict_Ord_17)([  ]);
};

/**
 *  | Check whether the underlying tree satisfies the 2-3 invariant
 *  |
 *  | This function is provided for internal use.
 */
var checkValid = function (tree) {
    var allHeights = function (_764) {
        if (_764 instanceof Leaf) {
            return [ 0 ];
        };
        if (_764 instanceof Two) {
            return Data_Array.map(function (n) {
                return n + 1;
            })(Prelude["++"](Data_Array.semigroupArray)(allHeights(_764.value0))(allHeights(_764.value3)));
        };
        if (_764 instanceof Three) {
            return Data_Array.map(function (n) {
                return n + 1;
            })(Prelude["++"](Data_Array.semigroupArray)(allHeights(_764.value0))(Prelude["++"](Data_Array.semigroupArray)(allHeights(_764.value3))(allHeights(_764.value6))));
        };
        throw new Error("Failed pattern match");
    };
    return Data_Array.length(Data_Array.nub(Prelude.eqNumber)(allHeights(tree))) === 1;
};

/**
 *  | Insert the value, delete a value, or update a value for a key in a map
 */
var alter = function (__dict_Ord_22) {
    return function (f) {
        return function (k) {
            return function (m) {
                var _2786 = f(lookup(__dict_Ord_22)(k)(m));
                if (_2786 instanceof Data_Maybe.Nothing) {
                    return $$delete(__dict_Ord_22)(k)(m);
                };
                if (_2786 instanceof Data_Maybe.Just) {
                    return insert(__dict_Ord_22)(k)(_2786.value0)(m);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};

/**
 *  | Create a map from an array of key/value pairs, using the specified function
 *  | to combine values for duplicate keys.
 */
var fromListWith = function (__dict_Ord_23) {
    return function (f) {
        var combine = function (_779) {
            return function (_780) {
                if (_780 instanceof Data_Maybe.Just) {
                    return Data_Maybe.Just.create(f(_779)(_780.value0));
                };
                if (_780 instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(_779);
                };
                throw new Error("Failed pattern match");
            };
        };
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m) {
            return function (_752) {
                return alter(__dict_Ord_23)(combine(_752.value1))(_752.value0)(m);
            };
        })(empty);
    };
};

/**
 *  | Compute the union of two maps, using the specified function
 *  | to combine values for duplicate keys.
 */
var unionWith = function (__dict_Ord_24) {
    return function (f) {
        return function (m1) {
            return function (m2) {
                var go = function (_781) {
                    return function (_782) {
                        return alter(__dict_Ord_24)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.Just.create)(Data_Maybe.maybe(_782.value1)(f(_782.value1))))(_782.value0)(_781);
                    };
                };
                return Data_Foldable.foldl(Data_Foldable.foldableArray)(go)(m2)(toList(m1));
            };
        };
    };
};

/**
 *  | Compute the union of two maps, preferring values from the first map in the case
 *  | of duplicate keys
 */
var union = function (__dict_Ord_25) {
    return unionWith(__dict_Ord_25)(Prelude["const"]);
};
var semigroupMap = function (__dict_Ord_26) {
    return new Prelude.Semigroup(union(__dict_Ord_26));
};
var monoidMap = function (__dict_Ord_16) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMap(__dict_Ord_16);
    }, empty);
};
var traversableMap = function (__dict_Ord_27) {
    return new Data_Traversable.Traversable(function () {
        return foldableMap;
    }, function () {
        return functorMap;
    }, function (__dict_Applicative_29) {
        return Data_Traversable.traverse(traversableMap(__dict_Ord_27))(__dict_Applicative_29)(Prelude.id(Prelude.categoryArr));
    }, function (__dict_Applicative_28) {
        return function (f) {
            return function (ms) {
                return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<*>"](__dict_Applicative_28["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_28["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(union(__dict_Ord_27))(x))(acc);
                    };
                })(Prelude.pure(__dict_Applicative_28)(empty))(Prelude["<$>"](Data_Array.functorArray)(Prelude["<$>"]((__dict_Applicative_28["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Prelude["<$>"](Data_Array.functorArray)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(__dict_Applicative_28)(f))(toList(ms))));
            };
        };
    });
};

/**
 *  | Compute the union of a collection of maps
 */
var unions = function (__dict_Ord_30) {
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(union(__dict_Ord_30))(empty);
};

/**
 *  | Update or delete the value for a key in a map
 */
var update = function (__dict_Ord_31) {
    return function (f) {
        return function (k) {
            return function (m) {
                return alter(__dict_Ord_31)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
            };
        };
    };
};
module.exports = {
    size: size, 
    map: map, 
    unions: unions, 
    unionWith: unionWith, 
    union: union, 
    values: values, 
    keys: keys, 
    update: update, 
    alter: alter, 
    member: member, 
    "delete": $$delete, 
    fromListWith: fromListWith, 
    fromList: fromList, 
    toList: toList, 
    lookup: lookup, 
    insert: insert, 
    checkValid: checkValid, 
    singleton: singleton, 
    isEmpty: isEmpty, 
    empty: empty, 
    showTree: showTree, 
    eqMap: eqMap, 
    showMap: showMap, 
    ordMap: ordMap, 
    semigroupMap: semigroupMap, 
    monoidMap: monoidMap, 
    functorMap: functorMap, 
    foldableMap: foldableMap, 
    traversableMap: traversableMap
};
