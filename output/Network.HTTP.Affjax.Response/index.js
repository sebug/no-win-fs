// Generated by psc-make version 0.6.8
"use strict";
var Prelude = require("Prelude");
var Data_Foreign = require("Data.Foreign");
var Control_Bind = require("Control.Bind");
var Data_Either = require("Data.Either");
var DOM = require("DOM");
var DOM_File = require("DOM.File");
var DOM_XHR = require("DOM.XHR");
var Data_ArrayBuffer_Types = require("Data.ArrayBuffer.Types");

/**
 *  | Valid response types for an AJAX request. This is used to determine the
 *  | `ResponseContent` type for a request. The `a` type variable is a phantom
 *  | type used to associate the `ResponseType` with a particular instance of
 *  | `Respondable`.
 */
var ArrayBufferResponse = (function () {
    function ArrayBufferResponse() {

    };
    ArrayBufferResponse.value = new ArrayBufferResponse();
    return ArrayBufferResponse;
})();

/**
 *  | Valid response types for an AJAX request. This is used to determine the
 *  | `ResponseContent` type for a request. The `a` type variable is a phantom
 *  | type used to associate the `ResponseType` with a particular instance of
 *  | `Respondable`.
 */
var BlobResponse = (function () {
    function BlobResponse() {

    };
    BlobResponse.value = new BlobResponse();
    return BlobResponse;
})();

/**
 *  | Valid response types for an AJAX request. This is used to determine the
 *  | `ResponseContent` type for a request. The `a` type variable is a phantom
 *  | type used to associate the `ResponseType` with a particular instance of
 *  | `Respondable`.
 */
var DocumentResponse = (function () {
    function DocumentResponse() {

    };
    DocumentResponse.value = new DocumentResponse();
    return DocumentResponse;
})();

/**
 *  | Valid response types for an AJAX request. This is used to determine the
 *  | `ResponseContent` type for a request. The `a` type variable is a phantom
 *  | type used to associate the `ResponseType` with a particular instance of
 *  | `Respondable`.
 */
var JSONResponse = (function () {
    function JSONResponse() {

    };
    JSONResponse.value = new JSONResponse();
    return JSONResponse;
})();

/**
 *  | Valid response types for an AJAX request. This is used to determine the
 *  | `ResponseContent` type for a request. The `a` type variable is a phantom
 *  | type used to associate the `ResponseType` with a particular instance of
 *  | `Respondable`.
 */
var StringResponse = (function () {
    function StringResponse() {

    };
    StringResponse.value = new StringResponse();
    return StringResponse;
})();
var Respondable = function (fromResponse, responseType) {
    this.fromResponse = fromResponse;
    this.responseType = responseType;
};
var showResponseType = new Prelude.Show(function (_27) {
    if (_27 instanceof ArrayBufferResponse) {
        return "ArrayBufferResponse";
    };
    if (_27 instanceof BlobResponse) {
        return "BlobResponse";
    };
    if (_27 instanceof DocumentResponse) {
        return "DocumentResponse";
    };
    if (_27 instanceof JSONResponse) {
        return "JSONResponse";
    };
    if (_27 instanceof StringResponse) {
        return "StringResponse";
    };
    throw new Error("Failed pattern match");
});
var responseTypeToString = function (_24) {
    if (_24 instanceof ArrayBufferResponse) {
        return "arraybuffer";
    };
    if (_24 instanceof BlobResponse) {
        return "blob";
    };
    if (_24 instanceof DocumentResponse) {
        return "document";
    };
    if (_24 instanceof JSONResponse) {
        return "json";
    };
    if (_24 instanceof StringResponse) {
        return "text";
    };
    throw new Error("Failed pattern match");
};
var responseType = function (dict) {
    return dict.responseType;
};
var responsableUnit = new Respondable(Prelude["const"](new Data_Either.Right(Prelude.unit)), StringResponse.value);
var responsableString = new Respondable(Data_Foreign.readString, StringResponse.value);
var responsableJSON = new Respondable(Data_Either.Right.create, JSONResponse.value);
var responsableDocument = new Respondable(Data_Foreign.unsafeReadTagged("Document"), DocumentResponse.value);
var responsableBlob = new Respondable(Data_Foreign.unsafeReadTagged("Blob"), BlobResponse.value);
var fromResponse = function (dict) {
    return dict.fromResponse;
};
var eqResponseType = new Prelude.Eq(function (x) {
    return function (y) {
        return !Prelude["=="](eqResponseType)(x)(y);
    };
}, function (_25) {
    return function (_26) {
        if (_25 instanceof ArrayBufferResponse && _26 instanceof ArrayBufferResponse) {
            return true;
        };
        if (_25 instanceof BlobResponse && _26 instanceof BlobResponse) {
            return true;
        };
        if (_25 instanceof DocumentResponse && _26 instanceof DocumentResponse) {
            return true;
        };
        if (_25 instanceof JSONResponse && _26 instanceof JSONResponse) {
            return true;
        };
        if (_25 instanceof StringResponse && _26 instanceof StringResponse) {
            return true;
        };
        return false;
    };
});
module.exports = {
    ArrayBufferResponse: ArrayBufferResponse, 
    BlobResponse: BlobResponse, 
    DocumentResponse: DocumentResponse, 
    JSONResponse: JSONResponse, 
    StringResponse: StringResponse, 
    Respondable: Respondable, 
    fromResponse: fromResponse, 
    responseType: responseType, 
    responseTypeToString: responseTypeToString, 
    eqResponseType: eqResponseType, 
    showResponseType: showResponseType, 
    responsableBlob: responsableBlob, 
    responsableDocument: responsableDocument, 
    responsableJSON: responsableJSON, 
    responsableString: responsableString, 
    responsableUnit: responsableUnit
};
