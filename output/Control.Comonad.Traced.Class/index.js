// Generated by psc-make version 0.6.8

/**
 *  | This module defines the `ComonadTraced` type class and its instances.
 */
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Comonad_Traced_Trans = require("Control.Comonad.Traced.Trans");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");

/**
 *  | The `ComonadTraced` type class represents those monads which support relative (monoidal)
 *  | position information via `track`.
 *  |
 *  | - `track` extracts a value at the specified relative position.
 *  |
 *  | An implementation is provided for `TracedT`.
 *  |
 *  | Laws:
 *  |
 *  | - `track mempty = extract`
 *  | - `track s <<= track t x = track (s <> t) x`
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | blur :: forall w. (ComonadTraced (Additive Number) w) -> w Number -> w Number
 *  | blur = extend \r -> (track (Additive (-1)) r + track (Additive 1) r) / 2
 *  | ```
 */
var ComonadTraced = function (__superclass_Control$dotComonad$dotComonad_0, track) {
    this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
    this.track = track;
};

/**
 *  | The `ComonadTraced` type class represents those monads which support relative (monoidal)
 *  | position information via `track`.
 *  |
 *  | - `track` extracts a value at the specified relative position.
 *  |
 *  | An implementation is provided for `TracedT`.
 *  |
 *  | Laws:
 *  |
 *  | - `track mempty = extract`
 *  | - `track s <<= track t x = track (s <> t) x`
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | blur :: forall w. (ComonadTraced (Additive Number) w) -> w Number -> w Number
 *  | blur = extend \r -> (track (Additive (-1)) r + track (Additive 1) r) / 2
 *  | ```
 */
var track = function (dict) {
    return dict.track;
};

/**
 *  | Extracts a value at a relative position which depends on the current value.
 */
var tracks = function (__dict_Comonad_0) {
    return function (__dict_ComonadTraced_1) {
        return function (f) {
            return function (w) {
                return track(__dict_ComonadTraced_1)(f(Control_Comonad.extract(__dict_Comonad_0)(w)))(w);
            };
        };
    };
};

/**
 *  | Get a value which depends on the current position.
 */
var listens = function (__dict_Functor_2) {
    return function (f) {
        return function (tr) {
            return Prelude["<$>"](__dict_Functor_2)(function (g) {
                return function (t) {
                    return new Data_Tuple.Tuple(g(t), f(t));
                };
            })(Control_Comonad_Traced_Trans.runTracedT(tr));
        };
    };
};

/**
 *  | Get the current position.
 */
var listen = function (__dict_Functor_3) {
    return function (tr) {
        return Prelude["<$>"](__dict_Functor_3)(function (f) {
            return function (t) {
                return new Data_Tuple.Tuple(f(t), t);
            };
        })(Control_Comonad_Traced_Trans.runTracedT(tr));
    };
};
var comonadTracedTracedT = function (__dict_Comonad_4) {
    return function (__dict_Monoid_5) {
        return new ComonadTraced(function () {
            return Control_Comonad_Traced_Trans.comonadTracedT(__dict_Comonad_4)(__dict_Monoid_5);
        }, function (t) {
            return function (tr) {
                return Control_Comonad.extract(__dict_Comonad_4)(Control_Comonad_Traced_Trans.runTracedT(tr))(t);
            };
        });
    };
};

/**
 *  | Apply a function to the current position.
 */
var censor = function (__dict_Functor_6) {
    return function (f) {
        return function (tr) {
            return Prelude["<$>"](__dict_Functor_6)(Prelude[">>>"](Prelude.semigroupoidArr)(f))(Control_Comonad_Traced_Trans.runTracedT(tr));
        };
    };
};
module.exports = {
    ComonadTraced: ComonadTraced, 
    censor: censor, 
    listens: listens, 
    listen: listen, 
    tracks: tracks, 
    track: track, 
    comonadTracedTracedT: comonadTracedTracedT
};
