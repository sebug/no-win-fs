// Generated by psc-make version 0.6.8

/**
 *  | Utilities for n-tuples: sequences longer than two components built from
 *  | nested pairs.
 *  |
 *  | Nested tuples arise naturally in product combinators. You shouldn't 
 *  | represent data using nested tuples, but if combinators you're working with
 *  | create them, utilities in this module will allow to to more easily work
 *  | with them, including translating to and from more traditional product types.
 *  | 
 *  | ```purescript
 *  | data Address = Address String City (Maybe Province) Country
 *  |
 *  | exampleAddress1 = makeAddress "221B Baker Street" London Nothing UK
 *  | exampleAddress2 = makeAddressT $ "221B Baker Street" /\ London /\ Nothing /\ UK
 *  | 
 *  | makeAddressT :: Tuple4 String City (Maybe Province) Country -> Address
 *  | makeAddressT = uncurry4 Address
 *  |
 *  | makeAddress :: String -> City -> (Maybe Province) -> Country -> Address
 *  | makeAddress = curry4 makeAddressT
 *  | 
 *  | tupleAddress :: Address -> Tuple4 String City (Maybe Province) Country
 *  | tupleAddress (Address a b c d) = tuple4 a b c d
 *  | ```
 */
"use strict";
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");

/**
 *  | Shorthand for constructing n-tuples as nested pairs.
 *  | `a /\ b /\ c /\ d` becomes `Tuple (Tuple (Tuple a b) c ) d`
 */
var $div$bslash = function (a) {
    return function (b) {
        return new Data_Tuple.Tuple(a, b);
    };
};

/**
 *  | Given a function of 9 arguments, return a function that accepts a 9-tuple.
 */
var uncurry9 = function (f$prime) {
    return function (_380) {
        return f$prime(_380.value0.value0.value0.value0.value0.value0.value0.value0)(_380.value0.value0.value0.value0.value0.value0.value0.value1)(_380.value0.value0.value0.value0.value0.value0.value1)(_380.value0.value0.value0.value0.value0.value1)(_380.value0.value0.value0.value0.value1)(_380.value0.value0.value0.value1)(_380.value0.value0.value1)(_380.value0.value1)(_380.value1);
    };
};

/**
 *  | Given a function of 8 arguments, return a function that accepts a 8-tuple.
 */
var uncurry8 = function (f$prime) {
    return function (_379) {
        return f$prime(_379.value0.value0.value0.value0.value0.value0.value0)(_379.value0.value0.value0.value0.value0.value0.value1)(_379.value0.value0.value0.value0.value0.value1)(_379.value0.value0.value0.value0.value1)(_379.value0.value0.value0.value1)(_379.value0.value0.value1)(_379.value0.value1)(_379.value1);
    };
};

/**
 *  | Given a function of 7 arguments, return a function that accepts a 7-tuple.
 */
var uncurry7 = function (f$prime) {
    return function (_378) {
        return f$prime(_378.value0.value0.value0.value0.value0.value0)(_378.value0.value0.value0.value0.value0.value1)(_378.value0.value0.value0.value0.value1)(_378.value0.value0.value0.value1)(_378.value0.value0.value1)(_378.value0.value1)(_378.value1);
    };
};

/**
 *  | Given a function of 6 arguments, return a function that accepts a 6-tuple.
 */
var uncurry6 = function (f$prime) {
    return function (_377) {
        return f$prime(_377.value0.value0.value0.value0.value0)(_377.value0.value0.value0.value0.value1)(_377.value0.value0.value0.value1)(_377.value0.value0.value1)(_377.value0.value1)(_377.value1);
    };
};

/**
 *  | Given a function of 5 arguments, return a function that accepts a 5-tuple.
 */
var uncurry5 = function (f) {
    return function (_376) {
        return f(_376.value0.value0.value0.value0)(_376.value0.value0.value0.value1)(_376.value0.value0.value1)(_376.value0.value1)(_376.value1);
    };
};

/**
 *  | Given a function of 4 arguments, return a function that accepts a 4-tuple.
 */
var uncurry4 = function (f) {
    return function (_375) {
        return f(_375.value0.value0.value0)(_375.value0.value0.value1)(_375.value0.value1)(_375.value1);
    };
};

/**
 *  | Given a function of 3 arguments, return a function that accepts a 3-tuple.
 */
var uncurry3 = function (f) {
    return function (_374) {
        return f(_374.value0.value0)(_374.value0.value1)(_374.value1);
    };
};

/**
 *  | Given a function of 2 arguments, return a function that accepts a 2-tuple.
 */
var uncurry2 = function (f) {
    return function (_373) {
        return f(_373.value0)(_373.value1);
    };
};

/**
 *  | Given a function of 10 arguments, return a function that accepts a 10-tuple.
 */
var uncurry10 = function (f$prime) {
    return function (_381) {
        return f$prime(_381.value0.value0.value0.value0.value0.value0.value0.value0.value0)(_381.value0.value0.value0.value0.value0.value0.value0.value0.value1)(_381.value0.value0.value0.value0.value0.value0.value0.value1)(_381.value0.value0.value0.value0.value0.value0.value1)(_381.value0.value0.value0.value0.value0.value1)(_381.value0.value0.value0.value0.value1)(_381.value0.value0.value0.value1)(_381.value0.value0.value1)(_381.value0.value1)(_381.value1);
    };
};

/**
 *  | Given 9 values, creates a nested 9-tuple.
 */
var tuple9 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return function (h) {
                                return function (i) {
                                    return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

/**
 *  | Given 8 values, creates a nested 8-tuple.
 */
var tuple8 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return function (h) {
                                return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h);
                            };
                        };
                    };
                };
            };
        };
    };
};

/**
 *  | Given 7 values, creates a nested 7-tuple.
 */
var tuple7 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g);
                        };
                    };
                };
            };
        };
    };
};

/**
 *  | Given 6 values, creates a nested 6-tuple.
 */
var tuple6 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f);
                    };
                };
            };
        };
    };
};

/**
 *  | Given 5 values, creates a nested 5-tuple.
 */
var tuple5 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e);
                };
            };
        };
    };
};

/**
 *  | Given 4 values, creates a nested 4-tuple.
 */
var tuple4 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d);
            };
        };
    };
};

/**
 *  | Given 3 values, creates a nested 3-tuple.
 */
var tuple3 = function (a) {
    return function (b) {
        return function (c) {
            return new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c);
        };
    };
};

/**
 *  | Given 2 values, creates a nested 2-tuple.
 */
var tuple2 = Data_Tuple.Tuple.create;

/**
 *  | Given 10 values, creates a nested 10-tuple.
 */
var tuple10 = function (a) {
    return function (b) {
        return function (c) {
            return function (d) {
                return function (e) {
                    return function (f) {
                        return function (g) {
                            return function (h) {
                                return function (i) {
                                    return function (j) {
                                        return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

/**
 *  | Given a function that accepts a 9-tuple, return a function of 9 arguments.
 */
var curry9 = function (f$prime) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

/**
 *  | Given a function that accepts a 8-tuple, return a function of 8 arguments.
 */
var curry8 = function (f$prime) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

/**
 *  | Given a function that accepts a 7-tuple, return a function of 7 arguments.
 */
var curry7 = function (f$prime) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g));
                            };
                        };
                    };
                };
            };
        };
    };
};

/**
 *  | Given a function that accepts a 6-tuple, return a function of 6 arguments.
 */
var curry6 = function (f$prime) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f));
                        };
                    };
                };
            };
        };
    };
};

/**
 *  | Given a function that accepts a 5-tuple, return a function of 5 arguments.
 */
var curry5 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e));
                    };
                };
            };
        };
    };
};

/**
 *  | Given a function that accepts a 4-tuple, return a function of 4 arguments.
 */
var curry4 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d));
                };
            };
        };
    };
};

/**
 *  | Given a function that accepts a 3-tuple, return a function of 3 arguments.
 */
var curry3 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c));
            };
        };
    };
};

/**
 *  | Given a function that accepts a 2-tuple, return a function of 2 arguments.
 */
var curry2 = function (f) {
    return function (a) {
        return function (b) {
            return f(new Data_Tuple.Tuple(a, b));
        };
    };
};

/**
 *  | Given a function that accepts a 10-tuple, return a function of 10 arguments.
 */
var curry10 = function (f$prime) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return function (j) {
                                            return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    "/\\": $div$bslash, 
    curry10: curry10, 
    uncurry10: uncurry10, 
    curry9: curry9, 
    uncurry9: uncurry9, 
    curry8: curry8, 
    uncurry8: uncurry8, 
    curry7: curry7, 
    uncurry7: uncurry7, 
    curry6: curry6, 
    uncurry6: uncurry6, 
    curry5: curry5, 
    uncurry5: uncurry5, 
    curry4: curry4, 
    uncurry4: uncurry4, 
    curry3: curry3, 
    uncurry3: uncurry3, 
    curry2: curry2, 
    uncurry2: uncurry2, 
    tuple10: tuple10, 
    tuple9: tuple9, 
    tuple8: tuple8, 
    tuple7: tuple7, 
    tuple6: tuple6, 
    tuple5: tuple5, 
    tuple4: tuple4, 
    tuple3: tuple3, 
    tuple2: tuple2
};
