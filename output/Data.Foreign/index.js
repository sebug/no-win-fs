// Generated by psc-make version 0.6.8

/**
 *  | This module defines types and functions for working with _foreign_
 *  | data.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Function = require("Data.Function");
var Data_Array = require("Data.Array");
var Data_Either = require("Data.Either");

  function parseJSONImpl(left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  }
  ;

  function toForeign(value) {
    return value;
  }
  ;

  function unsafeFromForeign(value) {
    return value;
  }
  ;

  function typeOf(value) {
    return typeof value;
  }
  ;

  function tagOf(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  ;

  function isNull(value) {
    return value === null;
  }
  ;

  function isUndefined(value) {
    return value === undefined;
  }
  ;

  var isArray = Array.isArray || function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };
  ;

/**
 *  | A type for runtime type errors
 */
var TypeMismatch = (function () {
    function TypeMismatch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeMismatch.create = function (value0) {
        return function (value1) {
            return new TypeMismatch(value0, value1);
        };
    };
    return TypeMismatch;
})();

/**
 *  | A type for runtime type errors
 */
var ErrorAtIndex = (function () {
    function ErrorAtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtIndex.create = function (value0) {
        return function (value1) {
            return new ErrorAtIndex(value0, value1);
        };
    };
    return ErrorAtIndex;
})();

/**
 *  | A type for runtime type errors
 */
var ErrorAtProperty = (function () {
    function ErrorAtProperty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtProperty.create = function (value0) {
        return function (value1) {
            return new ErrorAtProperty(value0, value1);
        };
    };
    return ErrorAtProperty;
})();

/**
 *  | A type for runtime type errors
 */
var JSONError = (function () {
    function JSONError(value0) {
        this.value0 = value0;
    };
    JSONError.create = function (value0) {
        return new JSONError(value0);
    };
    return JSONError;
})();

/**
 *  | Unsafely coerce a `Foreign` value when the value has a particular `tagOf`
 *  | value.
 */
var unsafeReadTagged = function (_164) {
    return function (_165) {
        if (tagOf(_165) === _164) {
            return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_165));
        };
        return new Data_Either.Left(new TypeMismatch(_164, tagOf(_165)));
    };
};
var showForeignError = new Prelude.Show(function (_167) {
    if (_167 instanceof TypeMismatch) {
        return "Type mismatch: expected " + (_167.value0 + (", found " + _167.value1));
    };
    if (_167 instanceof ErrorAtIndex) {
        return "Error at array index " + (Prelude.show(Prelude.showNumber)(_167.value0) + (": " + Prelude.show(showForeignError)(_167.value1)));
    };
    if (_167 instanceof ErrorAtProperty) {
        return "Error at property " + (Prelude.show(Prelude.showString)(_167.value0) + (": " + Prelude.show(showForeignError)(_167.value1)));
    };
    if (_167 instanceof JSONError) {
        return "JSON error: " + _167.value0;
    };
    throw new Error("Failed pattern match");
});

/**
 *  | Attempt to coerce a foreign value to a `String`.
 */
var readString = unsafeReadTagged("String");

/**
 *  | Attempt to coerce a foreign value to a `Number`.
 */
var readNumber = unsafeReadTagged("Number");

/**
 *  | Attempt to coerce a foreign value to a `Boolean`.
 */
var readBoolean = unsafeReadTagged("Boolean");

/**
 *  | Attempt to coerce a foreign value to an array.
 */
var readArray = function (_166) {
    if (isArray(_166)) {
        return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_166));
    };
    return new Data_Either.Left(new TypeMismatch("array", tagOf(_166)));
};

/**
 *  | Attempt to parse a JSON string, returning the result as foreign data.
 */
var parseJSON = function (json) {
    return parseJSONImpl(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.Left.create)(JSONError.create), Data_Either.Right.create, json);
};
var eqForeignError = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](eqForeignError)(a)(b);
    };
}, function (_168) {
    return function (_169) {
        if (_168 instanceof TypeMismatch && _169 instanceof TypeMismatch) {
            return _168.value0 === _169.value0 && _168.value1 === _169.value1;
        };
        if (_168 instanceof ErrorAtIndex && _169 instanceof ErrorAtIndex) {
            return _168.value0 === _169.value0 && Prelude["=="](eqForeignError)(_168.value1)(_169.value1);
        };
        if (_168 instanceof ErrorAtProperty && _169 instanceof ErrorAtProperty) {
            return _168.value0 === _169.value0 && Prelude["=="](eqForeignError)(_168.value1)(_169.value1);
        };
        if (_168 instanceof JSONError && _169 instanceof JSONError) {
            return _168.value0 === _169.value0;
        };
        return false;
    };
});
module.exports = {
    TypeMismatch: TypeMismatch, 
    ErrorAtIndex: ErrorAtIndex, 
    ErrorAtProperty: ErrorAtProperty, 
    JSONError: JSONError, 
    readArray: readArray, 
    readNumber: readNumber, 
    readBoolean: readBoolean, 
    readString: readString, 
    isArray: isArray, 
    isUndefined: isUndefined, 
    isNull: isNull, 
    tagOf: tagOf, 
    typeOf: typeOf, 
    unsafeReadTagged: unsafeReadTagged, 
    unsafeFromForeign: unsafeFromForeign, 
    toForeign: toForeign, 
    parseJSON: parseJSON, 
    showForeignError: showForeignError, 
    eqForeignError: eqForeignError
};
