-- Generated by psc-make version 0.6.8
module Data.Bifunctor.Joker where
import Prelude ()
import Data.Bifunctor.Joker ()
import Data.Foldable ()
import Data.Traversable ()
import Data.Bitraversable ()
import Prim ()
import Prelude ()
import Data.Bifoldable ()
import Data.Bifunctor ()
import Data.Bitraversable ()
import Data.Foldable ()
import Data.Monoid ()
import Data.Traversable ()
import Control.Apply ()
import Control.Biapplicative ()
import Control.Biapply ()
data Joker (g :: * -> *) (a :: *) (b :: *) = Joker (g b)
foreign import runJoker :: forall g a b. Data.Bifunctor.Joker.Joker g a b -> g b
foreign import instance jokerBifunctor :: (Prelude.Functor g) => Data.Bifunctor.Bifunctor (Data.Bifunctor.Joker.Joker g)
foreign import instance jokerFunctor :: (Prelude.Functor g) => Prelude.Functor (Data.Bifunctor.Joker.Joker g a)
foreign import instance jokerBiapply :: (Prelude.Apply g) => Control.Biapply.Biapply (Data.Bifunctor.Joker.Joker g)
foreign import instance jokerBiapplicative :: (Prelude.Applicative g) => Control.Biapplicative.Biapplicative (Data.Bifunctor.Joker.Joker g)
foreign import instance jokerBifoldable :: (Data.Foldable.Foldable g) => Data.Bifoldable.Bifoldable (Data.Bifunctor.Joker.Joker g)
foreign import instance jokerFoldable :: (Data.Foldable.Foldable g) => Data.Foldable.Foldable (Data.Bifunctor.Joker.Joker g a)
foreign import instance jokerBitraversable :: (Data.Traversable.Traversable g) => Data.Bitraversable.Bitraversable (Data.Bifunctor.Joker.Joker g)
foreign import instance jokerTraversable :: (Data.Traversable.Traversable g) => Data.Traversable.Traversable (Data.Bifunctor.Joker.Joker g a)
