// Generated by psc-make version 0.6.8
"use strict";
var Data_Function = require("Data.Function");
var Prelude = require("Prelude");
var Data_DOM_Simple_Unsafe_Ajax = require("Data.DOM.Simple.Unsafe.Ajax");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Maybe = require("Data.Maybe");
var DOM = require("DOM");
var Data_DOM_Simple_Types = require("Data.DOM.Simple.Types");

  function maybeFn(nothing, just, a) {
    return a == null ? nothing : just(a);
  };

  function makeXMLHttpRequest() {
    return new XMLHttpRequest();
  };

  function responseText(obj) {
      return function () {
        return obj.responseText;
    };
  };

  function status(obj) {
    return function () {
      return obj.status;
    };
  };

  function statusText(obj) {
      return function () {
        return obj.statusText;
    };
  };

  function setRequestHeader(key) {
     return function (value) {
       return function (obj) {
         return function () {
           obj.setRequestHeader(key, value);
           return {};
         };
       };
     };
  };

  function getAllResponseHeaders(obj) {
    return function () {
      return obj.getAllResponseHeaders();
    };
  };

  function overrideMimeType(mime) {
    return function (obj) {
      return function () {
        obj.overrideMimeType(mine);
        return {};
      };
    };
  };
var Default = (function () {
    function Default() {

    };
    Default.value = new Default();
    return Default;
})();
var $$ArrayBuffer = (function () {
    function ArrayBuffer() {

    };
    ArrayBuffer.value = new ArrayBuffer();
    return ArrayBuffer;
})();
var Blob = (function () {
    function Blob() {

    };
    Blob.value = new Blob();
    return Blob;
})();
var Document = (function () {
    function Document() {

    };
    Document.value = new Document();
    return Document;
})();
var Json = (function () {
    function Json() {

    };
    Json.value = new Json();
    return Json;
})();
var Text = (function () {
    function Text() {

    };
    Text.value = new Text();
    return Text;
})();
var MozBlob = (function () {
    function MozBlob() {

    };
    MozBlob.value = new MozBlob();
    return MozBlob;
})();
var MozChunkedText = (function () {
    function MozChunkedText() {

    };
    MozChunkedText.value = new MozChunkedText();
    return MozChunkedText;
})();
var MozChunkedArrayBuffer = (function () {
    function MozChunkedArrayBuffer() {

    };
    MozChunkedArrayBuffer.value = new MozChunkedArrayBuffer();
    return MozChunkedArrayBuffer;
})();
var Unsent = (function () {
    function Unsent() {

    };
    Unsent.value = new Unsent();
    return Unsent;
})();
var Opened = (function () {
    function Opened() {

    };
    Opened.value = new Opened();
    return Opened;
})();
var HeadersReceived = (function () {
    function HeadersReceived() {

    };
    HeadersReceived.value = new HeadersReceived();
    return HeadersReceived;
})();
var Loading = (function () {
    function Loading() {

    };
    Loading.value = new Loading();
    return Loading;
})();
var Done = (function () {
    function Done() {

    };
    Done.value = new Done();
    return Done;
})();
var GET = (function () {
    function GET() {

    };
    GET.value = new GET();
    return GET;
})();
var POST = (function () {
    function POST() {

    };
    POST.value = new POST();
    return POST;
})();
var PUT = (function () {
    function PUT() {

    };
    PUT.value = new PUT();
    return PUT;
})();
var DELETE = (function () {
    function DELETE() {

    };
    DELETE.value = new DELETE();
    return DELETE;
})();
var PATCH = (function () {
    function PATCH() {

    };
    PATCH.value = new PATCH();
    return PATCH;
})();
var HEAD = (function () {
    function HEAD() {

    };
    HEAD.value = new HEAD();
    return HEAD;
})();
var OPTIONS = (function () {
    function OPTIONS() {

    };
    OPTIONS.value = new OPTIONS();
    return OPTIONS;
})();
var JSONP = (function () {
    function JSONP() {

    };
    JSONP.value = new JSONP();
    return JSONP;
})();
var HttpMethod = (function () {
    function HttpMethod(value0) {
        this.value0 = value0;
    };
    HttpMethod.create = function (value0) {
        return new HttpMethod(value0);
    };
    return HttpMethod;
})();
var NoData = (function () {
    function NoData() {

    };
    NoData.value = new NoData();
    return NoData;
})();
var TextData = (function () {
    function TextData(value0) {
        this.value0 = value0;
    };
    TextData.create = function (value0) {
        return new TextData(value0);
    };
    return TextData;
})();
var ArrayBufferData = (function () {
    function ArrayBufferData(value0) {
        this.value0 = value0;
    };
    ArrayBufferData.create = function (value0) {
        return new ArrayBufferData(value0);
    };
    return ArrayBufferData;
})();
var ArrayBufferViewData = (function () {
    function ArrayBufferViewData(value0) {
        this.value0 = value0;
    };
    ArrayBufferViewData.create = function (value0) {
        return new ArrayBufferViewData(value0);
    };
    return ArrayBufferViewData;
})();
var BlobData = (function () {
    function BlobData(value0) {
        this.value0 = value0;
    };
    BlobData.create = function (value0) {
        return new BlobData(value0);
    };
    return BlobData;
})();
var FormData = (function () {
    function FormData(value0) {
        this.value0 = value0;
    };
    FormData.create = function (value0) {
        return new FormData(value0);
    };
    return FormData;
})();
var DocumentData = (function () {
    function DocumentData(value0) {
        this.value0 = value0;
    };
    DocumentData.create = function (value0) {
        return new DocumentData(value0);
    };
    return DocumentData;
})();
var JsonData = (function () {
    function JsonData(value0) {
        this.value0 = value0;
    };
    JsonData.create = function (value0) {
        return new JsonData(value0);
    };
    return JsonData;
})();
var showResponseType = new Prelude.Show(function (_178) {
    if (_178 instanceof Default) {
        return "";
    };
    if (_178 instanceof $$ArrayBuffer) {
        return "arraybuffer";
    };
    if (_178 instanceof Blob) {
        return "blob";
    };
    if (_178 instanceof Document) {
        return "document";
    };
    if (_178 instanceof Json) {
        return "json";
    };
    if (_178 instanceof Text) {
        return "text";
    };
    if (_178 instanceof MozBlob) {
        return "moz-blob";
    };
    if (_178 instanceof MozChunkedText) {
        return "moz-chunked-text";
    };
    if (_178 instanceof MozChunkedArrayBuffer) {
        return "moz-chunked-arraybuffer";
    };
    throw new Error("Failed pattern match");
});
var showHttpMethod = new Prelude.Show(function (_177) {
    if (_177 instanceof GET) {
        return "GET";
    };
    if (_177 instanceof POST) {
        return "POST";
    };
    if (_177 instanceof PUT) {
        return "PUT";
    };
    if (_177 instanceof DELETE) {
        return "DELETE";
    };
    if (_177 instanceof PATCH) {
        return "PATCH";
    };
    if (_177 instanceof HEAD) {
        return "HEAD";
    };
    if (_177 instanceof OPTIONS) {
        return "OPTIONS";
    };
    if (_177 instanceof JSONP) {
        return "JSONP";
    };
    if (_177 instanceof HttpMethod) {
        return _177.value0;
    };
    throw new Error("Failed pattern match");
});

/**
 *  XXX should be encoded
 */
var setResponseType = function (rt) {
    return function (x) {
        return Data_DOM_Simple_Unsafe_Ajax.unsafeSetResponseType(x, Prelude.show(showResponseType)(rt));
    };
};
var send = function (_175) {
    return function (_176) {
        if (_175 instanceof NoData) {
            return Data_DOM_Simple_Unsafe_Ajax.unsafeSend(_176);
        };
        if (_175 instanceof TextData) {
            return Data_DOM_Simple_Unsafe_Ajax.unsafeSendWithPayload(_176, _175.value0);
        };
        if (_175 instanceof ArrayBufferData) {
            return Data_DOM_Simple_Unsafe_Ajax.unsafeSendWithPayload(_176, _175.value0);
        };
        if (_175 instanceof ArrayBufferViewData) {
            return Data_DOM_Simple_Unsafe_Ajax.unsafeSendWithPayload(_176, _175.value0);
        };
        if (_175 instanceof BlobData) {
            return Data_DOM_Simple_Unsafe_Ajax.unsafeSendWithPayload(_176, _175.value0);
        };
        if (_175 instanceof DocumentData) {
            return Data_DOM_Simple_Unsafe_Ajax.unsafeSendWithPayload(_176, _175.value0);
        };
        if (_175 instanceof FormData) {
            return Data_DOM_Simple_Unsafe_Ajax.unsafeSendWithPayload(_176, _175.value0);
        };
        if (_175 instanceof JsonData) {
            return Data_DOM_Simple_Unsafe_Ajax.unsafeSendWithPayload(_176, _175.value0);
        };
        throw new Error("Failed pattern match");
    };
};
var responseType = function (obj) {
    return function __do() {
        var _7 = Data_DOM_Simple_Unsafe_Ajax.unsafeResponseType(obj)();
        if (_7 === "") {
            return Default.value;
        };
        if (_7 === "arraybuffer") {
            return $$ArrayBuffer.value;
        };
        if (_7 === "blob") {
            return Blob.value;
        };
        if (_7 === "document") {
            return Document.value;
        };
        if (_7 === "json") {
            return Json.value;
        };
        if (_7 === "text") {
            return Text.value;
        };
        if (_7 === "moz-blob") {
            return MozBlob.value;
        };
        if (_7 === "moz-chunked-test") {
            return MozChunkedText.value;
        };
        if (_7 === "moz-chunked-arraybuffer") {
            return MozChunkedArrayBuffer.value;
        };
        throw new Error("Failed pattern match");
    };
};
var response = function (x) {
    var get = function (t) {
        return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Function.runFn3(maybeFn)(NoData.value)(t))(Data_DOM_Simple_Unsafe_Ajax.unsafeResponse(x));
    };
    return function __do() {
        var _8 = responseType(x)();
        return (function () {
            if (_8 instanceof Default) {
                return get(TextData.create);
            };
            if (_8 instanceof $$ArrayBuffer) {
                return get(ArrayBufferData.create);
            };
            if (_8 instanceof Blob) {
                return get(BlobData.create);
            };
            if (_8 instanceof Document) {
                return get(DocumentData.create);
            };
            if (_8 instanceof Json) {
                return get(JsonData.create);
            };
            if (_8 instanceof Text) {
                return get(TextData.create);
            };
            if (_8 instanceof MozBlob) {
                return get(BlobData.create);
            };
            if (_8 instanceof MozChunkedText) {
                return get(TextData.create);
            };
            if (_8 instanceof MozChunkedArrayBuffer) {
                return get(ArrayBufferData.create);
            };
            throw new Error("Failed pattern match");
        })()();
    };
};
var readyState = function (x) {
    return function __do() {
        var _6 = Data_DOM_Simple_Unsafe_Ajax.unsafeReadyState(x)();
        if (_6 === 0) {
            return Unsent.value;
        };
        if (_6 === 1) {
            return Opened.value;
        };
        if (_6 === 2) {
            return HeadersReceived.value;
        };
        if (_6 === 3) {
            return Loading.value;
        };
        if (_6 === 4) {
            return Done.value;
        };
        throw new Error("Failed pattern match");
    };
};
var open = function (m) {
    return function (u) {
        return function (x) {
            return Data_DOM_Simple_Unsafe_Ajax.unsafeOpen(x, Prelude.show(showHttpMethod)(m), u);
        };
    };
};
var onReadyStateChange = function (f) {
    return function (x) {
        return Data_DOM_Simple_Unsafe_Ajax.unsafeOnReadyStateChange(x, f);
    };
};
var maybe = Data_Function.runFn3(maybeFn)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var getResponseHeader = function (k) {
    return function (x) {
        return Prelude["<$>"](Control_Monad_Eff.functorEff)(maybe)(Data_DOM_Simple_Unsafe_Ajax.unsafeGetResponseHeader(x, k));
    };
};
module.exports = {
    NoData: NoData, 
    TextData: TextData, 
    ArrayBufferData: ArrayBufferData, 
    ArrayBufferViewData: ArrayBufferViewData, 
    BlobData: BlobData, 
    FormData: FormData, 
    DocumentData: DocumentData, 
    JsonData: JsonData, 
    Default: Default, 
    "ArrayBuffer": $$ArrayBuffer, 
    Blob: Blob, 
    Document: Document, 
    Json: Json, 
    Text: Text, 
    MozBlob: MozBlob, 
    MozChunkedText: MozChunkedText, 
    MozChunkedArrayBuffer: MozChunkedArrayBuffer, 
    GET: GET, 
    POST: POST, 
    PUT: PUT, 
    DELETE: DELETE, 
    PATCH: PATCH, 
    HEAD: HEAD, 
    OPTIONS: OPTIONS, 
    JSONP: JSONP, 
    HttpMethod: HttpMethod, 
    Unsent: Unsent, 
    Opened: Opened, 
    HeadersReceived: HeadersReceived, 
    Loading: Loading, 
    Done: Done, 
    overrideMimeType: overrideMimeType, 
    getResponseHeader: getResponseHeader, 
    getAllResponseHeaders: getAllResponseHeaders, 
    setRequestHeader: setRequestHeader, 
    statusText: statusText, 
    status: status, 
    responseText: responseText, 
    response: response, 
    responseType: responseType, 
    setResponseType: setResponseType, 
    send: send, 
    open: open, 
    onReadyStateChange: onReadyStateChange, 
    readyState: readyState, 
    makeXMLHttpRequest: makeXMLHttpRequest, 
    showHttpMethod: showHttpMethod, 
    showResponseType: showResponseType
};
