-- Generated by psc-make version 0.6.8
module Halogen where
import Halogen.Signal ()
import Halogen.Internal.VirtualDOM ()
import Halogen.Component ()
import Prelude ()
import Control.Monad.Eff.Ref ()
import Halogen ()
import Control.Monad.Eff.Unsafe ()
import Halogen.HTML.Events.Monad ()
import Debug.Trace ()
import Control.Monad.Eff.Exception ()
import Halogen.HTML.Renderer.VirtualDOM ()
import Prim ()
import Prelude ()
import DOM ()
import Data.DOM.Simple.Types ()
import Data.Void ()
import Data.Maybe ()
import Data.Tuple ()
import Data.Either ()
import Data.Bifunctor ()
import Debug.Trace ()
import Control.Monad.Eff ()
import Control.Monad.Eff.Ref ()
import Control.Monad.Eff.Unsafe ()
import Control.Monad.Eff.Exception ()
import Halogen.HTML ()
import Halogen.HTML.Renderer.VirtualDOM ()
import Halogen.Signal ()
import Halogen.Component ()
import Halogen.HTML.Events.Monad ()
import Halogen.Internal.VirtualDOM ()
--  | Wraps the effects required by the `runUI` function.
--  | This type synonym is provided to tidy up the type signature of `runUI`.
--  |
--  | The _driver function_ can be used by the caller to inject additional inputs into the system at the top-level.
--  |
--  | This is useful for supporting applications which respond to external events which originate
--  | outside the UI, such as timers or hash-change events.
--  |
--  | For example, to drive the UI with a `Tick` input every second, we might write something like the following:
--  | 
--  | ```purescript
--  | main = do
--  |   Tuple node driver <- runUI ui
--  |   appendToBody node
--  |   setInterval 1000 $ driver Tick
--  | ```
--  | A signal which emits patches corresponding to successive `VTree`s.
--  |
--  | This function can be used to create alternative top-level handlers which use `virtual-dom`.
--  | Internal function used in the implementation of `runUI`.
--  | `runUI` renders a `Component` to the DOM using `virtual-dom`.
--  |
--  | This function is the workhorse of the Halogen library. It can be called in `main`
--  | to set up the application and create the driver function, which can be used to 
--  | send inputs to the UI from external components.
type Driver (i :: *) (eff :: # !) = i -> Control.Monad.Eff.Eff (Halogen.HalogenEffects eff) Prelude.Unit
type HalogenEffects (eff :: # !) = (dom :: DOM.DOM, ref :: Control.Monad.Eff.Ref.Ref, trace :: Debug.Trace.Trace | eff)
foreign import runUI :: forall req eff. Halogen.Component.Component (Halogen.Internal.VirtualDOM.Widget (Halogen.HalogenEffects eff) req) (Halogen.HTML.Events.Monad.Event (Halogen.HalogenEffects eff)) req req -> Control.Monad.Eff.Eff (Halogen.HalogenEffects eff) (Data.Tuple.Tuple Data.DOM.Simple.Types.HTMLElement (Halogen.Driver req eff))
foreign import changes :: Halogen.Internal.VirtualDOM.VTree -> Halogen.Signal.SF Halogen.Internal.VirtualDOM.VTree Halogen.Internal.VirtualDOM.Patch
