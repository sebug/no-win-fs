-- Generated by psc-make version 0.6.8
module Halogen.HTML.Events.Monad where
import Control.Monad.Aff ()
import Control.Monad.ListT ()
import Prelude ()
import Control.Apply ()
import Halogen.HTML.Events.Monad ()
import Control.Monad.Aff.Class ()
import Data.Monoid ()
import Control.Monad.Trans ()
import Control.Monad.Eff.Class ()
import Control.Alt ()
import Control.Plus ()
import Prim ()
import Prelude ()
import Data.Tuple ()
import Data.Maybe ()
import Data.Monoid ()
import Control.Apply ()
import Control.Alt ()
import Control.Plus ()
import Control.Alternative ()
import Control.MonadPlus ()
import Control.Monad.Trans ()
import Control.Monad.ListT ()
import Control.Monad.Eff ()
import Control.Monad.Eff.Class ()
import Control.Monad.Eff.Exception ()
import Control.Monad.Aff ()
import Control.Monad.Aff.Class ()
--  | The `Event` monad, which supports the asynchronous generation of events.
--  | 
--  | This monad is used in the definition of `runUI`.
--  | Unwrap the `Event` constructor.
--  | Run a computation in the `Event` monad by providing a callback function.
--  |
--  | The callback function will be invoked zero or more times.
--  | Lift an asynchronous computation into the `Event` monad.
--  | Yield an event. In practice, the event will be passed to the driver function.
--  | A combinator which branches based on the supplied function after the first result,
--  | and returns to the original stream of events after the secondary stream has been
--  | exhausted.
newtype Event (eff :: # !) (a :: *) = Event (Control.Monad.ListT.ListT (Control.Monad.Aff.Aff eff) a)
foreign import andThen :: forall eff a. Halogen.HTML.Events.Monad.Event eff a -> (a -> Halogen.HTML.Events.Monad.Event eff a) -> Halogen.HTML.Events.Monad.Event eff a
foreign import async :: forall eff a. Control.Monad.Aff.Aff eff a -> Halogen.HTML.Events.Monad.Event eff a
foreign import yield :: forall eff a. a -> Halogen.HTML.Events.Monad.Event eff a
foreign import runEvent :: forall eff a. (Control.Monad.Eff.Exception.Error -> Control.Monad.Eff.Eff eff Prelude.Unit) -> (a -> Control.Monad.Eff.Eff eff Prelude.Unit) -> Halogen.HTML.Events.Monad.Event eff a -> Control.Monad.Eff.Eff eff Prelude.Unit
foreign import unEvent :: forall eff a. Halogen.HTML.Events.Monad.Event eff a -> Control.Monad.ListT.ListT (Control.Monad.Aff.Aff eff) a
foreign import instance semigroupEvent :: Prelude.Semigroup (Halogen.HTML.Events.Monad.Event eff a)
foreign import instance monoidEvent :: Data.Monoid.Monoid (Halogen.HTML.Events.Monad.Event eff a)
foreign import instance functorEvent :: Prelude.Functor (Halogen.HTML.Events.Monad.Event eff)
foreign import instance applyEvent :: Prelude.Apply (Halogen.HTML.Events.Monad.Event eff)
foreign import instance applicativeEvent :: Prelude.Applicative (Halogen.HTML.Events.Monad.Event eff)
foreign import instance bindEvent :: Prelude.Bind (Halogen.HTML.Events.Monad.Event eff)
foreign import instance monadEvent :: Prelude.Monad (Halogen.HTML.Events.Monad.Event eff)
foreign import instance monadEffEvent :: Control.Monad.Eff.Class.MonadEff eff (Halogen.HTML.Events.Monad.Event eff)
foreign import instance monadAffEvent :: Control.Monad.Aff.Class.MonadAff eff (Halogen.HTML.Events.Monad.Event eff)
foreign import instance altEvent :: Control.Alt.Alt (Halogen.HTML.Events.Monad.Event eff)
foreign import instance plusEvent :: Control.Plus.Plus (Halogen.HTML.Events.Monad.Event eff)
foreign import instance alternativeEvent :: Control.Alternative.Alternative (Halogen.HTML.Events.Monad.Event eff)
foreign import instance monadPlusEvent :: Control.MonadPlus.MonadPlus (Halogen.HTML.Events.Monad.Event eff)
