-- Generated by psc-make version 0.6.8
module Data.Bifunctor.Wrap where
import Prelude ()
import Data.Bifunctor ()
import Data.Bifunctor.Wrap ()
import Control.Biapply ()
import Control.Biapplicative ()
import Data.Bifoldable ()
import Data.Monoid ()
import Data.Bitraversable ()
import Data.Traversable ()
import Prim ()
import Prelude ()
import Data.Bifoldable ()
import Data.Bifunctor ()
import Data.Bitraversable ()
import Data.Foldable ()
import Data.Monoid ()
import Data.Traversable ()
import Control.Apply ()
import Control.Biapplicative ()
import Control.Biapply ()
--  | A `newtype` wrapper which provides default `Functor`, `Foldable` and `Traversable`
--  | type class instances for `Bifunctor`s.
--  | Remove the `Wrap` constructor.
data Wrap (p :: * -> * -> *) (a :: *) (b :: *) = Wrap (p a b)
foreign import unwrap :: forall p a b. Data.Bifunctor.Wrap.Wrap p a b -> p a b
foreign import instance wrapBifunctor :: (Data.Bifunctor.Bifunctor p) => Data.Bifunctor.Bifunctor (Data.Bifunctor.Wrap.Wrap p)
foreign import instance wrapFunctor :: (Data.Bifunctor.Bifunctor p) => Prelude.Functor (Data.Bifunctor.Wrap.Wrap p a)
foreign import instance wrapBiapply :: (Control.Biapply.Biapply p) => Control.Biapply.Biapply (Data.Bifunctor.Wrap.Wrap p)
foreign import instance wrapBiapplicative :: (Control.Biapplicative.Biapplicative p) => Control.Biapplicative.Biapplicative (Data.Bifunctor.Wrap.Wrap p)
foreign import instance wrapBifoldable :: (Data.Bifoldable.Bifoldable p) => Data.Bifoldable.Bifoldable (Data.Bifunctor.Wrap.Wrap p)
foreign import instance wrapFoldable :: (Data.Bifoldable.Bifoldable p) => Data.Foldable.Foldable (Data.Bifunctor.Wrap.Wrap p a)
foreign import instance wrapBitraversable :: (Data.Bitraversable.Bitraversable p) => Data.Bitraversable.Bitraversable (Data.Bifunctor.Wrap.Wrap p)
foreign import instance wrapTraversable :: (Data.Bitraversable.Bitraversable p) => Data.Traversable.Traversable (Data.Bifunctor.Wrap.Wrap p a)
