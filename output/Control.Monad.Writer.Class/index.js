// Generated by psc-make version 0.6.8

/**
 *  | This module defines the `MonadWriter` type class and its instances.
 */
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Writer_Trans = require("Control.Monad.Writer.Trans");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_Error_Trans = require("Control.Monad.Error.Trans");
var Control_Monad_Maybe_Trans = require("Control.Monad.Maybe.Trans");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Control_Monad_Reader_Trans = require("Control.Monad.Reader.Trans");
var Control_Monad_RWS = require("Control.Monad.RWS");
var Control_Monad_Error = require("Control.Monad.Error");
var Control_Monad_RWS_Trans = require("Control.Monad.RWS.Trans");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");

/**
 *  | The `MonadWriter w` type class represents those monads which support a monoidal accumulator
 *  | of type `w`.
 *  |
 *  | - `writer` appends a value to the accumulator.
 *  | - `listen` modifies the result to include the changes to the accumulator.
 *  | - `pass` applies the returned function to the accumulator.
 *  |
 *  | An implementation is provided for `WriterT`, and for other monad transformers
 *  | defined in this library.
 *  |
 *  | Laws:
 *  |
 *  | - `writer a mempty = pure a`
 *  | - `do { tell x ; tell y } = tell (x <> y)`
 *  | - `listen (pure a) = pure (Tuple a mempty)`
 *  | - `listen (writer a x) = tell x $> Tuple a x`
 *  |
 */
var MonadWriter = function (listen, pass, writer) {
    this.listen = listen;
    this.pass = pass;
    this.writer = writer;
};

/**
 *  | The `MonadWriter w` type class represents those monads which support a monoidal accumulator
 *  | of type `w`.
 *  |
 *  | - `writer` appends a value to the accumulator.
 *  | - `listen` modifies the result to include the changes to the accumulator.
 *  | - `pass` applies the returned function to the accumulator.
 *  |
 *  | An implementation is provided for `WriterT`, and for other monad transformers
 *  | defined in this library.
 *  |
 *  | Laws:
 *  |
 *  | - `writer a mempty = pure a`
 *  | - `do { tell x ; tell y } = tell (x <> y)`
 *  | - `listen (pure a) = pure (Tuple a mempty)`
 *  | - `listen (writer a x) = tell x $> Tuple a x`
 *  |
 */
var writer = function (dict) {
    return dict.writer;
};

/**
 *  | Append a value to the accumulator.
 */
var tell = function (__dict_Monoid_0) {
    return function (__dict_Monad_1) {
        return function (__dict_MonadWriter_2) {
            return function (w) {
                return writer(__dict_MonadWriter_2)(new Data_Tuple.Tuple(Prelude.unit, w));
            };
        };
    };
};

/**
 *  | The `MonadWriter w` type class represents those monads which support a monoidal accumulator
 *  | of type `w`.
 *  |
 *  | - `writer` appends a value to the accumulator.
 *  | - `listen` modifies the result to include the changes to the accumulator.
 *  | - `pass` applies the returned function to the accumulator.
 *  |
 *  | An implementation is provided for `WriterT`, and for other monad transformers
 *  | defined in this library.
 *  |
 *  | Laws:
 *  |
 *  | - `writer a mempty = pure a`
 *  | - `do { tell x ; tell y } = tell (x <> y)`
 *  | - `listen (pure a) = pure (Tuple a mempty)`
 *  | - `listen (writer a x) = tell x $> Tuple a x`
 *  |
 */
var pass = function (dict) {
    return dict.pass;
};
var monadWriterWriterT = function (__dict_Monoid_3) {
    return function (__dict_Monad_4) {
        return new MonadWriter(function (m) {
            return Control_Monad_Writer_Trans.WriterT(Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Trans.runWriterT(m))(function (_41) {
                return Prelude["return"](__dict_Monad_4)(new Data_Tuple.Tuple(new Data_Tuple.Tuple(_41.value0, _41.value1), _41.value1));
            }));
        }, function (m) {
            return Control_Monad_Writer_Trans.WriterT(Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Trans.runWriterT(m))(function (_42) {
                return Prelude["return"](__dict_Monad_4)(new Data_Tuple.Tuple(_42.value0.value0, _42.value0.value1(_42.value1)));
            }));
        }, Prelude["<<<"](Prelude.semigroupoidArr)(Control_Monad_Writer_Trans.WriterT)(Prelude["return"](__dict_Monad_4)));
    };
};
var monadWriterRWST = function (__dict_Monad_5) {
    return function (__dict_Monoid_6) {
        return new MonadWriter(Control_Monad_RWS.listen(__dict_Monad_5), Control_Monad_RWS.pass(__dict_Monad_5), Control_Monad_RWS.writer(__dict_Monad_5["__superclass_Prelude.Applicative_0"]()));
    };
};

/**
 *  | The `MonadWriter w` type class represents those monads which support a monoidal accumulator
 *  | of type `w`.
 *  |
 *  | - `writer` appends a value to the accumulator.
 *  | - `listen` modifies the result to include the changes to the accumulator.
 *  | - `pass` applies the returned function to the accumulator.
 *  |
 *  | An implementation is provided for `WriterT`, and for other monad transformers
 *  | defined in this library.
 *  |
 *  | Laws:
 *  |
 *  | - `writer a mempty = pure a`
 *  | - `do { tell x ; tell y } = tell (x <> y)`
 *  | - `listen (pure a) = pure (Tuple a mempty)`
 *  | - `listen (writer a x) = tell x $> Tuple a x`
 *  |
 */
var listen = function (dict) {
    return dict.listen;
};

/**
 *  | Read a value which depends on the modifications made to the accumulator during an action.
 */
var listens = function (__dict_Monoid_7) {
    return function (__dict_Monad_8) {
        return function (__dict_MonadWriter_9) {
            return function (f) {
                return function (m) {
                    return Prelude[">>="](__dict_Monad_8["__superclass_Prelude.Bind_1"]())(listen(__dict_MonadWriter_9)(m))(function (_39) {
                        return Prelude["return"](__dict_Monad_8)(new Data_Tuple.Tuple(_39.value0, f(_39.value1)));
                    });
                };
            };
        };
    };
};
var monadWriterErrorT = function (__dict_Monad_10) {
    return function (__dict_MonadWriter_11) {
        return new MonadWriter(Control_Monad_Error_Trans.liftListenError(__dict_Monad_10)(listen(__dict_MonadWriter_11)), Control_Monad_Error_Trans.liftPassError(__dict_Monad_10)(pass(__dict_MonadWriter_11)), function (wd) {
            return Control_Monad_Trans.lift(Control_Monad_Error_Trans.monadTransErrorT)(__dict_Monad_10)(writer(__dict_MonadWriter_11)(wd));
        });
    };
};
var monadWriterMaybeT = function (__dict_Monad_12) {
    return function (__dict_MonadWriter_13) {
        return new MonadWriter(Control_Monad_Maybe_Trans.liftListenMaybe(__dict_Monad_12)(listen(__dict_MonadWriter_13)), Control_Monad_Maybe_Trans.liftPassMaybe(__dict_Monad_12)(pass(__dict_MonadWriter_13)), function (wd) {
            return Control_Monad_Trans.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(__dict_Monad_12)(writer(__dict_MonadWriter_13)(wd));
        });
    };
};
var monadWriterReaderT = function (__dict_Monad_14) {
    return function (__dict_MonadWriter_15) {
        return new MonadWriter(Control_Monad_Reader_Trans.mapReaderT(listen(__dict_MonadWriter_15)), Control_Monad_Reader_Trans.mapReaderT(pass(__dict_MonadWriter_15)), function (wd) {
            return Control_Monad_Trans.lift(Control_Monad_Reader_Trans.monadTransReaderT)(__dict_Monad_14)(writer(__dict_MonadWriter_15)(wd));
        });
    };
};
var monadWriterStateT = function (__dict_Monad_16) {
    return function (__dict_MonadWriter_17) {
        return new MonadWriter(Control_Monad_State_Trans.liftListenState(__dict_Monad_16)(listen(__dict_MonadWriter_17)), Control_Monad_State_Trans.liftPassState(__dict_Monad_16)(pass(__dict_MonadWriter_17)), function (wd) {
            return Control_Monad_Trans.lift(Control_Monad_State_Trans.monadTransStateT)(__dict_Monad_16)(writer(__dict_MonadWriter_17)(wd));
        });
    };
};

/**
 *  | Modify the final accumulator value by applying a function.
 */
var censor = function (__dict_Monoid_18) {
    return function (__dict_Monad_19) {
        return function (__dict_MonadWriter_20) {
            return function (f) {
                return function (m) {
                    return pass(__dict_MonadWriter_20)(Prelude[">>="](__dict_Monad_19["__superclass_Prelude.Bind_1"]())(m)(function (_40) {
                        return Prelude["return"](__dict_Monad_19)(new Data_Tuple.Tuple(_40, f));
                    }));
                };
            };
        };
    };
};
module.exports = {
    MonadWriter: MonadWriter, 
    censor: censor, 
    listens: listens, 
    tell: tell, 
    pass: pass, 
    listen: listen, 
    writer: writer, 
    monadWriterWriterT: monadWriterWriterT, 
    monadWriterErrorT: monadWriterErrorT, 
    monadWriterMaybeT: monadWriterMaybeT, 
    monadWriterStateT: monadWriterStateT, 
    monadWriterReaderT: monadWriterReaderT, 
    monadWriterRWST: monadWriterRWST
};
