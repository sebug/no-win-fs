// Generated by psc-make version 0.6.8

/**
 *  | This module defines the HTML types required by the Halogen library, and provides
 *  | smart constructors for HTML5 elements.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Monoid = require("Data.Monoid");
var Data_Void = require("Data.Void");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Data_Foreign = require("Data.Foreign");
var Data_Function = require("Data.Function");
var Data_StrMap = require("Data.StrMap");
var Data_String = require("Data.String");
var Data_Foldable = require("Data.Foldable");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Unsafe = require("Control.Monad.Eff.Unsafe");
var Control_Monad_ST = require("Control.Monad.ST");
var Halogen_Internal_VirtualDOM = require("Halogen.Internal.VirtualDOM");
var Halogen_HTML_Attributes = require("Halogen.HTML.Attributes");
var Data_Array = require("Data.Array");

/**
 *  | A type-safe wrapper for a HTML tag name
 */
var TagName = function (x) {
    return x;
};

/**
 *  | An initial encoding of HTML nodes.
 */
var Text = (function () {
    function Text(value0) {
        this.value0 = value0;
    };
    Text.create = function (value0) {
        return new Text(value0);
    };
    return Text;
})();

/**
 *  | An initial encoding of HTML nodes.
 */
var Element = (function () {
    function Element(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Element.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Element(value0, value1, value2);
            };
        };
    };
    return Element;
})();

/**
 *  | An initial encoding of HTML nodes.
 */
var Placeholder = (function () {
    function Placeholder(value0) {
        this.value0 = value0;
    };
    Placeholder.create = function (value0) {
        return new Placeholder(value0);
    };
    return Placeholder;
})();
var text = Text.create;

/**
 *  | Create a tag name
 */
var tagName = TagName;
var placeholder = Placeholder.create;
var element = Element.create;
var em = element(tagName("em"));
var em_ = em(Data_Monoid.mempty(Data_Monoid.monoidArray));
var embed = function (xs) {
    return element(tagName("embed"))(xs);
};
var embed_ = embed(Data_Monoid.mempty(Data_Monoid.monoidArray));
var fieldset = function (xs) {
    return element(tagName("fieldset"))(xs);
};
var fieldset_ = fieldset(Data_Monoid.mempty(Data_Monoid.monoidArray));
var figcaption = function (xs) {
    return element(tagName("figcaption"))(xs);
};
var figcaption_ = figcaption(Data_Monoid.mempty(Data_Monoid.monoidArray));
var figure = function (xs) {
    return element(tagName("figure"))(xs);
};
var figure_ = figure(Data_Monoid.mempty(Data_Monoid.monoidArray));
var font = function (xs) {
    return element(tagName("font"))(xs);
};
var font_ = font(Data_Monoid.mempty(Data_Monoid.monoidArray));
var footer = function (xs) {
    return element(tagName("footer"))(xs);
};
var footer_ = footer(Data_Monoid.mempty(Data_Monoid.monoidArray));
var form = function (xs) {
    return element(tagName("form"))(xs);
};
var form_ = form(Data_Monoid.mempty(Data_Monoid.monoidArray));
var frame = function (xs) {
    return element(tagName("frame"))(xs);
};
var frame_ = frame(Data_Monoid.mempty(Data_Monoid.monoidArray));
var frameset = function (xs) {
    return element(tagName("frameset"))(xs);
};
var frameset_ = frameset(Data_Monoid.mempty(Data_Monoid.monoidArray));
var h1 = function (xs) {
    return element(tagName("h1"))(xs);
};
var h1_ = h1(Data_Monoid.mempty(Data_Monoid.monoidArray));
var h2 = function (xs) {
    return element(tagName("h2"))(xs);
};
var h2_ = h2(Data_Monoid.mempty(Data_Monoid.monoidArray));
var h3 = function (xs) {
    return element(tagName("h3"))(xs);
};
var h3_ = h3(Data_Monoid.mempty(Data_Monoid.monoidArray));
var h4 = function (xs) {
    return element(tagName("h4"))(xs);
};
var h4_ = h4(Data_Monoid.mempty(Data_Monoid.monoidArray));
var h5 = function (xs) {
    return element(tagName("h5"))(xs);
};
var h5_ = h5(Data_Monoid.mempty(Data_Monoid.monoidArray));
var h6 = function (xs) {
    return element(tagName("h6"))(xs);
};
var h6_ = h6(Data_Monoid.mempty(Data_Monoid.monoidArray));
var head = function (xs) {
    return element(tagName("head"))(xs);
};
var head_ = head(Data_Monoid.mempty(Data_Monoid.monoidArray));
var header = function (xs) {
    return element(tagName("header"))(xs);
};
var header_ = header(Data_Monoid.mempty(Data_Monoid.monoidArray));
var hr = function (xs) {
    return element(tagName("hr"))(xs);
};
var hr_ = hr(Data_Monoid.mempty(Data_Monoid.monoidArray));
var html = function (xs) {
    return element(tagName("html"))(xs);
};
var html_ = html(Data_Monoid.mempty(Data_Monoid.monoidArray));
var i = function (xs) {
    return element(tagName("i"))(xs);
};
var i_ = i(Data_Monoid.mempty(Data_Monoid.monoidArray));
var iframe = function (xs) {
    return element(tagName("iframe"))(xs);
};
var iframe_ = iframe(Data_Monoid.mempty(Data_Monoid.monoidArray));
var img = function (xs) {
    return element(tagName("img"))(xs);
};
var img_ = img(Data_Monoid.mempty(Data_Monoid.monoidArray));
var input = function (xs) {
    return element(tagName("input"))(xs);
};
var input_ = input(Data_Monoid.mempty(Data_Monoid.monoidArray));
var ins = function (xs) {
    return element(tagName("ins"))(xs);
};
var ins_ = ins(Data_Monoid.mempty(Data_Monoid.monoidArray));
var kbd = function (xs) {
    return element(tagName("kbd"))(xs);
};
var kbd_ = kbd(Data_Monoid.mempty(Data_Monoid.monoidArray));
var keygen = function (xs) {
    return element(tagName("keygen"))(xs);
};
var keygen_ = keygen(Data_Monoid.mempty(Data_Monoid.monoidArray));
var label = function (xs) {
    return element(tagName("label"))(xs);
};
var label_ = label(Data_Monoid.mempty(Data_Monoid.monoidArray));
var legend = function (xs) {
    return element(tagName("legend"))(xs);
};
var legend_ = legend(Data_Monoid.mempty(Data_Monoid.monoidArray));
var li = function (xs) {
    return element(tagName("li"))(xs);
};
var li_ = li(Data_Monoid.mempty(Data_Monoid.monoidArray));
var link = function (xs) {
    return element(tagName("link"))(xs);
};
var link_ = link(Data_Monoid.mempty(Data_Monoid.monoidArray));
var main = function (xs) {
    return element(tagName("main"))(xs);
};
var main_ = main(Data_Monoid.mempty(Data_Monoid.monoidArray));
var map = function (xs) {
    return element(tagName("map"))(xs);
};
var map_ = map(Data_Monoid.mempty(Data_Monoid.monoidArray));
var mark = function (xs) {
    return element(tagName("mark"))(xs);
};
var mark_ = mark(Data_Monoid.mempty(Data_Monoid.monoidArray));
var menu = function (xs) {
    return element(tagName("menu"))(xs);
};
var menu_ = menu(Data_Monoid.mempty(Data_Monoid.monoidArray));
var menuitem = function (xs) {
    return element(tagName("menuitem"))(xs);
};
var menuitem_ = menuitem(Data_Monoid.mempty(Data_Monoid.monoidArray));
var meta = function (xs) {
    return element(tagName("meta"))(xs);
};
var meta_ = meta(Data_Monoid.mempty(Data_Monoid.monoidArray));
var meter = function (xs) {
    return element(tagName("meter"))(xs);
};
var meter_ = meter(Data_Monoid.mempty(Data_Monoid.monoidArray));
var nav = function (xs) {
    return element(tagName("nav"))(xs);
};
var nav_ = nav(Data_Monoid.mempty(Data_Monoid.monoidArray));
var noframes = function (xs) {
    return element(tagName("noframes"))(xs);
};
var noframes_ = noframes(Data_Monoid.mempty(Data_Monoid.monoidArray));
var noscript = function (xs) {
    return element(tagName("noscript"))(xs);
};
var noscript_ = noscript(Data_Monoid.mempty(Data_Monoid.monoidArray));
var object = function (xs) {
    return element(tagName("object"))(xs);
};
var object_ = object(Data_Monoid.mempty(Data_Monoid.monoidArray));
var ol = function (xs) {
    return element(tagName("ol"))(xs);
};
var ol_ = ol(Data_Monoid.mempty(Data_Monoid.monoidArray));
var optgroup = function (xs) {
    return element(tagName("optgroup"))(xs);
};
var optgroup_ = optgroup(Data_Monoid.mempty(Data_Monoid.monoidArray));
var option = function (xs) {
    return element(tagName("option"))(xs);
};
var option_ = option(Data_Monoid.mempty(Data_Monoid.monoidArray));
var output = function (xs) {
    return element(tagName("output"))(xs);
};
var output_ = output(Data_Monoid.mempty(Data_Monoid.monoidArray));
var p = function (xs) {
    return element(tagName("p"))(xs);
};
var p_ = p(Data_Monoid.mempty(Data_Monoid.monoidArray));
var param = function (xs) {
    return element(tagName("param"))(xs);
};
var param_ = param(Data_Monoid.mempty(Data_Monoid.monoidArray));
var pre = function (xs) {
    return element(tagName("pre"))(xs);
};
var pre_ = pre(Data_Monoid.mempty(Data_Monoid.monoidArray));
var progress = function (xs) {
    return element(tagName("progress"))(xs);
};
var progress_ = progress(Data_Monoid.mempty(Data_Monoid.monoidArray));
var q = function (xs) {
    return element(tagName("q"))(xs);
};
var q_ = q(Data_Monoid.mempty(Data_Monoid.monoidArray));
var rp = function (xs) {
    return element(tagName("rp"))(xs);
};
var rp_ = rp(Data_Monoid.mempty(Data_Monoid.monoidArray));
var rt = function (xs) {
    return element(tagName("rt"))(xs);
};
var rt_ = rt(Data_Monoid.mempty(Data_Monoid.monoidArray));
var ruby = function (xs) {
    return element(tagName("ruby"))(xs);
};
var ruby_ = ruby(Data_Monoid.mempty(Data_Monoid.monoidArray));
var s = function (xs) {
    return element(tagName("s"))(xs);
};

/**
 *  | Unwrap a `TagName` to get the tag name as a `String`.
 */
var runTagName = function (_945) {
    return _945;
};
var s_ = s(Data_Monoid.mempty(Data_Monoid.monoidArray));
var samp = function (xs) {
    return element(tagName("samp"))(xs);
};
var samp_ = samp(Data_Monoid.mempty(Data_Monoid.monoidArray));
var script = function (xs) {
    return element(tagName("script"))(xs);
};
var script_ = script(Data_Monoid.mempty(Data_Monoid.monoidArray));
var section = function (xs) {
    return element(tagName("section"))(xs);
};
var section_ = section(Data_Monoid.mempty(Data_Monoid.monoidArray));
var select = function (xs) {
    return element(tagName("select"))(xs);
};
var select_ = select(Data_Monoid.mempty(Data_Monoid.monoidArray));
var small = function (xs) {
    return element(tagName("small"))(xs);
};
var small_ = small(Data_Monoid.mempty(Data_Monoid.monoidArray));
var source = function (xs) {
    return element(tagName("source"))(xs);
};
var source_ = source(Data_Monoid.mempty(Data_Monoid.monoidArray));
var span = function (xs) {
    return element(tagName("span"))(xs);
};
var span_ = span(Data_Monoid.mempty(Data_Monoid.monoidArray));
var strike = function (xs) {
    return element(tagName("strike"))(xs);
};
var strike_ = strike(Data_Monoid.mempty(Data_Monoid.monoidArray));
var strong = function (xs) {
    return element(tagName("strong"))(xs);
};
var strong_ = strong(Data_Monoid.mempty(Data_Monoid.monoidArray));
var style = function (xs) {
    return element(tagName("style"))(xs);
};
var style_ = style(Data_Monoid.mempty(Data_Monoid.monoidArray));
var sub = function (xs) {
    return element(tagName("sub"))(xs);
};
var sub_ = sub(Data_Monoid.mempty(Data_Monoid.monoidArray));
var summary = function (xs) {
    return element(tagName("summary"))(xs);
};
var summary_ = summary(Data_Monoid.mempty(Data_Monoid.monoidArray));
var sup = function (xs) {
    return element(tagName("sup"))(xs);
};
var sup_ = sup(Data_Monoid.mempty(Data_Monoid.monoidArray));
var table = function (xs) {
    return element(tagName("table"))(xs);
};
var table_ = table(Data_Monoid.mempty(Data_Monoid.monoidArray));
var tbody = function (xs) {
    return element(tagName("tbody"))(xs);
};
var tbody_ = tbody(Data_Monoid.mempty(Data_Monoid.monoidArray));
var td = function (xs) {
    return element(tagName("td"))(xs);
};
var td_ = td(Data_Monoid.mempty(Data_Monoid.monoidArray));
var textarea = function (xs) {
    return element(tagName("textarea"))(xs);
};
var textarea_ = textarea(Data_Monoid.mempty(Data_Monoid.monoidArray));
var tfoot = function (xs) {
    return element(tagName("tfoot"))(xs);
};
var tfoot_ = tfoot(Data_Monoid.mempty(Data_Monoid.monoidArray));
var th = function (xs) {
    return element(tagName("th"))(xs);
};
var th_ = th(Data_Monoid.mempty(Data_Monoid.monoidArray));
var thead = function (xs) {
    return element(tagName("thead"))(xs);
};
var thead_ = thead(Data_Monoid.mempty(Data_Monoid.monoidArray));
var time = function (xs) {
    return element(tagName("time"))(xs);
};
var time_ = time(Data_Monoid.mempty(Data_Monoid.monoidArray));
var title = function (xs) {
    return element(tagName("title"))(xs);
};
var title_ = title(Data_Monoid.mempty(Data_Monoid.monoidArray));
var tr = function (xs) {
    return element(tagName("tr"))(xs);
};
var tr_ = tr(Data_Monoid.mempty(Data_Monoid.monoidArray));
var track = function (xs) {
    return element(tagName("track"))(xs);
};
var track_ = track(Data_Monoid.mempty(Data_Monoid.monoidArray));
var tt = function (xs) {
    return element(tagName("tt"))(xs);
};
var tt_ = tt(Data_Monoid.mempty(Data_Monoid.monoidArray));
var u = function (xs) {
    return element(tagName("u"))(xs);
};
var u_ = u(Data_Monoid.mempty(Data_Monoid.monoidArray));
var ul = function (xs) {
    return element(tagName("ul"))(xs);
};
var ul_ = ul(Data_Monoid.mempty(Data_Monoid.monoidArray));
var $$var = function (xs) {
    return element(tagName("var"))(xs);
};
var var_ = $$var(Data_Monoid.mempty(Data_Monoid.monoidArray));
var video = function (xs) {
    return element(tagName("video"))(xs);
};
var video_ = video(Data_Monoid.mempty(Data_Monoid.monoidArray));
var wbr = function (xs) {
    return element(tagName("wbr"))(xs);
};
var wbr_ = wbr(Data_Monoid.mempty(Data_Monoid.monoidArray));
var dt = function (xs) {
    return element(tagName("dt"))(xs);
};
var dt_ = dt(Data_Monoid.mempty(Data_Monoid.monoidArray));
var dl = function (xs) {
    return element(tagName("dl"))(xs);
};
var dl_ = dl(Data_Monoid.mempty(Data_Monoid.monoidArray));
var div = function (xs) {
    return element(tagName("div"))(xs);
};
var div_ = div(Data_Monoid.mempty(Data_Monoid.monoidArray));
var dir = function (xs) {
    return element(tagName("dir"))(xs);
};
var dir_ = dir(Data_Monoid.mempty(Data_Monoid.monoidArray));
var dialog = function (xs) {
    return element(tagName("dialog"))(xs);
};
var dialog_ = dialog(Data_Monoid.mempty(Data_Monoid.monoidArray));
var dfn = function (xs) {
    return element(tagName("dfn"))(xs);
};
var dfn_ = dfn(Data_Monoid.mempty(Data_Monoid.monoidArray));
var details = function (xs) {
    return element(tagName("details"))(xs);
};
var details_ = details(Data_Monoid.mempty(Data_Monoid.monoidArray));
var del = function (xs) {
    return element(tagName("del"))(xs);
};
var del_ = del(Data_Monoid.mempty(Data_Monoid.monoidArray));
var dd = function (xs) {
    return element(tagName("dd"))(xs);
};
var dd_ = dd(Data_Monoid.mempty(Data_Monoid.monoidArray));
var datalist = function (xs) {
    return element(tagName("datalist"))(xs);
};
var datalist_ = datalist(Data_Monoid.mempty(Data_Monoid.monoidArray));
var colgroup = function (xs) {
    return element(tagName("colgroup"))(xs);
};
var colgroup_ = colgroup(Data_Monoid.mempty(Data_Monoid.monoidArray));
var col = function (xs) {
    return element(tagName("col"))(xs);
};
var col_ = col(Data_Monoid.mempty(Data_Monoid.monoidArray));
var code = function (xs) {
    return element(tagName("code"))(xs);
};
var code_ = code(Data_Monoid.mempty(Data_Monoid.monoidArray));
var cite = function (xs) {
    return element(tagName("cite"))(xs);
};
var cite_ = cite(Data_Monoid.mempty(Data_Monoid.monoidArray));
var center = function (xs) {
    return element(tagName("center"))(xs);
};
var center_ = center(Data_Monoid.mempty(Data_Monoid.monoidArray));
var caption = function (xs) {
    return element(tagName("caption"))(xs);
};
var caption_ = caption(Data_Monoid.mempty(Data_Monoid.monoidArray));
var canvas = function (xs) {
    return element(tagName("canvas"))(xs);
};
var canvas_ = canvas(Data_Monoid.mempty(Data_Monoid.monoidArray));
var button = function (xs) {
    return element(tagName("button"))(xs);
};
var button_ = button(Data_Monoid.mempty(Data_Monoid.monoidArray));
var br = function (xs) {
    return element(tagName("br"))(xs);
};
var br_ = br(Data_Monoid.mempty(Data_Monoid.monoidArray));
var body = function (xs) {
    return element(tagName("body"))(xs);
};
var body_ = body(Data_Monoid.mempty(Data_Monoid.monoidArray));
var blockquote = function (xs) {
    return element(tagName("blockquote"))(xs);
};
var blockquote_ = blockquote(Data_Monoid.mempty(Data_Monoid.monoidArray));
var big = function (xs) {
    return element(tagName("big"))(xs);
};
var big_ = big(Data_Monoid.mempty(Data_Monoid.monoidArray));
var bifunctorHTML = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        var go = function (_948) {
            if (_948 instanceof Text) {
                return new Text(_948.value0);
            };
            if (_948 instanceof Element) {
                return new Element(_948.value0, Prelude["<$>"](Data_Array.functorArray)(Prelude["<$>"](Halogen_HTML_Attributes.functorAttr)(g))(_948.value1), Prelude["<$>"](Data_Array.functorArray)(go)(_948.value2));
            };
            if (_948 instanceof Placeholder) {
                return new Placeholder(f(_948.value0));
            };
            throw new Error("Failed pattern match");
        };
        return go;
    };
});
var functorHTML = new Prelude.Functor(Data_Bifunctor.rmap(bifunctorHTML));
var bdo = function (xs) {
    return element(tagName("bdo"))(xs);
};
var bdo_ = bdo(Data_Monoid.mempty(Data_Monoid.monoidArray));
var bdi = function (xs) {
    return element(tagName("bdi"))(xs);
};
var bdi_ = bdi(Data_Monoid.mempty(Data_Monoid.monoidArray));
var basefont = function (xs) {
    return element(tagName("basefont"))(xs);
};
var basefont_ = basefont(Data_Monoid.mempty(Data_Monoid.monoidArray));
var base = function (xs) {
    return element(tagName("base"))(xs);
};
var base_ = base(Data_Monoid.mempty(Data_Monoid.monoidArray));
var b = function (xs) {
    return element(tagName("b"))(xs);
};
var b_ = b(Data_Monoid.mempty(Data_Monoid.monoidArray));
var audio = function (xs) {
    return element(tagName("audio"))(xs);
};
var audio_ = audio(Data_Monoid.mempty(Data_Monoid.monoidArray));
var aside = function (xs) {
    return element(tagName("aside"))(xs);
};
var aside_ = aside(Data_Monoid.mempty(Data_Monoid.monoidArray));
var article = function (xs) {
    return element(tagName("article"))(xs);
};
var article_ = article(Data_Monoid.mempty(Data_Monoid.monoidArray));
var area = function (xs) {
    return element(tagName("area"))(xs);
};
var area_ = area(Data_Monoid.mempty(Data_Monoid.monoidArray));
var applet = function (xs) {
    return element(tagName("applet"))(xs);
};
var applet_ = applet(Data_Monoid.mempty(Data_Monoid.monoidArray));
var address = function (xs) {
    return element(tagName("address"))(xs);
};
var address_ = address(Data_Monoid.mempty(Data_Monoid.monoidArray));
var acronym = function (xs) {
    return element(tagName("acronym"))(xs);
};
var acronym_ = acronym(Data_Monoid.mempty(Data_Monoid.monoidArray));
var abbr = function (xs) {
    return element(tagName("abbr"))(xs);
};
var abbr_ = abbr(Data_Monoid.mempty(Data_Monoid.monoidArray));
var a = function (xs) {
    return element(tagName("a"))(xs);
};
var a_ = a(Data_Monoid.mempty(Data_Monoid.monoidArray));

/**
 *  | Replace placeholder nodes with HTML documents.
 */
var graft = function (_946) {
    return function (_947) {
        if (_946 instanceof Placeholder) {
            return _947(_946.value0);
        };
        if (_946 instanceof Element) {
            return new Element(_946.value0, _946.value1, Prelude["<$>"](Data_Array.functorArray)(function (_0) {
                return graft(_0)(_947);
            })(_946.value2));
        };
        if (_946 instanceof Text) {
            return new Text(_946.value0);
        };
        throw new Error("Failed pattern match");
    };
};
module.exports = {
    Text: Text, 
    Element: Element, 
    Placeholder: Placeholder, 
    wbr_: wbr_, 
    wbr: wbr, 
    video_: video_, 
    video: video, 
    var_: var_, 
    "var": $$var, 
    ul_: ul_, 
    ul: ul, 
    u_: u_, 
    u: u, 
    tt_: tt_, 
    tt: tt, 
    track_: track_, 
    track: track, 
    tr_: tr_, 
    tr: tr, 
    title_: title_, 
    title: title, 
    time_: time_, 
    time: time, 
    thead_: thead_, 
    thead: thead, 
    th_: th_, 
    th: th, 
    tfoot_: tfoot_, 
    tfoot: tfoot, 
    textarea_: textarea_, 
    textarea: textarea, 
    td_: td_, 
    td: td, 
    tbody_: tbody_, 
    tbody: tbody, 
    table_: table_, 
    table: table, 
    sup_: sup_, 
    sup: sup, 
    summary_: summary_, 
    summary: summary, 
    sub_: sub_, 
    sub: sub, 
    style_: style_, 
    style: style, 
    strong_: strong_, 
    strong: strong, 
    strike_: strike_, 
    strike: strike, 
    span_: span_, 
    span: span, 
    source_: source_, 
    source: source, 
    small_: small_, 
    small: small, 
    select_: select_, 
    select: select, 
    section_: section_, 
    section: section, 
    script_: script_, 
    script: script, 
    samp_: samp_, 
    samp: samp, 
    s_: s_, 
    s: s, 
    ruby_: ruby_, 
    ruby: ruby, 
    rt_: rt_, 
    rt: rt, 
    rp_: rp_, 
    rp: rp, 
    q_: q_, 
    q: q, 
    progress_: progress_, 
    progress: progress, 
    pre_: pre_, 
    pre: pre, 
    param_: param_, 
    param: param, 
    p_: p_, 
    p: p, 
    output_: output_, 
    output: output, 
    option_: option_, 
    option: option, 
    optgroup_: optgroup_, 
    optgroup: optgroup, 
    ol_: ol_, 
    ol: ol, 
    object_: object_, 
    object: object, 
    noscript_: noscript_, 
    noscript: noscript, 
    noframes_: noframes_, 
    noframes: noframes, 
    nav_: nav_, 
    nav: nav, 
    meter_: meter_, 
    meter: meter, 
    meta_: meta_, 
    meta: meta, 
    menuitem_: menuitem_, 
    menuitem: menuitem, 
    menu_: menu_, 
    menu: menu, 
    mark_: mark_, 
    mark: mark, 
    map_: map_, 
    map: map, 
    main_: main_, 
    main: main, 
    link_: link_, 
    link: link, 
    li_: li_, 
    li: li, 
    legend_: legend_, 
    legend: legend, 
    label_: label_, 
    label: label, 
    keygen_: keygen_, 
    keygen: keygen, 
    kbd_: kbd_, 
    kbd: kbd, 
    ins_: ins_, 
    ins: ins, 
    input_: input_, 
    input: input, 
    img_: img_, 
    img: img, 
    iframe_: iframe_, 
    iframe: iframe, 
    i_: i_, 
    i: i, 
    html_: html_, 
    html: html, 
    hr_: hr_, 
    hr: hr, 
    header_: header_, 
    header: header, 
    head_: head_, 
    head: head, 
    h6_: h6_, 
    h6: h6, 
    h5_: h5_, 
    h5: h5, 
    h4_: h4_, 
    h4: h4, 
    h3_: h3_, 
    h3: h3, 
    h2_: h2_, 
    h2: h2, 
    h1_: h1_, 
    h1: h1, 
    frameset_: frameset_, 
    frameset: frameset, 
    frame_: frame_, 
    frame: frame, 
    form_: form_, 
    form: form, 
    footer_: footer_, 
    footer: footer, 
    font_: font_, 
    font: font, 
    figure_: figure_, 
    figure: figure, 
    figcaption_: figcaption_, 
    figcaption: figcaption, 
    fieldset_: fieldset_, 
    fieldset: fieldset, 
    embed_: embed_, 
    embed: embed, 
    em_: em_, 
    em: em, 
    dt_: dt_, 
    dt: dt, 
    dl_: dl_, 
    dl: dl, 
    div_: div_, 
    div: div, 
    dir_: dir_, 
    dir: dir, 
    dialog_: dialog_, 
    dialog: dialog, 
    dfn_: dfn_, 
    dfn: dfn, 
    details_: details_, 
    details: details, 
    del_: del_, 
    del: del, 
    dd_: dd_, 
    dd: dd, 
    datalist_: datalist_, 
    datalist: datalist, 
    colgroup_: colgroup_, 
    colgroup: colgroup, 
    col_: col_, 
    col: col, 
    code_: code_, 
    code: code, 
    cite_: cite_, 
    cite: cite, 
    center_: center_, 
    center: center, 
    caption_: caption_, 
    caption: caption, 
    canvas_: canvas_, 
    canvas: canvas, 
    button_: button_, 
    button: button, 
    br_: br_, 
    br: br, 
    body_: body_, 
    body: body, 
    blockquote_: blockquote_, 
    blockquote: blockquote, 
    big_: big_, 
    big: big, 
    bdo_: bdo_, 
    bdo: bdo, 
    bdi_: bdi_, 
    bdi: bdi, 
    basefont_: basefont_, 
    basefont: basefont, 
    base_: base_, 
    base: base, 
    b_: b_, 
    b: b, 
    audio_: audio_, 
    audio: audio, 
    aside_: aside_, 
    aside: aside, 
    article_: article_, 
    article: article, 
    area_: area_, 
    area: area, 
    applet_: applet_, 
    applet: applet, 
    address_: address_, 
    address: address, 
    acronym_: acronym_, 
    acronym: acronym, 
    abbr_: abbr_, 
    abbr: abbr, 
    a_: a_, 
    a: a, 
    runTagName: runTagName, 
    tagName: tagName, 
    graft: graft, 
    element: element, 
    placeholder: placeholder, 
    text: text, 
    bifunctorHTML: bifunctorHTML, 
    functorHTML: functorHTML
};
