// Generated by psc-make version 0.6.8
"use strict";
var Prelude = require("Prelude");
var Data_Const = require("Data.Const");
var Data_Either = require("Data.Either");
var Data_Tuple = require("Data.Tuple");

/**
 *  | A `Bifunctor` is a `Functor` from the pair category `(Type, Type)` to `Type`.
 *  |
 *  | A type constructor with two type arguments can be made into a `Bifunctor` if
 *  | both of its type arguments are covariant.
 *  | 
 *  | The `bimap` function maps a pair of functions over the two type arguments
 *  | of the bifunctor.
 *  |
 *  | Laws:
 *  |
 *  | - Identity: `bimap id id == id`
 *  | - Composition: `bimap f1 g1 <<< bimap f2 g2 == bimap (f1 <<< f2) (g1 <<< g2)`
 *  |
 */
var Bifunctor = function (bimap) {
    this.bimap = bimap;
};

/**
 *  | A `Bifunctor` is a `Functor` from the pair category `(Type, Type)` to `Type`.
 *  |
 *  | A type constructor with two type arguments can be made into a `Bifunctor` if
 *  | both of its type arguments are covariant.
 *  | 
 *  | The `bimap` function maps a pair of functions over the two type arguments
 *  | of the bifunctor.
 *  |
 *  | Laws:
 *  |
 *  | - Identity: `bimap id id == id`
 *  | - Composition: `bimap f1 g1 <<< bimap f2 g2 == bimap (f1 <<< f2) (g1 <<< g2)`
 *  |
 */
var bimap = function (dict) {
    return dict.bimap;
};

/**
 *  | Map a function over the first type argument of a `Bifunctor`.
 */
var lmap = function (__dict_Bifunctor_0) {
    return function (f) {
        return bimap(__dict_Bifunctor_0)(f)(Prelude.id(Prelude.categoryArr));
    };
};

/**
 *  | Map a function over the second type component of a `Bifunctor`.
 */
var rmap = function (__dict_Bifunctor_1) {
    return bimap(__dict_Bifunctor_1)(Prelude.id(Prelude.categoryArr));
};
var bifunctorTuple = new Bifunctor(function (_613) {
    return function (_614) {
        return function (_615) {
            return new Data_Tuple.Tuple(_613(_615.value0), _614(_615.value1));
        };
    };
});
var bifunctorEither = new Bifunctor(function (_610) {
    return function (_611) {
        return function (_612) {
            if (_612 instanceof Data_Either.Left) {
                return new Data_Either.Left(_610(_612.value0));
            };
            if (_612 instanceof Data_Either.Right) {
                return new Data_Either.Right(_611(_612.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var bifunctorConst = new Bifunctor(function (_616) {
    return function (_617) {
        return function (_618) {
            return _616(_618);
        };
    };
});
module.exports = {
    Bifunctor: Bifunctor, 
    rmap: rmap, 
    lmap: lmap, 
    bimap: bimap, 
    bifunctorEither: bifunctorEither, 
    bifunctorTuple: bifunctorTuple, 
    bifunctorConst: bifunctorConst
};
