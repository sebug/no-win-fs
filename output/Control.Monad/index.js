// Generated by psc-make version 0.6.8

/**
 *  | This module defines helper functions for working with `Monad` instances.
 */
"use strict";
var Prelude = require("Prelude");

/**
 *  | Perform a monadic action when a condition is true.
 */
var when = function (__dict_Monad_0) {
    return function (_86) {
        return function (_87) {
            if (_86) {
                return _87;
            };
            if (!_86) {
                return Prelude["return"](__dict_Monad_0)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};

/**
 *  | Perform a monadic action unless a condition is true.
 */
var unless = function (__dict_Monad_1) {
    return function (_88) {
        return function (_89) {
            if (!_88) {
                return _89;
            };
            if (_88) {
                return Prelude["return"](__dict_Monad_1)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};

/**
 *  | Perform a monadic action `n` times collecting all of the results.
 */
var replicateM = function (__dict_Monad_2) {
    return function (_81) {
        return function (_82) {
            if (_81 === 0) {
                return Prelude["return"](__dict_Monad_2)([  ]);
            };
            return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(_82)(function (_2) {
                return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_2)(_81 - 1)(_82))(function (_1) {
                    return Prelude["return"](__dict_Monad_2)(Prelude[":"](_2)(_1));
                });
            });
        };
    };
};

/**
 *  | Perform a fold using a monadic step function.
 */
var foldM = function (__dict_Monad_3) {
    return function (_83) {
        return function (_84) {
            return function (_85) {
                if (_85.length === 0) {
                    return Prelude["return"](__dict_Monad_3)(_84);
                };
                if (_85.length >= 1) {
                    var _1034 = _85.slice(1);
                    return Prelude[">>="](__dict_Monad_3["__superclass_Prelude.Bind_1"]())(_83(_84)(_85[0]))(function (a$prime) {
                        return foldM(__dict_Monad_3)(_83)(a$prime)(_1034);
                    });
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};

/**
 *  | Filter where the predicate returns a monadic `Boolean`.
 *  |
 *  | For example: 
 *  |
 *  | ```purescript
 *  | powerSet :: forall a. [a] -> [[a]]
 *  | powerSet = filterM (const [true, false])
 *  | ```
 */
var filterM = function (__dict_Monad_4) {
    return function (_90) {
        return function (_91) {
            if (_91.length === 0) {
                return Prelude["return"](__dict_Monad_4)([  ]);
            };
            if (_91.length >= 1) {
                var _1041 = _91.slice(1);
                return Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(_90(_91[0]))(function (_4) {
                    return Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(filterM(__dict_Monad_4)(_90)(_1041))(function (_3) {
                        return Prelude["return"](__dict_Monad_4)((function () {
                            if (_4) {
                                return Prelude[":"](_91[0])(_3);
                            };
                            if (!_4) {
                                return _3;
                            };
                            throw new Error("Failed pattern match");
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match");
        };
    };
};
module.exports = {
    filterM: filterM, 
    unless: unless, 
    when: when, 
    foldM: foldM, 
    replicateM: replicateM
};
