// Generated by psc-make version 0.6.8
"use strict";
var Prelude = require("Prelude");
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Const = require("Data.Const");
var Data_Either = require("Data.Either");
var Data_Tuple = require("Data.Tuple");

/**
 *  | `Bitraversable` represents data structures with two type arguments which can be 
 *  | traversed.
 *  | 
 *  | A traversal for such a structure requires two functions, one for each type 
 *  | argument. Type class instances should choose the appropriate function based
 *  | on the type of the element encountered at each point of the traversal.
 *  | 
 */
var Bitraversable = function (__superclass_Data$dotBifoldable$dotBifoldable_1, __superclass_Data$dotBifunctor$dotBifunctor_0, bisequence, bitraverse) {
    this["__superclass_Data.Bifoldable.Bifoldable_1"] = __superclass_Data$dotBifoldable$dotBifoldable_1;
    this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
    this.bisequence = bisequence;
    this.bitraverse = bitraverse;
};

/**
 *  | `Bitraversable` represents data structures with two type arguments which can be 
 *  | traversed.
 *  | 
 *  | A traversal for such a structure requires two functions, one for each type 
 *  | argument. Type class instances should choose the appropriate function based
 *  | on the type of the element encountered at each point of the traversal.
 *  | 
 */
var bitraverse = function (dict) {
    return dict.bitraverse;
};
var bitraversableTuple = new Bitraversable(function () {
    return Data_Bifoldable.bifoldableTuple;
}, function () {
    return Data_Bifunctor.bifunctorTuple;
}, function (__dict_Applicative_1) {
    return function (_628) {
        return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create)(_628.value0))(_628.value1);
    };
}, function (__dict_Applicative_0) {
    return function (_625) {
        return function (_626) {
            return function (_627) {
                return Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create)(_625(_627.value0)))(_626(_627.value1));
            };
        };
    };
});
var bitraversableEither = new Bitraversable(function () {
    return Data_Bifoldable.bifoldableEither;
}, function () {
    return Data_Bifunctor.bifunctorEither;
}, function (__dict_Applicative_3) {
    return function (_632) {
        if (_632 instanceof Data_Either.Left) {
            return Prelude["<$>"]((__dict_Applicative_3["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Left.create)(_632.value0);
        };
        if (_632 instanceof Data_Either.Right) {
            return Prelude["<$>"]((__dict_Applicative_3["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_632.value0);
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_2) {
    return function (_629) {
        return function (_630) {
            return function (_631) {
                if (_631 instanceof Data_Either.Left) {
                    return Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Left.create)(_629(_631.value0));
                };
                if (_631 instanceof Data_Either.Right) {
                    return Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_630(_631.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    };
});
var bitraversableConst = new Bitraversable(function () {
    return Data_Bifoldable.bifoldableConst;
}, function () {
    return Data_Bifunctor.bifunctorConst;
}, function (__dict_Applicative_5) {
    return function (_636) {
        return Prelude["<$>"]((__dict_Applicative_5["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Const.Const)(_636);
    };
}, function (__dict_Applicative_4) {
    return function (_633) {
        return function (_634) {
            return function (_635) {
                return Prelude["<$>"]((__dict_Applicative_4["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Const.Const)(_633(_635));
            };
        };
    };
});

/**
 *  | `Bitraversable` represents data structures with two type arguments which can be 
 *  | traversed.
 *  | 
 *  | A traversal for such a structure requires two functions, one for each type 
 *  | argument. Type class instances should choose the appropriate function based
 *  | on the type of the element encountered at each point of the traversal.
 *  | 
 */
var bisequence = function (dict) {
    return dict.bisequence;
};

/**
 *  | Traverse a data structure, accumulating effects and results using an `Applicative` functor.
 */
var bifor = function (__dict_Bitraversable_6) {
    return function (__dict_Applicative_7) {
        return function (t) {
            return function (f) {
                return function (g) {
                    return bitraverse(__dict_Bitraversable_6)(__dict_Applicative_7)(f)(g)(t);
                };
            };
        };
    };
};
module.exports = {
    Bitraversable: Bitraversable, 
    bifor: bifor, 
    bisequence: bisequence, 
    bitraverse: bitraverse, 
    bitraversableTuple: bitraversableTuple, 
    bitraversableEither: bitraversableEither, 
    bitraversableConst: bitraversableConst
};
