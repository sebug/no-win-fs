-- Generated by psc-make version 0.6.8
module Data.Profunctor.Choice where
import Prelude ()
import Data.Profunctor.Choice ()
import Data.Profunctor ()
import Data.Either ()
import Prim ()
import Prelude ()
import Data.Either ()
import Data.Profunctor ()
--  | The `Choice` class extends `Profunctor` with combinators for working with
--  | sum types.
--  |
--  | `left` and `right` lift values in a `Profunctor` to act on the `Left` and
--  | `Right` components of a sum, respectively.
--  |
--  | The `Choice` class extends `Profunctor` with combinators for working with
--  | sum types.
--  |
--  | `left` and `right` lift values in a `Profunctor` to act on the `Left` and
--  | `Right` components of a sum, respectively.
--  |
infixr 2 +++
infixr 2 |||
--  | The `Choice` class extends `Profunctor` with combinators for working with
--  | sum types.
--  |
--  | `left` and `right` lift values in a `Profunctor` to act on the `Left` and
--  | `Right` components of a sum, respectively.
--  |
--  | The `Choice` class extends `Profunctor` with combinators for working with
--  | sum types.
--  |
--  | `left` and `right` lift values in a `Profunctor` to act on the `Left` and
--  | `Right` components of a sum, respectively.
--  |
--  | Compose a value acting on a sum from two values, each acting on one of
--  | the components of the sum.
--  | Compose a value which eliminates a sum from two values, each eliminating
--  | one side of the sum.
--  |
--  | This combinator is useful when assembling values from smaller components,
--  | because it provides a way to support two different types of input.
class (Data.Profunctor.Profunctor p) <= Choice p where
  left :: forall a b c. p a b -> p (Data.Either.Either a c) (Data.Either.Either b c)
  right :: forall a b c. p b c -> p (Data.Either.Either a b) (Data.Either.Either a c)
foreign import (|||) :: forall p a b c. (Prelude.Category p, Data.Profunctor.Choice.Choice p) => p a c -> p b c -> p (Data.Either.Either a b) c
foreign import (+++) :: forall p a b c d. (Prelude.Category p, Data.Profunctor.Choice.Choice p) => p a b -> p c d -> p (Data.Either.Either a c) (Data.Either.Either b d)
foreign import instance choiceArr :: Data.Profunctor.Choice.Choice Prim.Function
