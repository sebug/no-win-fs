-- Generated by psc-make version 0.6.8
module Data.DOM.Simple.Sugar where
import Data.DOM.Simple.Element ()
import Data.Tuple ()
import Prelude ()
import Data.DOM.Simple.Unsafe.Sugar ()
import Data.DOM.Simple.Sugar ()
import Prim ()
import Prelude ()
--  I'm not sure this is a good idea, just an experiment..
{- 
  - set the contents of the .container div inside body to hello world
  document <-? "body > .container" %<- "Hello World"

  - get an attribute on an element and add 'woo' to it
  someDiv <- document <-? "#someDiv"
  title <- someDiv <-# "my-attribute"
  someDiv #<- (Tuple "my-attribute" $ title ++ "woo")
 -}
import Control.Monad.Eff ()
import Data.Tuple ()
import Data.Maybe ()
import Data.Foldable ()
import Data.DOM.Simple.Types ()
import Data.DOM.Simple.Element ()
import Data.DOM.Simple.Document ()
import Data.DOM.Simple.Unsafe.Sugar ()
import DOM ()
--  (<<-) :: forall eff a c. b -> [(a -> (Eff (dom :: DOM | eff) c))] -> (Eff (dom :: DOM | eff) Unit)
--  (<<-) el act = for_ (\x -> x el) act
--  (<<-) el act = (dirtyKindDomRecast el) >>= (\el' -> for_ (\x -> x el) act)
--  (<<-) el act = (dirtyKindDomRecast el) >>= (\el' -> for_ (\x -> x el) act)
--  (<<-) :: forall eff a c. b -> [(a -> (Eff (dom :: DOM | eff) c))] -> (Eff (dom :: DOM | eff) Unit)
--  (<<-) el act = for_ (\x -> x el) act
class DOMArrows b where
  (#<-) :: forall eff. b -> Data.Tuple.Tuple Prim.String Prim.String -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prelude.Unit
  (<-#) :: forall eff. b -> Prim.String -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prim.String
  (<-?) :: forall eff. b -> Prim.String -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) (Data.Maybe.Maybe Data.DOM.Simple.Types.HTMLElement)
  (%<-) :: forall eff. b -> Prim.String -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prelude.Unit
  (@<-) :: forall eff. b -> Prim.String -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Prelude.Unit
foreign import instance arrowsHTMLElement :: (Data.DOM.Simple.Element.Element a) => Data.DOM.Simple.Sugar.DOMArrows a
foreign import instance arrowsEffHTMLElement :: (Data.DOM.Simple.Element.Element a) => Data.DOM.Simple.Sugar.DOMArrows (Control.Monad.Eff.Eff eff a)
foreign import instance arrowsMaybeHTMLElement :: (Data.DOM.Simple.Element.Element a) => Data.DOM.Simple.Sugar.DOMArrows (Data.Maybe.Maybe a)
