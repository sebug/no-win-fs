// Generated by psc-make version 0.6.8
"use strict";
var Data_DOM_Simple_Element = require("Data.DOM.Simple.Element");
var Data_Tuple = require("Data.Tuple");
var Prelude = require("Prelude");
var Data_DOM_Simple_Unsafe_Sugar = require("Data.DOM.Simple.Unsafe.Sugar");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Maybe = require("Data.Maybe");
var Data_Foldable = require("Data.Foldable");
var Data_DOM_Simple_Types = require("Data.DOM.Simple.Types");
var Data_DOM_Simple_Document = require("Data.DOM.Simple.Document");
var DOM = require("DOM");
var DOMArrows = function ($hash$less$minus, $percent$less$minus, $less$minus$hash, $less$minus$qmark, $at$less$minus) {
    this["#<-"] = $hash$less$minus;
    this["%<-"] = $percent$less$minus;
    this["<-#"] = $less$minus$hash;
    this["<-?"] = $less$minus$qmark;
    this["@<-"] = $at$less$minus;
};
var $at$less$minus = function (dict) {
    return dict["@<-"];
};
var $less$minus$qmark = function (dict) {
    return dict["<-?"];
};
var $less$minus$hash = function (dict) {
    return dict["<-#"];
};
var $percent$less$minus = function (dict) {
    return dict["%<-"];
};
var $hash$less$minus = function (dict) {
    return dict["#<-"];
};

/**
 *  (<<-) el act = (dirtyKindDomRecast el) >>= (\el' -> for_ (\x -> x el) act)
 */
var arrowsMaybeHTMLElement = function (__dict_Element_0) {
    return new DOMArrows(function (_500) {
        return function (_501) {
            if (_500 instanceof Data_Maybe.Just) {
                return $hash$less$minus(arrowsMaybeHTMLElement(__dict_Element_0))(Data_Maybe.Just.create(_500.value0))(_501);
            };
            throw new Error("Failed pattern match");
        };
    }, function (_506) {
        return function (_507) {
            if (_506 instanceof Data_Maybe.Just) {
                return $percent$less$minus(arrowsMaybeHTMLElement(__dict_Element_0))(Data_Maybe.Just.create(_506.value0))(_507);
            };
            throw new Error("Failed pattern match");
        };
    }, function (_502) {
        return function (_503) {
            if (_502 instanceof Data_Maybe.Just) {
                return $less$minus$hash(arrowsMaybeHTMLElement(__dict_Element_0))(Data_Maybe.Just.create(_502.value0))(_503);
            };
            throw new Error("Failed pattern match");
        };
    }, function (_504) {
        return function (_505) {
            if (_504 instanceof Data_Maybe.Just) {
                return $less$minus$qmark(arrowsMaybeHTMLElement(__dict_Element_0))(Data_Maybe.Just.create(_504.value0))(_505);
            };
            throw new Error("Failed pattern match");
        };
    }, function (_508) {
        return function (_509) {
            if (_508 instanceof Data_Maybe.Just) {
                return $at$less$minus(arrowsMaybeHTMLElement(__dict_Element_0))(Data_Maybe.Just.create(_508.value0))(_509);
            };
            throw new Error("Failed pattern match");
        };
    });
};

/**
 *  (<<-) :: forall eff a c. b -> [(a -> (Eff (dom :: DOM | eff) c))] -> (Eff (dom :: DOM | eff) Unit)
 */
var arrowsHTMLElement = function (__dict_Element_1) {
    return new DOMArrows(function (el) {
        return function (val) {
            return Data_DOM_Simple_Element.setAttribute(__dict_Element_1)(Data_Tuple.fst(val))(Data_Tuple.snd(val))(el);
        };
    }, function (el) {
        return function (txt) {
            return Data_DOM_Simple_Element.setInnerHTML(__dict_Element_1)(txt)(el);
        };
    }, function (el) {
        return function (key) {
            return Data_DOM_Simple_Element.getAttribute(__dict_Element_1)(key)(el);
        };
    }, function (el) {
        return function (sel) {
            return Data_DOM_Simple_Element.querySelector(__dict_Element_1)(sel)(el);
        };
    }, function (el) {
        return function (txt) {
            return Data_DOM_Simple_Element.setTextContent(__dict_Element_1)(txt)(el);
        };
    });
};

/**
 *  (<<-) el act = for_ (\x -> x el) act
 */
var arrowsEffHTMLElement = function (__dict_Element_2) {
    return new DOMArrows(function (el) {
        return function (val) {
            return function __do() {
                var x = Data_DOM_Simple_Unsafe_Sugar.dirtyKindDomRecast(__dict_Element_2)(el)();
                return $hash$less$minus(arrowsHTMLElement(__dict_Element_2))(x)(val)();
            };
        };
    }, function (el) {
        return function (txt) {
            return function __do() {
                var x = Data_DOM_Simple_Unsafe_Sugar.dirtyKindDomRecast(__dict_Element_2)(el)();
                return $percent$less$minus(arrowsHTMLElement(__dict_Element_2))(x)(txt)();
            };
        };
    }, function (el) {
        return function (key) {
            return function __do() {
                var x = Data_DOM_Simple_Unsafe_Sugar.dirtyKindDomRecast(__dict_Element_2)(el)();
                return $less$minus$hash(arrowsHTMLElement(__dict_Element_2))(x)(key)();
            };
        };
    }, function (el) {
        return function (sel) {
            return function __do() {
                var x = Data_DOM_Simple_Unsafe_Sugar.dirtyKindDomRecast(__dict_Element_2)(el)();
                return $less$minus$qmark(arrowsHTMLElement(__dict_Element_2))(x)(sel)();
            };
        };
    }, function (el) {
        return function (txt) {
            return function __do() {
                var x = Data_DOM_Simple_Unsafe_Sugar.dirtyKindDomRecast(__dict_Element_2)(el)();
                return $at$less$minus(arrowsHTMLElement(__dict_Element_2))(x)(txt)();
            };
        };
    });
};
module.exports = {
    DOMArrows: DOMArrows, 
    "@<-": $at$less$minus, 
    "%<-": $percent$less$minus, 
    "<-?": $less$minus$qmark, 
    "<-#": $less$minus$hash, 
    "#<-": $hash$less$minus, 
    arrowsHTMLElement: arrowsHTMLElement, 
    arrowsEffHTMLElement: arrowsEffHTMLElement, 
    arrowsMaybeHTMLElement: arrowsMaybeHTMLElement
};
