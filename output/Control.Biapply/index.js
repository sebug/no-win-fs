// Generated by psc-make version 0.6.8
"use strict";
var Prelude = require("Prelude");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Const = require("Data.Const");
var Data_Tuple = require("Data.Tuple");
var Control_Apply = require("Control.Apply");

/**
 *  | `Biapply` captures type constructors of two arguments which support lifting of
 *  | functions of one or more arguments, in the sense of `Apply`.
 */
var Biapply = function ($less$less$times$greater$greater, __superclass_Data$dotBifunctor$dotBifunctor_0) {
    this["<<*>>"] = $less$less$times$greater$greater;
    this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
};

/**
 *  | `Biapply` captures type constructors of two arguments which support lifting of
 *  | functions of one or more arguments, in the sense of `Apply`.
 */
var $less$less$times$greater$greater = function (dict) {
    return dict["<<*>>"];
};

/**
 *  | A convenience function which can be used to apply the result of `bipure` in
 *  | the style of `Applicative`:
 *  |
 *  | ```purescript
 *  | bipure f g <<$>> x <<*>> y
 *  | ```
 */
var $less$less$dollar$greater$greater = Prelude.id(Prelude.categoryArr);

/**
 *  | Keep the results of the first computation
 */
var $less$less$times = function (__dict_Biapply_0) {
    return function (a) {
        return function (b) {
            return $less$less$times$greater$greater(__dict_Biapply_0)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(__dict_Biapply_0["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"])(Prelude["const"]))(a))(b);
        };
    };
};

/**
 *  | Keep the results of the second computation
 */
var $times$greater$greater = function (__dict_Biapply_1) {
    return function (a) {
        return function (b) {
            return $less$less$times$greater$greater(__dict_Biapply_1)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(__dict_Biapply_1["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(Prelude["const"](Prelude.id(Prelude.categoryArr))))(a))(b);
        };
    };
};

/**
 *  | Lift a function of three arguments.
 */
var bilift3 = function (__dict_Biapply_2) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return $less$less$times$greater$greater(__dict_Biapply_2)($less$less$times$greater$greater(__dict_Biapply_2)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(__dict_Biapply_2["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b))(c);
                    };
                };
            };
        };
    };
};

/**
 *  | Lift a function of two arguments.
 */
var bilift2 = function (__dict_Biapply_3) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return $less$less$times$greater$greater(__dict_Biapply_3)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(__dict_Biapply_3["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b);
                };
            };
        };
    };
};
var biapplyTuple = new Biapply(function (_619) {
    return function (_620) {
        return new Data_Tuple.Tuple(_619.value0(_620.value0), _619.value1(_620.value1));
    };
}, function () {
    return Data_Bifunctor.bifunctorTuple;
});
var biapplyConst = new Biapply(function (_621) {
    return function (_622) {
        return _621(_622);
    };
}, function () {
    return Data_Bifunctor.bifunctorConst;
});
module.exports = {
    Biapply: Biapply, 
    bilift3: bilift3, 
    bilift2: bilift2, 
    "<<*": $less$less$times, 
    "*>>": $times$greater$greater, 
    "<<*>>": $less$less$times$greater$greater, 
    "<<$>>": $less$less$dollar$greater$greater, 
    biapplyTuple: biapplyTuple, 
    biapplyConst: biapplyConst
};
