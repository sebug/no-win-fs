-- Generated by psc-make version 0.6.8
module Control.Biapply where
import Prelude ()
import Control.Biapply ()
import Data.Bifunctor ()
import Prim ()
import Prelude ()
import Data.Bifunctor ()
import Data.Const ()
import Data.Tuple ()
import Control.Apply ()
--  | `Biapply` captures type constructors of two arguments which support lifting of
--  | functions of one or more arguments, in the sense of `Apply`.
--  | `Biapply` captures type constructors of two arguments which support lifting of
--  | functions of one or more arguments, in the sense of `Apply`.
infixl 4 <<$>>
infixl 4 <<*>>
infixl 4 <<*
infixl 4 *>>
--  | `Biapply` captures type constructors of two arguments which support lifting of
--  | functions of one or more arguments, in the sense of `Apply`.
--  | A convenience function which can be used to apply the result of `bipure` in
--  | the style of `Applicative`:
--  |
--  | ```purescript
--  | bipure f g <<$>> x <<*>> y
--  | ```
--  | Keep the results of the first computation
--  | Keep the results of the second computation
--  | Lift a function of three arguments.
--  | Lift a function of two arguments.
class (Data.Bifunctor.Bifunctor w) <= Biapply w where
  (<<*>>) :: forall a b c d. w (a -> b) (c -> d) -> w a c -> w b d
foreign import bilift3 :: forall w a b c d e f g h. (Control.Biapply.Biapply w) => (a -> b -> c -> d) -> (e -> f -> g -> h) -> w a e -> w b f -> w c g -> w d h
foreign import bilift2 :: forall w a b c d e f. (Control.Biapply.Biapply w) => (a -> b -> c) -> (d -> e -> f) -> w a d -> w b e -> w c f
foreign import (<<*) :: forall w a b c d. (Control.Biapply.Biapply w) => w a b -> w c d -> w a b
foreign import (*>>) :: forall w a b c d. (Control.Biapply.Biapply w) => w a b -> w c d -> w c d
foreign import (<<$>>) :: forall a b. (a -> b) -> a -> b
foreign import instance biapplyTuple :: Control.Biapply.Biapply Data.Tuple.Tuple
foreign import instance biapplyConst :: Control.Biapply.Biapply Data.Const.Const
