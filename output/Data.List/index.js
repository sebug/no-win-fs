// Generated by psc-make version 0.6.8
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var $bang = function (__copy__832) {
    return function (__copy__833) {
        var _832 = __copy__832;
        var _833 = __copy__833;
        tco: while (true) {
            if (_832 instanceof Nil) {
                return Data_Maybe.Nothing.value;
            };
            if (_832 instanceof Cons && _833 === 0) {
                return new Data_Maybe.Just(_832.value0);
            };
            if (_832 instanceof Cons) {
                var __tco__832 = _832.value1;
                var __tco__833 = _833 - 1;
                _832 = __tco__832;
                _833 = __tco__833;
                continue tco;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var zipWith = function (_848) {
    return function (_849) {
        return function (_850) {
            if (_849 instanceof Nil) {
                return Nil.value;
            };
            if (_850 instanceof Nil) {
                return Nil.value;
            };
            if (_849 instanceof Cons && _850 instanceof Cons) {
                return new Cons(_848(_849.value0)(_850.value0), zipWith(_848)(_849.value1)(_850.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (_892) {
            if (_892 instanceof Data_Maybe.Nothing) {
                return Nil.value;
            };
            if (_892 instanceof Data_Maybe.Just) {
                return new Cons(_892.value0.value0, go(f(_892.value0.value1)));
            };
            throw new Error("Failed pattern match");
        };
        return go(f(b));
    };
});
var uncons = function (_845) {
    if (_845 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_845 instanceof Cons) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(_845.value0, _845.value1));
    };
    throw new Error("Failed pattern match");
};
var toArray = (function () {
    var step = function (_900) {
        if (_900 instanceof Nil) {
            return Data_Maybe.Nothing.value;
        };
        if (_900 instanceof Cons) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(_900.value0, _900.value1));
        };
        throw new Error("Failed pattern match");
    };
    return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(step);
})();
var take = function (_836) {
    return function (_837) {
        if (_836 === 0) {
            return Nil.value;
        };
        if (_837 instanceof Nil) {
            return Nil.value;
        };
        if (_837 instanceof Cons) {
            return new Cons(_837.value0, take(_836 - 1)(_837.value1));
        };
        throw new Error("Failed pattern match");
    };
};
var tail = function (_844) {
    if (_844 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_844 instanceof Cons) {
        return new Data_Maybe.Just(_844.value1);
    };
    throw new Error("Failed pattern match");
};
var span = function (_852) {
    return function (_853) {
        if (_853 instanceof Cons) {
            if (_852(_853.value0)) {
                var _2967 = span(_852)(_853.value1);
                return new Data_Tuple.Tuple(new Cons(_853.value0, _2967.value0), _2967.value1);
            };
            if (Prelude.otherwise) {
                return new Data_Tuple.Tuple(Nil.value, _853);
            };
        };
        throw new Error("Failed pattern match");
    };
};
var singleton = function (a) {
    return new Cons(a, Nil.value);
};
var showList = function (__dict_Show_2) {
    return new Prelude.Show(function (_875) {
        if (_875 instanceof Nil) {
            return "Nil";
        };
        if (_875 instanceof Cons) {
            return "Cons (" + (Prelude.show(__dict_Show_2)(_875.value0) + (") (" + (Prelude.show(showList(__dict_Show_2))(_875.value1) + ")")));
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupList = new Prelude.Semigroup(function (_880) {
    return function (_881) {
        if (_880 instanceof Nil) {
            return _881;
        };
        if (_880 instanceof Cons) {
            return new Cons(_880.value0, Prelude["<>"](semigroupList)(_880.value1)(_881));
        };
        throw new Error("Failed pattern match");
    };
});
var reverse = (function () {
    var go = function (__copy__901) {
        return function (__copy__902) {
            var _901 = __copy__901;
            var _902 = __copy__902;
            tco: while (true) {
                if (_902 instanceof Nil) {
                    return _901;
                };
                if (_902 instanceof Cons) {
                    var __tco__901 = new Cons(_902.value0, _901);
                    var __tco__902 = _902.value1;
                    _901 = __tco__901;
                    _902 = __tco__902;
                    continue tco;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return go(Nil.value);
})();
var $$null = function (_851) {
    if (_851 instanceof Nil) {
        return true;
    };
    return false;
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var mapMaybe = function (_841) {
    return function (_842) {
        if (_842 instanceof Nil) {
            return Nil.value;
        };
        if (_842 instanceof Cons) {
            var _2986 = _841(_842.value0);
            if (_2986 instanceof Data_Maybe.Nothing) {
                return mapMaybe(_841)(_842.value1);
            };
            if (_2986 instanceof Data_Maybe.Just) {
                return new Cons(_2986.value0, mapMaybe(_841)(_842.value1));
            };
            throw new Error("Failed pattern match");
        };
        throw new Error("Failed pattern match");
    };
};
var length = function (_838) {
    if (_838 instanceof Nil) {
        return 0;
    };
    if (_838 instanceof Cons) {
        return 1 + length(_838.value1);
    };
    throw new Error("Failed pattern match");
};
var last = function (__copy__846) {
    var _846 = __copy__846;
    tco: while (true) {
        if (_846 instanceof Cons && _846.value1 instanceof Nil) {
            return new Data_Maybe.Just(_846.value0);
        };
        if (_846 instanceof Cons) {
            var __tco__846 = _846.value1;
            _846 = __tco__846;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var insertBy = function (_856) {
    return function (_857) {
        return function (_858) {
            if (_858 instanceof Nil) {
                return new Cons(_857, Nil.value);
            };
            if (_858 instanceof Cons) {
                var _3001 = _856(_857)(_858.value0);
                if (_3001 instanceof Prelude.GT) {
                    return new Cons(_858.value0, insertBy(_856)(_857)(_858.value1));
                };
                return new Cons(_857, _858);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var insertAt = function (_859) {
    return function (_860) {
        return function (_861) {
            if (_859 === 0) {
                return new Data_Maybe.Just(new Cons(_860, _861));
            };
            if (_861 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_861.value0))(insertAt(_859 - 1)(_860)(_861.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (__dict_Ord_4) {
    return insertBy(Prelude.compare(__dict_Ord_4));
};
var init = function (_847) {
    if (_847 instanceof Cons && _847.value1 instanceof Nil) {
        return new Data_Maybe.Just(Nil.value);
    };
    if (_847 instanceof Cons) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_847.value0))(init(_847.value1));
    };
    return Data_Maybe.Nothing.value;
};
var head = function (_843) {
    if (_843 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_843 instanceof Cons) {
        return new Data_Maybe.Just(_843.value0);
    };
    throw new Error("Failed pattern match");
};
var groupBy = function (_854) {
    return function (_855) {
        if (_855 instanceof Nil) {
            return Nil.value;
        };
        if (_855 instanceof Cons) {
            var _3019 = span(_854(_855.value0))(_855.value1);
            return new Cons(new Cons(_855.value0, _3019.value0), groupBy(_854)(_3019.value1));
        };
        throw new Error("Failed pattern match");
    };
};
var group = function (__dict_Eq_5) {
    return groupBy(Prelude["=="](__dict_Eq_5));
};
var functorList = new Prelude.Functor(function (_882) {
    return function (_883) {
        if (_883 instanceof Nil) {
            return Nil.value;
        };
        if (_883 instanceof Cons) {
            return new Cons(_882(_883.value0), Prelude["<$>"](functorList)(_882)(_883.value1));
        };
        throw new Error("Failed pattern match");
    };
});
var fromArray = Data_Foldable.foldr(Data_Foldable.foldableArray)(Cons.create)(Nil.value);
var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_6) {
    return function (_890) {
        return function (_891) {
            if (_891 instanceof Nil) {
                return Data_Monoid.mempty(__dict_Monoid_6);
            };
            if (_891 instanceof Cons) {
                return Prelude["<>"](__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(_890(_891.value0))(Data_Foldable.foldMap(foldableList)(__dict_Monoid_6)(_890)(_891.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_887) {
    return function (_888) {
        return function (_889) {
            if (_889 instanceof Nil) {
                return _888;
            };
            if (_889 instanceof Cons) {
                return Data_Foldable.foldl(foldableList)(_887)(_887(_888)(_889.value0))(_889.value1);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_884) {
    return function (_885) {
        return function (_886) {
            if (_886 instanceof Nil) {
                return _885;
            };
            if (_886 instanceof Cons) {
                return _884(_886.value0)(Data_Foldable.foldr(foldableList)(_884)(_885)(_886.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (__dict_Applicative_1) {
    return function (_895) {
        if (_895 instanceof Nil) {
            return Prelude.pure(__dict_Applicative_1)(Nil.value);
        };
        if (_895 instanceof Cons) {
            return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_895.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_1)(_895.value1));
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_0) {
    return function (_893) {
        return function (_894) {
            if (_894 instanceof Nil) {
                return Prelude.pure(__dict_Applicative_0)(Nil.value);
            };
            if (_894 instanceof Cons) {
                return Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_893(_894.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_0)(_893)(_894.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var filter = function (_839) {
    return function (_840) {
        if (_840 instanceof Nil) {
            return Nil.value;
        };
        if (_840 instanceof Cons && _839(_840.value0)) {
            return new Cons(_840.value0, filter(_839)(_840.value1));
        };
        if (_840 instanceof Cons) {
            return filter(_839)(_840.value1);
        };
        throw new Error("Failed pattern match");
    };
};
var intersectBy = function (_872) {
    return function (_873) {
        return function (_874) {
            if (_873 instanceof Nil) {
                return Nil.value;
            };
            if (_874 instanceof Nil) {
                return Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(_872(x))(_874);
            })(_873);
        };
    };
};
var intersect = function (__dict_Eq_7) {
    return intersectBy(Prelude["=="](__dict_Eq_7));
};
var nubBy = function (_870) {
    return function (_871) {
        if (_871 instanceof Nil) {
            return Nil.value;
        };
        if (_871 instanceof Cons) {
            return new Cons(_871.value0, nubBy(_870)(filter(function (y) {
                return !_870(_871.value0)(y);
            })(_871.value1)));
        };
        throw new Error("Failed pattern match");
    };
};
var nub = function (__dict_Eq_8) {
    return nubBy(Prelude["=="](__dict_Eq_8));
};
var eqList = function (__dict_Eq_9) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            return !Prelude["=="](eqList(__dict_Eq_9))(xs)(ys);
        };
    }, function (_876) {
        return function (_877) {
            if (_876 instanceof Nil && _877 instanceof Nil) {
                return true;
            };
            if (_876 instanceof Cons && _877 instanceof Cons) {
                return Prelude["=="](__dict_Eq_9)(_876.value0)(_877.value0) && Prelude["=="](eqList(__dict_Eq_9))(_876.value1)(_877.value1);
            };
            return false;
        };
    });
};
var ordList = function (__dict_Ord_3) {
    return new Prelude.Ord(function () {
        return eqList(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
    }, function (_878) {
        return function (_879) {
            if (_878 instanceof Nil && _879 instanceof Nil) {
                return Prelude.EQ.value;
            };
            if (_878 instanceof Nil) {
                return Prelude.LT.value;
            };
            if (_879 instanceof Nil) {
                return Prelude.GT.value;
            };
            if (_878 instanceof Cons && _879 instanceof Cons) {
                var _3070 = Prelude.compare(__dict_Ord_3)(_878.value0)(_879.value0);
                if (_3070 instanceof Prelude.EQ) {
                    return Prelude.compare(ordList(__dict_Ord_3))(_878.value1)(_879.value1);
                };
                return _3070;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var drop = function (__copy__834) {
    return function (__copy__835) {
        var _834 = __copy__834;
        var _835 = __copy__835;
        tco: while (true) {
            if (_834 === 0) {
                return _835;
            };
            if (_835 instanceof Nil) {
                return Nil.value;
            };
            if (_835 instanceof Cons) {
                var __tco__834 = _834 - 1;
                var __tco__835 = _835.value1;
                _834 = __tco__834;
                _835 = __tco__835;
                continue tco;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var deleteBy = function (_862) {
    return function (_863) {
        return function (_864) {
            if (_864 instanceof Nil) {
                return Nil.value;
            };
            if (_864 instanceof Cons && _862(_863)(_864.value0)) {
                return _864.value1;
            };
            if (_864 instanceof Cons) {
                return new Cons(_864.value0, deleteBy(_862)(_863)(_864.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (__dict_Eq_10) {
    return unionBy(Prelude["=="](__dict_Eq_10));
};
var deleteAt = function (_865) {
    return function (_866) {
        if (_865 === 0 && _866 instanceof Cons) {
            return new Data_Maybe.Just(_866.value1);
        };
        if (_866 instanceof Cons) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_866.value0))(deleteAt(_865 - 1)(_866.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (__dict_Eq_11) {
    return deleteBy(Prelude["=="](__dict_Eq_11));
};
var $bslash$bslash = function (__dict_Eq_12) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(__dict_Eq_12)));
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryArr));
var applyList = new Prelude.Apply(function (_896) {
    return function (_897) {
        if (_896 instanceof Nil) {
            return Nil.value;
        };
        if (_896 instanceof Cons) {
            return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(_896.value0)(_897))(Prelude["<*>"](applyList)(_896.value1)(_897));
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorList;
});
var bindList = new Prelude.Bind(function (_898) {
    return function (_899) {
        if (_898 instanceof Nil) {
            return Nil.value;
        };
        if (_898 instanceof Cons) {
            return Prelude["<>"](semigroupList)(_899(_898.value0))(Prelude[">>="](bindList)(_898.value1)(_899));
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyList;
});
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var alterAt = function (_867) {
    return function (_868) {
        return function (_869) {
            if (_867 === 0 && _869 instanceof Cons) {
                return Data_Maybe.Just.create((function () {
                    var _3103 = _868(_869.value0);
                    if (_3103 instanceof Data_Maybe.Nothing) {
                        return _869.value1;
                    };
                    if (_3103 instanceof Data_Maybe.Just) {
                        return new Cons(_3103.value0, _869.value1);
                    };
                    throw new Error("Failed pattern match");
                })());
            };
            if (_869 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_869.value0))(alterAt(_867 - 1)(_868)(_869.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var altList = new Control_Alt.Alt(Prelude["<>"](semigroupList), function () {
    return functorList;
});
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    unionBy: unionBy, 
    union: union, 
    uncons: uncons, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    nubBy: nubBy, 
    nub: nub, 
    reverse: reverse, 
    alterAt: alterAt, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    insertAt: insertAt, 
    insertBy: insertBy, 
    insert: insert, 
    "\\\\": $bslash$bslash, 
    groupBy: groupBy, 
    group: group, 
    span: span, 
    "null": $$null, 
    zipWith: zipWith, 
    init: init, 
    last: last, 
    tail: tail, 
    head: head, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filter: filter, 
    length: length, 
    take: take, 
    drop: drop, 
    "!": $bang, 
    toArray: toArray, 
    fromArray: fromArray, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};
